{"pageProps":{"note":{"id":"2b35ixagticlchpxb121vfm","title":"Classes","desc":"","updated":1712134690726,"created":1712134690726,"custom":{},"fname":"learning.typescript.classes","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"b3a5df1245691aaf452b33d7fbe814b3","links":[],"anchors":{"access-modifiers":{"type":"header","text":"Access modifiers","value":"access-modifiers","line":8,"column":0,"depth":2},"shorthand-notation":{"type":"header","text":"Shorthand notation","value":"shorthand-notation","line":37,"column":0,"depth":2},"inheritance":{"type":"header","text":"Inheritance","value":"inheritance","line":64,"column":0,"depth":2},"overriding-methods":{"type":"header","text":"overriding methods","value":"overriding-methods","line":77,"column":0,"depth":3},"super-keyword":{"type":"header","text":"super keyword","value":"super-keyword","line":81,"column":0,"depth":3},"getters-and-setters":{"type":"header","text":"Getters and Setters","value":"getters-and-setters","line":100,"column":0,"depth":2},"static-methods":{"type":"header","text":"Static Methods","value":"static-methods","line":126,"column":0,"depth":2},"abstract-classes":{"type":"header","text":"Abstract Classes","value":"abstract-classes","line":148,"column":0,"depth":2},"private-constructors-and-singletons":{"type":"header","text":"Private Constructors and Singletons","value":"private-constructors-and-singletons","line":154,"column":0,"depth":2}},"children":[],"parent":"w5l9zvdha3es8jaxge5e4lu","data":{}},"body":"<h1 id=\"classes\">Classes<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#classes\"></a></h1>\n<h2 id=\"access-modifiers\">Access modifiers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#access-modifiers\"></a></h2>\n<ul>\n<li>\n<p><strong>private</strong>: accessible only within the class. They are not even inherited.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Department</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> employees<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</li>\n<li>\n<p><strong>public</strong>: default modifier. accessible outside the class.</p>\n</li>\n<li>\n<p><strong>protected</strong>: accessible to class and its children(i.e can be inherited).</p>\n</li>\n<li>\n<p><strong>readonly</strong>: This prevents assignments to the field outside of the constructor.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Greeter</span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">readonly</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>otherName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>otherName <span class=\"token operator\">!==</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> otherName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"not ok\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Cannot assign to 'name' because it is a read-only property.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Greeter</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ng<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"also not ok\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Cannot assign to 'name' because it is a read-only property.</span>\n</code></pre>\n</li>\n</ul>\n<h2 id=\"shorthand-notation\">Shorthand notation<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#shorthand-notation\"></a></h2>\n<p>When we want to initialize the member variables in constructor, <strong>instead of</strong></p>\n<pre class=\"language-ts\"><code class=\"language-ts\">   <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Product</span></span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    price<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> isListed<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> pr<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">price</span> <span class=\"token operator\">=</span> pr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isListed</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>we can do</strong></p>\n<pre class=\"language-ts\"><code class=\"language-ts\">      <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Product</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> isListed<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> price<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isListed</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"inheritance\">Inheritance<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#inheritance\"></a></h2>\n<ul>\n<li>\n<p>utilizing base class methods and properties. They are automatically passed on to the child class via inheritance.</p>\n</li>\n<li>\n<p>can inherit one class ata time.</p>\n</li>\n<li>\n<p>use <code>extends</code> to inherit.</p>\n</li>\n<li>\n<p>eg:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">ITDept</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Dept</span></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</li>\n</ul>\n<h3 id=\"overriding-methods\">overriding methods<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#overriding-methods\"></a></h3>\n<ul>\n<li>TS allows to override methods of base class in child class.</li>\n<li>It calls the child method when invoked from child reference.</li>\n</ul>\n<h3 id=\"super-keyword\">super keyword<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#super-keyword\"></a></h3>\n<ul>\n<li>calls the constructor of the base class.</li>\n<li>if you have a base class, you’ll need to call super(); in your child constructor body before using any <code>this.</code> members:</li>\n</ul>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Base</span></span> <span class=\"token punctuation\">{</span>\n  k <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Derived</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Base</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Prints a wrong value in ES5; throws exception in ES6</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">k</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'super'</span> must be called before accessing <span class=\"token string\">'this'</span> <span class=\"token keyword\">in</span> the constructor <span class=\"token keyword\">of</span> a derived <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"getters-and-setters\">Getters and Setters<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#getters-and-setters\"></a></h2>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Dept</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> id<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\"><span class=\"token maybe-class-name\">DeptId</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">set</span> <span class=\"token function\"><span class=\"token maybe-class-name\">DeptId</span></span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>DeptId</code> is a getter that is publicly accessible. Now we can get the value of dept by creating reference of Dept.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Note how getters/setters are accessed without ()</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">IT</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Dept</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'IT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">IT</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">DeptId</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// getting value</span>\n<span class=\"token constant\">IT</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">DeptId</span></span> <span class=\"token operator\">=</span> <span class=\"token string\">'1234'</span> <span class=\"token comment\">// setting value</span>\n</code></pre>\n<h2 id=\"static-methods\">Static Methods<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#static-methods\"></a></h2>\n<ul>\n<li>Classes may have static members. These members aren’t associated with a particular instance of the class. They can be accessed through the class constructor object itself:</li>\n<li>often used for utility functions that you want to group into a class or for global constants.</li>\n<li>the static methods are decoupled from instances and <strong>cannot</strong> be referenced with <code>this</code>.</li>\n<li>Static members are also inherited.</li>\n</ul>\n<p>eg: <code>Math.pi</code>, <code>Math.pow()</code></p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Test</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> year <span class=\"token operator\">=</span> <span class=\"token number\">2024</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"xyz\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// above func can be used as: </span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">year</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//2024</span>\n</code></pre>\n<h2 id=\"abstract-classes\">Abstract Classes<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#abstract-classes\"></a></h2>\n<ul>\n<li>A class that can't be instantiated but has to be extended.</li>\n<li>An abstract class typically includes one or more abstract methods or property declarations. </li>\n<li>The class which extends the abstract class must define all the abstract methods. </li>\n<li>We <strong>cannot</strong> create an instance of an abstract class.</li>\n</ul>\n<h2 id=\"private-constructors-and-singletons\">Private Constructors and Singletons<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#private-constructors-and-singletons\"></a></h2>\n<p>The singleton pattern is a creational pattern that allows you to make sure that only one instance of a class is created. .</p>\n<pre class=\"language-ts\"><code class=\"language-ts\">    <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Singleton</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> instance<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Singleton</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// do something construct...</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token maybe-class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">instance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token maybe-class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">instance</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Singleton</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// ... any one time initialization goes here ...</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">instance</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> something <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Singleton</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Error: constructor of 'Singleton' is private.</span>\n\n<span class=\"token keyword\">let</span> instance <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// do something with the instance...</span>\n</code></pre>\n<ul>\n<li><a href=\"https://github.com/mindfiredigital/canvas-editor/commit/b09d98dea3a38caba041bab35736bfd2712c068c#diff-ce60497e4a1a947c474a38c5959a2d9499b9531666b1df509ac4305518a93095R11\">Canvas editor singleton example</a></li>\n</ul>","noteIndex":{"id":"dlb5bmx7v8f6otsgongz4vx","title":"Hi","desc":"","updated":1663067414354,"created":1648190029829,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"5e58da66991a53ed4cf17d0cade77fe6","links":[{"type":"wiki","from":{"fname":"root","id":"dlb5bmx7v8f6otsgongz4vx","vaultName":"Harshita-notes"},"value":"user.tharshita13","alias":"@tharshita13","position":{"start":{"line":15,"column":12,"offset":433},"end":{"line":15,"column":24,"offset":445},"indent":[]},"xvault":false,"to":{"fname":"user.tharshita13"}}],"anchors":{"contacts":{"type":"header","text":"Contacts","value":"contacts","line":13,"column":0,"depth":2}},"children":["trkx8xrg7g2fm023ez4ldqj","c8csxid3zoghxorepwcrami","urj8q1uq98o3upmgbt2qxns","ykyv5ng8vb44dx8wlchugby","qfxhhwhykm8ml24xxlu67v3","fmv0zz06pgij3bozzx9zes9"],"parent":null,"data":{},"body":"\nHi,\nWelcome to Harshita's Digital Garden 🌱\nI'm Harshita Joshi. I'm a software engineer.\nWhen not at the computer, I play ukulele, do yoga, study [German](https://harshita-mindfire.github.io/german-for-beginners/) and wonder about having numerous pets.\n\n## Contacts\n\nYou can find and contact me in the following places\n\n- Email: tharshita13@gmail.com\n\n- Github: [Harshita-mindfire](https://github.com/Harshita-mindfire)\n\n- Medium: [@tharshita13](https://medium.com/@tharshita13)\n\n- LinkedIn: [Harshita Joshi](https://www.linkedin.com/in/harshita-joshi-030b29118/)\n\n- Instagram: [imharshita07](https://www.instagram.com/imharshita07/)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true,"enableEngineV3":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Digital Garden","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://Harshita-mindfire.github.io","assetsPrefix":"/Frontend-JsDev-Handbook","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}