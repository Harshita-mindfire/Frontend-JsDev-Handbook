{"pageProps":{"note":{"id":"oxiuc7apdhpqqh90etrafog","title":"rabbitMQ","desc":"","updated":1683264572377,"created":1683264572378,"custom":{},"fname":"learning.rabbitMQ","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"1d623a30450a482153f849e3434dc9fb","links":[],"anchors":{"types-of-exchange":{"type":"header","text":"Types of Exchange","value":"types-of-exchange","line":25,"column":0,"depth":2},"fanout":{"type":"header","text":"Fanout","value":"fanout","line":27,"column":0,"depth":3},"direct-exchange":{"type":"header","text":"Direct exchange","value":"direct-exchange","line":32,"column":0,"depth":3},"topic-exchange":{"type":"header","text":"Topic exchange","value":"topic-exchange","line":36,"column":0,"depth":3},"header-exchange":{"type":"header","text":"Header exchange","value":"header-exchange","line":40,"column":0,"depth":3},"default-exchange":{"type":"header","text":"Default exchange","value":"default-exchange","line":44,"column":0,"depth":3},"resource":{"type":"header","text":"Resource","value":"resource","line":49,"column":0,"depth":2}},"children":[],"parent":"trkx8xrg7g2fm023ez4ldqj","data":{}},"body":"<h1 id=\"rabbitmq\">rabbitMQ<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rabbitmq\"></a></h1>\n<p>RabbitMQ enables asynchronous processing, meaning that it allows you to put a message in a queue without processing it immediately. </p>\n<ul>\n<li>implementation of AMQP 0.9.1(advance message queuing protocol) message model</li>\n<li>In this message model, the producer(service that produces message), instead of directly producing to a message queue, it is going to produce to an exchange.</li>\n<li>An exchange can be connected to many queues.</li>\n<li>The consuming services i.e consumers are subscribed to the queue and listens to messages.</li>\n<li>AMQP RabbitMQ is the message broker here.</li>\n<li>In RabbitMQ, the message metadata determines how the message moves(routing key etc)</li>\n</ul>\n<div class=\"mermaid\">\n    graph LR;\n    Checkout-->Exchange-->|binding key|Queue1;\n    Exchange--> |binding key|Queue2;\n    Queue1-->Inventory;\n    Queue2-->Shipping;\n</div>\n<h2 id=\"types-of-exchange\">Types of Exchange<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#types-of-exchange\"></a></h2>\n<h3 id=\"fanout\">Fanout<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#fanout\"></a></h3>\n<ul>\n<li>checkout(producer) will produce to exchange\nExchange duplicates the message and send it to every single queue it knows about.</li>\n</ul>\n<h3 id=\"direct-exchange\">Direct exchange<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#direct-exchange\"></a></h3>\n<ul>\n<li>checkout will produce a messsage and that message will have a routing key. The routing key is being compared with the binding key.</li>\n</ul>\n<h3 id=\"topic-exchange\">Topic exchange<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#topic-exchange\"></a></h3>\n<ul>\n<li>partial match between a routing key and binding key</li>\n</ul>\n<h3 id=\"header-exchange\">Header exchange<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#header-exchange\"></a></h3>\n<ul>\n<li>routing key is ignored and message is passed based on header.</li>\n</ul>\n<h3 id=\"default-exchange\">Default exchange<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#default-exchange\"></a></h3>\n<p>(native to RabbitMQ, not a part of AMQP)\nrouting key = queue name</p>\n<h2 id=\"resource\">Resource<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#resource\"></a></h2>\n<p><a href=\"https://www.youtube.com/watch?v=7rkeORD4jSw\">https://www.youtube.com/watch?v=7rkeORD4jSw</a></p>","noteIndex":{"id":"dlb5bmx7v8f6otsgongz4vx","title":"Hi","desc":"","updated":1663067414354,"created":1648190029829,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"5e58da66991a53ed4cf17d0cade77fe6","links":[{"type":"wiki","from":{"fname":"root","id":"dlb5bmx7v8f6otsgongz4vx","vaultName":"Harshita-notes"},"value":"user.tharshita13","alias":"@tharshita13","position":{"start":{"line":15,"column":12,"offset":433},"end":{"line":15,"column":24,"offset":445},"indent":[]},"xvault":false,"to":{"fname":"user.tharshita13"}}],"anchors":{"contacts":{"type":"header","text":"Contacts","value":"contacts","line":13,"column":0,"depth":2}},"children":["trkx8xrg7g2fm023ez4ldqj","c8csxid3zoghxorepwcrami","urj8q1uq98o3upmgbt2qxns","ykyv5ng8vb44dx8wlchugby","qfxhhwhykm8ml24xxlu67v3","fmv0zz06pgij3bozzx9zes9"],"parent":null,"data":{},"body":"\nHi,\nWelcome to Harshita's Digital Garden ðŸŒ±\nI'm Harshita Joshi. I'm a software engineer.\nWhen not at the computer, I play ukulele, do yoga, study [German](https://harshita-mindfire.github.io/german-for-beginners/) and wonder about having numerous pets.\n\n## Contacts\n\nYou can find and contact me in the following places\n\n- Email: tharshita13@gmail.com\n\n- Github: [Harshita-mindfire](https://github.com/Harshita-mindfire)\n\n- Medium: [@tharshita13](https://medium.com/@tharshita13)\n\n- LinkedIn: [Harshita Joshi](https://www.linkedin.com/in/harshita-joshi-030b29118/)\n\n- Instagram: [imharshita07](https://www.instagram.com/imharshita07/)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true,"enableEngineV3":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Digital Garden","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://Harshita-mindfire.github.io","assetsPrefix":"/Frontend-JsDev-Handbook","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}