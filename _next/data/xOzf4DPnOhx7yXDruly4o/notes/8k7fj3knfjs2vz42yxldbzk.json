{"pageProps":{"note":{"id":"8k7fj3knfjs2vz42yxldbzk","title":"JavaScript","desc":"","updated":1692109736041,"created":1648190780500,"custom":{},"fname":"learning.javascript","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"fe9dadc099735da8969fde863e128df4","links":[{"type":"wiki","from":{"fname":"learning.javascript","id":"8k7fj3knfjs2vz42yxldbzk","vaultName":"Harshita-notes"},"value":"learning.javascript.handson.pollyfill","alias":"Reduce pollyfill","position":{"start":{"line":314,"column":1,"offset":9438},"end":{"line":314,"column":74,"offset":9511},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"learning.javascript.handson.pollyfill","anchorHeader":"array.reduce"}},{"type":"wiki","from":{"fname":"learning.javascript","id":"8k7fj3knfjs2vz42yxldbzk","vaultName":"Harshita-notes"},"value":"learning.javascript.handson.pollyfill","alias":"Map pollyfill","position":{"start":{"line":373,"column":1,"offset":10813},"end":{"line":373,"column":68,"offset":10880},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"learning.javascript.handson.pollyfill","anchorHeader":"array.map"}},{"type":"wiki","from":{"fname":"learning.javascript","id":"8k7fj3knfjs2vz42yxldbzk","vaultName":"Harshita-notes"},"value":"learning.javascript.handson.pollyfill","alias":"Promise.all pollyfill","position":{"start":{"line":442,"column":1,"offset":12346},"end":{"line":442,"column":78,"offset":12423},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"learning.javascript.handson.pollyfill","anchorHeader":"promise.all"}},{"type":"ref","from":{"fname":"learning.javascript","id":"8k7fj3knfjs2vz42yxldbzk","vaultName":"Harshita-notes"},"value":"learning.javascript.promises-exercise","position":{"start":{"line":410,"column":1,"offset":11637},"end":{"line":410,"column":61,"offset":11697},"indent":[]},"xvault":false,"to":{"fname":"learning.javascript.promises-exercise"}}],"anchors":{"github-questions":{"type":"header","text":"Github questions","value":"github-questions","line":8,"column":0,"depth":2},"js":{"type":"header","text":"JS","value":"js","line":12,"column":0,"depth":1},"execution-context":{"type":"header","text":"Execution context","value":"execution-context","line":18,"column":0,"depth":2},"two-stages-of-execution-context":{"type":"header","text":"Two stages of Execution context","value":"two-stages-of-execution-context","line":26,"column":0,"depth":3},"two-types-of-execution-context":{"type":"header","text":"Two types of execution context","value":"two-types-of-execution-context","line":31,"column":0,"depth":3},"lexical-environment":{"type":"header","text":"Lexical environment","value":"lexical-environment","line":37,"column":0,"depth":2},"scope-chain":{"type":"header","text":"Scope chain","value":"scope-chain","line":46,"column":0,"depth":2},"for-in-vs-for-of":{"type":"header","text":"FOR in vs FOR of","value":"for-in-vs-for-of","line":52,"column":0,"depth":2},"block":{"type":"header","text":"Block","value":"block","line":66,"column":0,"depth":2},"let-and-const":{"type":"header","text":"let and const","value":"let-and-const","line":72,"column":0,"depth":2},"closure":{"type":"header","text":"closure","value":"closure","line":80,"column":0,"depth":2},"hoisting":{"type":"header","text":"Hoisting","value":"hoisting","line":85,"column":0,"depth":2},"takeaways":{"type":"header","text":"Takeaways","value":"takeaways","line":94,"column":0,"depth":3},"difference-between-arrow-function-and-normal-function":{"type":"header","text":"Difference between arrow function and normal function","value":"difference-between-arrow-function-and-normal-function","line":99,"column":0,"depth":2},"call-bind-apply":{"type":"header","text":"Call, bind, apply","value":"call-bind-apply","line":118,"column":0,"depth":2},"call":{"type":"header","text":"Call","value":"call","line":120,"column":0,"depth":3},"bind":{"type":"header","text":"bind","value":"bind","line":126,"column":0,"depth":3},"currying":{"type":"header","text":"Currying","value":"currying","line":156,"column":0,"depth":2},"imp-interview-ques":{"type":"header","text":"imp interview ques","value":"imp-interview-ques","line":181,"column":0,"depth":3},"debounce":{"type":"header","text":"Debounce","value":"debounce","line":185,"column":0,"depth":2},"this":{"type":"header","text":"this","value":"this","line":189,"column":0,"depth":2},"event-propagation":{"type":"header","text":"Event Propagation","value":"event-propagation","line":193,"column":0,"depth":2},"scripts-async-defer":{"type":"header","text":"Scripts: async, defer","value":"scripts-async-defer","line":246,"column":0,"depth":2},"problem":{"type":"header","text":"Problem","value":"problem","line":248,"column":0,"depth":3},"defer":{"type":"header","text":"Defer","value":"defer","line":268,"column":0,"depth":3},"async":{"type":"header","text":"Async","value":"async","line":289,"column":0,"depth":3},"folder-structure":{"type":"header","text":"Folder structure","value":"folder-structure","line":303,"column":0,"depth":2},"fundamentals":{"type":"header","text":"Fundamentals","value":"fundamentals","line":311,"column":0,"depth":2},"array-methods":{"type":"header","text":"Array Methods","value":"array-methods","line":316,"column":0,"depth":2},"reduce":{"type":"header","text":"reduce","value":"reduce","line":318,"column":0,"depth":3},"edge-cases":{"type":"header","text":"Edge cases","value":"edge-cases","line":342,"column":0,"depth":4},"polyfill-for-map":{"type":"header","text":"polyfill for map","value":"polyfill-for-map","line":377,"column":0,"depth":3},"promise":{"type":"header","text":"Promise","value":"promise","line":381,"column":0,"depth":2},"promiseprototypethen":{"type":"header","text":"Promise.prototype.then","value":"promiseprototypethen","line":409,"column":0,"depth":3},"promiseall":{"type":"header","text":"Promise.all","value":"promiseall","line":418,"column":0,"depth":3},"callback-hell":{"type":"header","text":"Callback hell","value":"callback-hell","line":423,"column":0,"depth":2},"ariety":{"type":"header","text":"Ariety","value":"ariety","line":430,"column":0,"depth":2},"polyfill-for-promiseall":{"type":"header","text":"Polyfill for Promise.all","value":"polyfill-for-promiseall","line":447,"column":0,"depth":2},"prototypical-ineritence":{"type":"header","text":"Prototypical Ineritence","value":"prototypical-ineritence","line":450,"column":0,"depth":2}},"children":["sh9g495g98ov0b63kzffz4w","xmhzv4k1dezmevk9worxp92","3mh79j7ah9i5duqditiopi8","wk8nw908ich40fry2kk71a0","y1ng2qxm7ukl5sce22whs3d","51zb91dvu0ckmvmlplqxqil","oj1cwazkncn3i7wbs36pcqx","f49q2e7ln41rpeqz70st4ow","3vzqyyohwbs653l4ua3rmyz"],"parent":"trkx8xrg7g2fm023ez4ldqj","data":{}},"body":"<h1 id=\"javascript\">JavaScript<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#javascript\"></a></h1>\n<h2 id=\"github-questions\">Github questions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#github-questions\"></a></h2>\n<ul>\n<li><a href=\"https://github.com/sudheerj/javascript-interview-questions\">https://github.com/sudheerj/javascript-interview-questions</a></li>\n</ul>\n<h1 id=\"js\">JS<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#js\"></a></h1>\n<p>JS is a synchronous, single threaded language.\nSingle treaded means runs one command at a time and in a specific order.\nJS is loosely typed language. This means any variable is not strictly bind to a data type.</p>\n<h2 id=\"execution-context\">Execution context<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#execution-context\"></a></h2>\n<p>Execution context is simply the environment within which your code is ran.\nIt has 2 components</p>\n<ul>\n<li>Memory Component(Variable environment): variable and funcs are stored in key: value pairs.</li>\n<li>Code Component(Thread of execution): place where code is executed one line at a time.</li>\n</ul>\n<h3 id=\"two-stages-of-execution-context\">Two stages of Execution context<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#two-stages-of-execution-context\"></a></h3>\n<ul>\n<li><strong>creation</strong>(memory creation) and</li>\n<li><strong>executing</strong>(code execution) phase.</li>\n</ul>\n<h3 id=\"two-types-of-execution-context\">Two types of execution context<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#two-types-of-execution-context\"></a></h3>\n<ul>\n<li>Global and Function</li>\n</ul>\n<p>As the JavaScript engine starts to read your code, it creates something called the Global Execution Context.</p>\n<h2 id=\"lexical-environment\">Lexical environment<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lexical-environment\"></a></h2>\n<ul>\n<li>A lexical environment is basically the scope or environment the engine is currently\nreading code in.</li>\n<li>A new lexical environment is created when curly brackets {} are used,\neven nested brackets [object Object] create a new lexical environment.</li>\n<li>The execution context tells the engine which lexical environment it is currently working in and the lexical scope determines the available variables.</li>\n<li>lexical env of a func: local memory of function + refrence to lexical parents's lexical env(closure) + lexical env of parent's parent until global scope.</li>\n</ul>\n<h2 id=\"scope-chain\">Scope chain<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#scope-chain\"></a></h2>\n<p>Each environment context that is created has a link outside of its lexical environment\ncalled the scope chain. The scope chain gives us access to variables in the parent\nenvironment.</p>\n<h2 id=\"for-in-vs-for-of\">FOR in vs FOR of<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#for-in-vs-for-of\"></a></h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"0\", \"1\", \"2\",</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"4\", \"5\", \"6\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"block\">Block<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#block\"></a></h2>\n<ul>\n<li>defined by <code>{}</code>. It groups together multiple js statements and use it where js syntax is expecting single statement</li>\n<li>let/const are <code>block scoped</code>.</li>\n<li>a new <code>{}</code> does not create a new scope for <code>var</code>, var is a <code>function</code> scope</li>\n</ul>\n<h2 id=\"let-and-const\">let and const<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#let-and-const\"></a></h2>\n<ul>\n<li>are hoiseted, but are in <code>temporal dead zone</code>(the time between a let/const is hoisted and initialized with a value) for the time being.</li>\n<li>accessing a variable in temporal dead zone throws reference error</li>\n<li>cannot redeclare let and const within the same scope unlike <code>var</code>. let will throw syntax error and const will throw Type error, since const is of <code>constant</code> type.</li>\n<li><code>const</code> needs to be declare and initialization at the same time, unlike <code>let</code> which can be initialized later in the code.</li>\n<li>unlinke <code>var</code> let/const are block scoped. Each <code>{}</code> creates a new scope for let/const</li>\n</ul>\n<h2 id=\"closure\">closure<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#closure\"></a></h2>\n<p>function along with its lexical scope bundled together forms a closure.\nUses: currying</p>\n<h2 id=\"hoisting\">Hoisting<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hoisting\"></a></h2>\n<ul>\n<li>Hoisting is the process of puting all variable and function declarations into memory\nduring the compile phase.</li>\n<li>var are hoisted(allocated memory) and initialized with a value of <code>undefined</code></li>\n<li>function declarations are fully hoisted eg: function a() {}</li>\n<li>function expression are hoisted as undefined. (eg: var a = function () {})</li>\n<li>let and const are hoisted but are not initialized with any initial value. Using them before initialization throws reference error</li>\n</ul>\n<h3 id=\"takeaways\">Takeaways<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#takeaways\"></a></h3>\n<p>Avoid hoisting when possible. It can cause memory leaks and hard to catch\nbugs in your code. Use let and const as your go to variables.</p>\n<h2 id=\"difference-between-arrow-function-and-normal-function\">Difference between arrow function and normal function<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#difference-between-arrow-function-and-normal-function\"></a></h2>\n<ul>\n<li>arrow funcs are not just a syntactic sugar to normal functions</li>\n<li>They are a compact alternative to a regular function, but also without its own bindings to <code>this</code>, <code>arguments</code>, <code>super</code>, or <code>new.target</code> keywords.</li>\n<li>Arrow func cannot be used as constructors and are not the best option for methods.</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// does not create a new scope</span>\n  <span class=\"token literal-property property\">i</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">b</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">i</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">c</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">i</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints undefined, Window {...} (or the global object)</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 10, Object {...}```</span>\n</code></pre>\n<h2 id=\"call-bind-apply\">Call, bind, apply<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#call-bind-apply\"></a></h2>\n<h3 id=\"call\">Call<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#call\"></a></h3>\n<ul>\n<li>invoke a function with passed references and arguments.</li>\n<li>used function borrowing</li>\n<li>1st param of call is a reference, i.e what should call bind this to? rest are the arguments to the function</li>\n</ul>\n<h3 id=\"bind\">bind<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#bind\"></a></h3>\n<p>returns you a copy of method which can be called later.</p>\n<ul>\n<li>function borrowing</li>\n<li>When a function is used as a callback, <code>this</code> is lost. The bind() method solves this problem.\neg: <a href=\"https://www.w3schools.com/js/js_function_bind.asp\">https://www.w3schools.com/js/js_function_bind.asp</a></li>\n</ul>\n<p>polyfill for bind:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> uname2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">fname</span><span class=\"token operator\">:</span> <span class=\"token string\">'Jo'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">lname</span><span class=\"token operator\">:</span> <span class=\"token string\">'Joshi'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">city<span class=\"token punctuation\">,</span> state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">fname</span> <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">lname</span> <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> city <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">myBind2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fun <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> param <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fun<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">apply</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>param<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>arg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> fullName<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">myBind2</span><span class=\"token punctuation\">(</span>uname2<span class=\"token punctuation\">,</span> <span class=\"token string\">'hld'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UK'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"currying\">Currying<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#currying\"></a></h2>\n<ul>\n<li>by bind method</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">multiply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> multiplyBy2 <span class=\"token operator\">=</span> multiply<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>by closures</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> multiplyBy2 <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"imp-interview-ques\">imp interview ques<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#imp-interview-ques\"></a></h3>\n<p><a href=\"https://javascriptinterviewquestions.com/2020/04/add123-in-javascript-currying-interview.html\">https://javascriptinterviewquestions.com/2020/04/add123-in-javascript-currying-interview.html</a></p>\n<h2 id=\"debounce\">Debounce<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#debounce\"></a></h2>\n<ul>\n<li>limiting the rate of execution of a particular function</li>\n</ul>\n<h2 id=\"this\">this<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#this\"></a></h2>\n<p>Free function invocations in javascript have <code>this</code> bound to the global scope.</p>\n<h2 id=\"event-propagation\">Event Propagation<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#event-propagation\"></a></h2>\n<ul>\n<li><a href=\"https://javascript.info/bubbling-and-capturing\">Bubbling and capturing</a></li>\n</ul>\n<p>happens in 3 phases</p>\n<ul>\n<li>Capturing phase: event goes down from root element to the target element</li>\n<li>target phase: event reaches the target elem</li>\n<li>bubbling phase: the event bubbles up from the element.</li>\n</ul>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">body *</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token unit\">px</span> solid <span class=\"token color\">blue</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>form</span><span class=\"token punctuation\">></span></span>\n  FORM\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span><span class=\"token punctuation\">></span></span>\n    DIV\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span><span class=\"token punctuation\">></span></span>P<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>form</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    elem<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Capturing: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elem<span class=\"token punctuation\">.</span><span class=\"token property-access\">tagName</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    elem<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bubbling: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elem<span class=\"token punctuation\">.</span><span class=\"token property-access\">tagName</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>In bubbling, When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up on other ancestors.</p>\n<ul>\n<li>To stop bubbling: event.stopPropagation()</li>\n</ul>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>body</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">the bubbling doesn't reach here</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\">event<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Click me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>body</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>NOTE: Almost all events bubble.\nThe key word in this phrase is “almost”.</p>\n<p>For instance, a focus event does not bubble. There are other examples too, we’ll meet them. But still it’s an exception, rather than a rule, most events do bubble</p>\n<h2 id=\"scripts-async-defer\">Scripts: async, defer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#scripts-async-defer\"></a></h2>\n<h3 id=\"problem\">Problem<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#problem\"></a></h3>\n<p>When the browser loads HTML and comes across a \"script\" tag, it can’t continue building the DOM. It must execute the script right now. The same happens for external scripts \"script src='...': the browser must wait for the script to download, execute the downloaded script, and only then can it process the rest of the page.</p>\n<p>That leads to two important issues:</p>\n<ul>\n<li>Scripts can’t see DOM elements below them, so they can’t add handlers etc.</li>\n<li>If there’s a bulky script at the top of the page, it “blocks the page”. Users can’t see the page content till it downloads and runs:</li>\n</ul>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span><span class=\"token punctuation\">></span></span>...content before script...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>p</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://javascript.info/article/script-async-defer/long.js?speed=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&#x3C;!-- This isn't visible until the script loads --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span><span class=\"token punctuation\">></span></span>...content after script...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>p</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><img src=\"/Frontend-JsDev-Handbook/assets/images/2023-04-11-11-43-22.png\"></p>\n<h3 id=\"defer\">Defer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#defer\"></a></h3>\n<ul>\n<li>\n<p>The defer attribute tells the browser not to wait for the script. Instead, the browser will continue to process the HTML, build DOM. The script loads “in the background”, which makes it non-blocking and then runs when the DOM is fully built.</p>\n</li>\n<li>\n<p>Scripts with defer always execute when the DOM is ready (but before DOMContentLoaded event). .DOMContentLoaded event handler waits for the deferred script. It only triggers when the script is downloaded and executed.</p>\n</li>\n<li>\n<p>Deferred scripts keep their relative order, just like regular scripts.</p>\n</li>\n<li>\n<p>The defer attribute is only for external scripts.\nThe defer attribute is ignored if the script tag has no src.</p>\n</li>\n</ul>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span><span class=\"token punctuation\">></span></span>...content before script...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>p</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span>\n  <span class=\"token attr-name\">defer</span>\n  <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://javascript.info/article/script-async-defer/long.js?speed=1<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&#x3C;!-- visible immediately --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>p</span><span class=\"token punctuation\">></span></span>...content after script...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>p</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"async\">Async<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#async\"></a></h3>\n<ul>\n<li>The async attribute is only for external scripts\nJust like defer, the async attribute is ignored if the\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token spread operator\">...</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\ntag has no src.</li>\n<li>The browser doesn’t block on async scripts (just like defer).</li>\n<li>Other scripts don’t wait for async scripts, and async scripts don’t wait for them, hence does not maintain order of scripts like defer</li>\n<li>DOMContentLoaded and async scripts don’t wait for each other:</li>\n</ul>\n<h2 id=\"folder-structure\">Folder structure<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#folder-structure\"></a></h2>\n<ul>\n<li>package.json: app metadata and configuration</li>\n<li>manifest.json: app metadata that makes application progressive web app.\n<ul>\n<li>provides metadata used when your web app is installed on a\nuser's mobile device or desktop. See <a href=\"https://developers.google.com/web/fundamentals/web-app-manifest/\">https://developers.google.com/web/fundamentals/web-app-manifest/</a></li>\n</ul>\n</li>\n<li><code>defer</code> in <script></script>\n</li></ul>\n<h2 id=\"fundamentals\">Fundamentals<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#fundamentals\"></a></h2>\n<ul>\n<li>browser</li>\n<li>v8 engine</li>\n</ul>\n<h2 id=\"array-methods\">Array Methods<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#array-methods\"></a></h2>\n<h3 id=\"reduce\">reduce<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#reduce\"></a></h3>\n<p><a href=\"/Frontend-JsDev-Handbook/notes/06dxxwewwp67sqivoq59mhs#arrayreduce\">Reduce pollyfill</a></p>\n<ul>\n<li>This method has the following syntax — reduce(callbackFn, initialValue) where initialValue is an optional initial value used. If this parameter is skipped, it's assumed to be the first value of the array.</li>\n<li>if we are not returning anything from the callback functions here, the function returns undefined implicitly.</li>\n<li>if the initial value is not supplied it defaults to the first item of the array</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1, 2</span>\n<span class=\"token comment\">// undefined, 3</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 0,1</span>\n<span class=\"token comment\">// undefined, 2</span>\n<span class=\"token comment\">// undefined, 3</span>\n</code></pre>\n<h4 id=\"edge-cases\">Edge cases<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#edge-cases\"></a></h4>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getMax</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// callback is invoked for each element in the array starting at index 0</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span>getMax<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span>getMax<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 50</span>\n\n<span class=\"token comment\">// callback is invoked once for element at index 1</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span>getMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n\n<span class=\"token comment\">// callback is not invoked</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span>getMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 50</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span>getMax<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span>getMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError</span>\n</code></pre>\n<pre class=\"language-js\"><code class=\"language-JS\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"john\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Martha\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Stewart\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Scar\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Jo\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">82</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> curr</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">age</span><span class=\"token operator\">&#x3C;</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> acc<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">firstname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">return</span> acc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"polyfill-for-map\">polyfill for map<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#polyfill-for-map\"></a></h3>\n<p><a href=\"/Frontend-JsDev-Handbook/notes/06dxxwewwp67sqivoq59mhs#arraymap\">Map pollyfill</a></p>\n<h2 id=\"promise\">Promise<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#promise\"></a></h2>\n<ul>\n<li>a JS Object which may produce a value in future either a resolved value or a reason it is not reselved</li>\n<li>can be in one of the three states\n<ul>\n<li>pending</li>\n<li>fullfilled or</li>\n<li>rejected</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'even'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'odd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"promiseprototypethen\">Promise.prototype.then<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#promiseprototypethen\"></a></h3>\n<p>For Promise.prototype.then():</p>\n<ul>\n<li>if function is passed as callback, the return value of the function is used as the fulfillment value</li>\n<li>for non-function values, previous fulfillment value is used.</li>\n</ul>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">Promises Exercise</span></div>\n<a href=\"/Frontend-JsDev-Handbook/notes/oj1cwazkncn3i7wbs36pcqx\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">→</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><ul>\n<li>\n<p>Promise methods are static methods: Promise.all, Promise.race, Promise.any</p>\n</li>\n<li>\n<p>Promis.race is useful when you want the first async task to complete, but do not care about its eventual state (i.e., it can either succeed or fail).</p>\n</li>\n<li>\n<p>Promise.all returns a single promise with either fulfilled values of all Promises or the rejected promise. It fails fast</p>\n</li>\n<li>\n<p>1</p>\n</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// fulfilled : 1</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// function is passed, return value is 2 => fulfilled : 2</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// non-function is passed, previous fulfillment value 2 is used => fulfilled : 2</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> value <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// function is passed, value is 2, return value is 6 => fulfilled: 6</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Promise object is not function, previous fulfillment value 6 is used => fulfilled : 6</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">log</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6 gets logged</span>\n</code></pre>\n<p>Result: 6</p>\n<ul>\n<li>2</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> val <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reject</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// finally doesn't receive param from .then chain. always gets undefined as param</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Result\n1\n2\nundefined\n3\nundefined\n4\nundefined\nundefined</p>\n<ul>\n<li>3</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npromise\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>result:\n1 2 3 4 7 5 6 9 8</p></div></div><p></p><p></p>\n<h3 id=\"promiseall\">Promise.all<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#promiseall\"></a></h3>\n<ul>\n<li>The Promise.all() method takes an iterable of promises as an input, and returns a single Promise that resolves to an array of the results of the input promises.</li>\n<li>fail-fast behavior</li>\n</ul>\n<h2 id=\"callback-hell\">Callback hell<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#callback-hell\"></a></h2>\n<ul>\n<li>Callback hell is a antipattern when there are nested callbacks leading to unlegibale code.\nCan be fixed by:</li>\n<li>async awaits</li>\n<li>writing promises</li>\n</ul>\n<h2 id=\"ariety\">Ariety<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#ariety\"></a></h2>\n<p>sum(1)(2)....(5) = //</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token spread operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"polyfill-for-promiseall\">Polyfill for Promise.all<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#polyfill-for-promiseall\"></a></h2>\n<p><a href=\"/Frontend-JsDev-Handbook/notes/06dxxwewwp67sqivoq59mhs#promiseall\">Promise.all pollyfill</a></p>\n<h2 id=\"prototypical-ineritence\">Prototypical Ineritence<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#prototypical-ineritence\"></a></h2>\n<ul>\n<li></li>\n</ul>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/Frontend-JsDev-Handbook/notes/sh9g495g98ov0b63kzffz4w\">Arrow Func Exercise</a></li>\n<li><a href=\"/Frontend-JsDev-Handbook/notes/xmhzv4k1dezmevk9worxp92\">Currying Partials</a></li>\n<li><a href=\"/Frontend-JsDev-Handbook/notes/3mh79j7ah9i5duqditiopi8\">Handson</a></li>\n<li><a href=\"/Frontend-JsDev-Handbook/notes/wk8nw908ich40fry2kk71a0\">Parse Int</a></li>\n<li><a href=\"/Frontend-JsDev-Handbook/notes/y1ng2qxm7ukl5sce22whs3d\">Performance</a></li>\n<li><a href=\"/Frontend-JsDev-Handbook/notes/51zb91dvu0ckmvmlplqxqil\">Pipe and Compose</a></li>\n<li><a href=\"/Frontend-JsDev-Handbook/notes/oj1cwazkncn3i7wbs36pcqx\">Promises Exercise</a></li>\n<li><a href=\"/Frontend-JsDev-Handbook/notes/f49q2e7ln41rpeqz70st4ow\">Security</a></li>\n<li><a href=\"/Frontend-JsDev-Handbook/notes/3vzqyyohwbs653l4ua3rmyz\">Type Coercion</a></li>\n</ol>","noteIndex":{"id":"dlb5bmx7v8f6otsgongz4vx","title":"Hi","desc":"","updated":1663067414354,"created":1648190029829,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"5e58da66991a53ed4cf17d0cade77fe6","links":[{"type":"wiki","from":{"fname":"root","id":"dlb5bmx7v8f6otsgongz4vx","vaultName":"Harshita-notes"},"value":"user.tharshita13","alias":"@tharshita13","position":{"start":{"line":15,"column":12,"offset":433},"end":{"line":15,"column":24,"offset":445},"indent":[]},"xvault":false,"to":{"fname":"user.tharshita13"}}],"anchors":{"contacts":{"type":"header","text":"Contacts","value":"contacts","line":13,"column":0,"depth":2}},"children":["trkx8xrg7g2fm023ez4ldqj","c8csxid3zoghxorepwcrami","urj8q1uq98o3upmgbt2qxns","ykyv5ng8vb44dx8wlchugby","qfxhhwhykm8ml24xxlu67v3","fmv0zz06pgij3bozzx9zes9"],"parent":null,"data":{},"body":"\nHi,\nWelcome to Harshita's Digital Garden 🌱\nI'm Harshita Joshi. I'm a software engineer.\nWhen not at the computer, I play ukulele, do yoga, study [German](https://harshita-mindfire.github.io/german-for-beginners/) and wonder about having numerous pets.\n\n## Contacts\n\nYou can find and contact me in the following places\n\n- Email: tharshita13@gmail.com\n\n- Github: [Harshita-mindfire](https://github.com/Harshita-mindfire)\n\n- Medium: [@tharshita13](https://medium.com/@tharshita13)\n\n- LinkedIn: [Harshita Joshi](https://www.linkedin.com/in/harshita-joshi-030b29118/)\n\n- Instagram: [imharshita07](https://www.instagram.com/imharshita07/)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true,"enableEngineV3":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Digital Garden","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://Harshita-mindfire.github.io","assetsPrefix":"/Frontend-JsDev-Handbook","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}