{"pageProps":{"note":{"id":"3vzqyyohwbs653l4ua3rmyz","title":"Type Coercion","desc":"","updated":1679656251652,"created":1679656251652,"custom":{},"fname":"learning.javascript.type-coercion","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"dd58fe803156295349b0a3a40d84c699","links":[],"anchors":{"type-coersion-for-primitive-type":{"type":"header","text":"Type coersion for primitive type","value":"type-coersion-for-primitive-type","line":8,"column":0,"depth":1},"to-number":{"type":"header","text":"To number","value":"to-number","line":10,"column":0,"depth":2},"triggered-via":{"type":"header","text":"Triggered via","value":"triggered-via","line":29,"column":0,"depth":3},"to-string":{"type":"header","text":"To string","value":"to-string","line":55,"column":0,"depth":2},"to-boolean":{"type":"header","text":"To Boolean","value":"to-boolean","line":63,"column":0,"depth":2},"triggered-via-1":{"type":"header","text":"Triggered via","value":"triggered-via-1","line":86,"column":0,"depth":3},"type-coercion-for-objects":{"type":"header","text":"Type coercion for objects","value":"type-coercion-for-objects","line":90,"column":0,"depth":1},"example":{"type":"header","text":"Example","value":"example","line":109,"column":0,"depth":2}},"children":[],"parent":"8k7fj3knfjs2vz42yxldbzk","data":{}},"body":"<h1 id=\"type-coercion\">Type Coercion<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#type-coercion\"></a></h1>\n<h1 id=\"type-coersion-for-primitive-type\">Type coersion for primitive type<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#type-coersion-for-primitive-type\"></a></h1>\n<h2 id=\"to-number\">To number<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#to-number\"></a></h2>\n<p>Here is how primitive values are converted to numbers:</p>\n<pre><code>Number(null)                   // 0\nNumber(undefined)              // NaN\nNumber(true)                   // 1\nNumber(false)                  // 0\nNumber(\" 12 \")                 // 12\nNumber(\"-12.34\")               // -12.34\nNumber(\"\\n\")                   // 0\nNumber(\" 12s \")                // NaN\nNumber(123)                    // 123\nNumber({})                      //NaN\n</code></pre>\n<ul>\n<li>null and undefined are handled differently: null becomes 0, whereas undefined becomes NaN.</li>\n</ul>\n<h3 id=\"triggered-via\">Triggered via<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#triggered-via\"></a></h3>\n<ul>\n<li>comparison operators (>, &#x3C;, &#x3C;=,>=)</li>\n<li>bitwise operators ( | &#x26; ^ ~)</li>\n<li>arithmetic operators (- + * / % ). Note, that binary + does not trigger numeric conversion, when any operand is a string.</li>\n<li>unary + operator</li>\n<li>loose equality operator == (incl. !=).</li>\n<li>Note that == does not trigger numeric conversion when both operands are strings.</li>\n</ul>\n<p>There are two special rules to remember:</p>\n<ol>\n<li>When applying == to null or undefined, numeric conversion does not happen. null equals only to null or undefined, and does not equal to anything else.</li>\n</ol>\n<pre><code>null == 0               // false, null is not converted to 0\nnull == null            // true\nundefined == undefined  // true\nnull == undefined       // true\n</code></pre>\n<ol start=\"3\">\n<li>NaN does not equal to anything even itself:</li>\n</ol>\n<pre><code>if (value !== value) { console.log(\"we're dealing with NaN here\") }\n</code></pre>\n<h2 id=\"to-string\">To string<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#to-string\"></a></h2>\n<p>Implicit coercion is triggered by the binary + operator, when any operand is a string:</p>\n<pre><code>String({})   // '[object Object]'\n</code></pre>\n<h2 id=\"to-boolean\">To Boolean<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#to-boolean\"></a></h2>\n<pre><code>Boolean('')           // false\nBoolean(0)            // false\nBoolean(-0)           // false\nBoolean(NaN)          // false\nBoolean(null)         // false\nBoolean(undefined)    // false\nBoolean(false)        // false\n</code></pre>\n<ul>\n<li>Any value that is not in the list is converted to true, including object, function, Array, Date, user-defined type, and so on.\neg :</li>\n</ul>\n<pre><code>Boolean({})             // true\nBoolean([])             // true\nBoolean(Symbol())       // true\n!!Symbol()              // true\nBoolean(function() {})  // true\n</code></pre>\n<h3 id=\"triggered-via-1\">Triggered via<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#triggered-via-1\"></a></h3>\n<p>Implicit conversion happens in logical context, or is triggered by logical operators ( || &#x26;&#x26; !) .</p>\n<h1 id=\"type-coercion-for-objects\">Type coercion for objects<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#type-coercion-for-objects\"></a></h1>\n<ul>\n<li>When it comes to objects and engine encounters expression like [1] + [2,3], first it needs to convert an object to a primitive value, which is then converted to the final type. And still there are only three types of conversion: numeric, string and boolean.</li>\n</ul>\n<p>Both numeric and string conversion make use of two methods of the input object: valueOf and toString . Both methods are declared on Object.prototype and thus available for any derived types, such as Date, Array, etc</p>\n<p>Numeric conversion first calls valueOf with a fallback to toString.\nString conversion does the opposite: toString followed by valueOf</p>\n<p>In general the algorithm is as follows:</p>\n<ol>\n<li>\n<p>If input is already a primitive, do nothing and return it.</p>\n</li>\n<li>\n<p>Call input.toString(), if the result is primitive, return it.</p>\n</li>\n<li>\n<p>Call input.valueOf(), if the result is primitive, return it.</p>\n</li>\n<li>\n<p>If neither input.toString() nor input.valueOf() yields primitive, throw TypeError.</p>\n</li>\n</ol>\n<h2 id=\"example\">Example<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#example\"></a></h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token operator\">+</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span> <span class=\"token operator\">+</span> <span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token operator\">+</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span> <span class=\"token operator\">+</span> <span class=\"token operator\">+</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token operator\">+</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span> <span class=\"token operator\">+</span> <span class=\"token operator\">+</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token operator\">+</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span> <span class=\"token operator\">+</span> <span class=\"token operator\">+</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span> <span class=\"token operator\">+</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Ans:\n3\n3\n3\n'12'\n3\n'12'\n'12'\n2\n2\n'1true'\n'11'\n1\n1\n'1null'\n'10'\nNaN\nNaN\n'1undefined'\n'1NaN'\n'1NaN'</p>","noteIndex":{"id":"dlb5bmx7v8f6otsgongz4vx","title":"Hi","desc":"","updated":1663067414354,"created":1648190029829,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"5e58da66991a53ed4cf17d0cade77fe6","links":[{"type":"wiki","from":{"fname":"root","id":"dlb5bmx7v8f6otsgongz4vx","vaultName":"Harshita-notes"},"value":"user.tharshita13","alias":"@tharshita13","position":{"start":{"line":15,"column":12,"offset":433},"end":{"line":15,"column":24,"offset":445},"indent":[]},"xvault":false,"to":{"fname":"user.tharshita13"}}],"anchors":{"contacts":{"type":"header","text":"Contacts","value":"contacts","line":13,"column":0,"depth":2}},"children":["trkx8xrg7g2fm023ez4ldqj","c8csxid3zoghxorepwcrami","urj8q1uq98o3upmgbt2qxns","ykyv5ng8vb44dx8wlchugby","qfxhhwhykm8ml24xxlu67v3","fmv0zz06pgij3bozzx9zes9"],"parent":null,"data":{},"body":"\nHi,\nWelcome to Harshita's Digital Garden 🌱\nI'm Harshita Joshi. I'm a software engineer.\nWhen not at the computer, I play ukulele, do yoga, study [German](https://harshita-mindfire.github.io/german-for-beginners/) and wonder about having numerous pets.\n\n## Contacts\n\nYou can find and contact me in the following places\n\n- Email: tharshita13@gmail.com\n\n- Github: [Harshita-mindfire](https://github.com/Harshita-mindfire)\n\n- Medium: [@tharshita13](https://medium.com/@tharshita13)\n\n- LinkedIn: [Harshita Joshi](https://www.linkedin.com/in/harshita-joshi-030b29118/)\n\n- Instagram: [imharshita07](https://www.instagram.com/imharshita07/)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true,"enableEngineV3":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Digital Garden","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://Harshita-mindfire.github.io","assetsPrefix":"/Frontend-JsDev-Handbook","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}