{"pageProps":{"note":{"id":"fq3hkpwfr9vkg8prtpofbrp","title":"Server Rendering Strategies","desc":"","updated":1755609370708,"created":1755609370708,"custom":{},"fname":"learning.nextjs.rendering.react-server-components.server-rendering-strategies","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"6bb37d8773a23a3ce4eded35bf57e6cb","links":[],"anchors":{"static-rendering":{"type":"header","text":"Static rendering","value":"static-rendering","line":11,"column":0,"depth":1},"how-to-statically-render":{"type":"header","text":"How to statically render","value":"how-to-statically-render","line":23,"column":0,"depth":2},"summary":{"type":"header","text":"Summary","value":"summary","line":26,"column":0,"depth":2},"dynamic-rendering":{"type":"header","text":"Dynamic rendering","value":"dynamic-rendering","line":36,"column":0,"depth":1},"generatestaticparams":{"type":"header","text":"generateStaticParams","value":"generatestaticparams","line":53,"column":0,"depth":2},"dynamicparams":{"type":"header","text":"dynamicParams","value":"dynamicparams","line":109,"column":0,"depth":2},"without-dynamicparams-defined-default-true-or-with-dynamicparams--true":{"type":"header","text":"Without dynamicParams defined (default: true) or With dynamicParams = true","value":"without-dynamicparams-defined-default-true-or-with-dynamicparams--true","line":111,"column":0,"depth":3},"with-dynamicparams--false":{"type":"header","text":"With dynamicParams = false","value":"with-dynamicparams--false","line":133,"column":0,"depth":3},"streaming":{"type":"header","text":"Streaming","value":"streaming","line":161,"column":0,"depth":1}},"children":[],"parent":"ubgj4b3onoq9pj080dri1nj","data":{}},"body":"<h1 id=\"server-rendering-strategies\">Server Rendering Strategies<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#server-rendering-strategies\"></a></h1>\n<ul>\n<li>Static rendering</li>\n<li>dynamic rendering</li>\n<li>streaming</li>\n</ul>\n<h1 id=\"static-rendering\">Static rendering<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#static-rendering\"></a></h1>\n<p>Static rendering is a server rendering strategy where we generate HTML pages when building our application</p>\n<p>Think of it as preparing all your content in advance - before any user visits your site</p>\n<p>Once built, these pages can be cached by CDNs and served instantly to users</p>\n<p>With this approach, the same pre-rendered page can be shared among different users, giving your app a significant performance boost</p>\n<p><strong>Usage</strong>: blog post, e-commerce product listings, documentation(like the one you are currently reading, it is statically rendered.) </p>\n<h2 id=\"how-to-statically-render\">How to statically render<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#how-to-statically-render\"></a></h2>\n<ul>\n<li>default strategy in app router. all routes are automatically prepared at build time without any additional help.</li>\n</ul>\n<h2 id=\"summary\">Summary<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#summary\"></a></h2>\n<p>Static rendering is a server rendering strategy where we generate HTML pages when building our application</p>\n<p>Think of it as preparing all your content in advance - before any user visits your site</p>\n<p>Once built, these pages can be cached by CDNs and served instantly to users</p>\n<p>With this approach, the same pre-rendered page can be shared among different users, giving your app a significant performance boost</p>\n<h1 id=\"dynamic-rendering\">Dynamic rendering<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#dynamic-rendering\"></a></h1>\n<ul>\n<li>Dynamic rendering is a strategy where the HTML is generated at request time</li>\n<li>Next.js automatically enables it when it encounters dynamic functions like <strong>cookies, headers, connection, draftMode, after or searchParams</strong> prop</li>\n<li>Dynamic rendering is great for personalized content like social media feeds</li>\n<li>You don't have to stress about choosing between static and dynamic rendering</li>\n<li>Next.js automatically selects the optimal rendering strategy for each route based on the features and APIs you're using</li>\n<li>if you want to force a route to be dynamically rendered, you can use the </li>\n</ul>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> dynamic <span class=\"token operator\">=</span> 'force<span class=\"token operator\">-</span>dynamic\" config at the top <span class=\"token keyword\">of</span> your page\n</code></pre>\n<h2 id=\"generatestaticparams\">generateStaticParams<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#generatestaticparams\"></a></h2>\n<p>let you to pre-render static routes for dynamic segments. Runs at build time. Hnadles multiple dynamic segments.</p>\n<ul>\n<li>returns an array of objects where the keys are dynamic route parameters. </li>\n<li>givings us a nice performance boost.</li>\n</ul>\n<ul>\n<li>app/products/[id]/page.tsx</li>\n</ul>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ProductPage</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>params<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>params<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> params\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> Product </span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> details\n}\n</span></code></pre>\n<p>building this, the product details page is dynamically rendered, since nextjs doesn't know what id value it would need until someone requests a specific url.</p>\n<p><strong>To generate a few pages statically, we can use <code>generateStaticParams</code> function. It helps with frequently accessed pages, they are pre-rendered and ready to be served instantly.</strong> </p>\n<ul>\n<li>app/products/[id]/page.tsx</li>\n</ul>\n<pre class=\"language-tsx\"><code class=\"language-tsx\">\n<span class=\"token comment\">// we are statically passing these 3 params, now these 3 pages will be statically generated.</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token function\">generateStaticParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">ProductPage</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>params<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>params<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> params\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> Product </span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> details\n}\n</span></code></pre>\n<ul>\n<li>for routes with multiple dynamic route segments:\nSuppose we have a product catalog with categories and products\n</li>\n</ul>\n<p>/products/[category]/[product]/page.tsx</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">generateStaticParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n \n<span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> category<span class=\"token operator\">:</span> <span class=\"token string\">\"electronics\"</span><span class=\"token punctuation\">,</span> product<span class=\"token operator\">:</span> <span class=\"token string\">\"smartphone\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    \n    <span class=\"token punctuation\">{</span> category<span class=\"token operator\">:</span> <span class=\"token string\">\"electronics\"</span><span class=\"token punctuation\">,</span> product<span class=\"token operator\">:</span> <span class=\"token string\">\"laptop\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    \n    <span class=\"token punctuation\">{</span> category<span class=\"token operator\">:</span> <span class=\"token string\">\"books\"</span><span class=\"token punctuation\">,</span> product<span class=\"token operator\">:</span> <span class=\"token string\">\"science-fiction\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    \n    <span class=\"token punctuation\">{</span> category<span class=\"token operator\">:</span> <span class=\"token string\">\"books\"</span><span class=\"token punctuation\">,</span> product<span class=\"token operator\">:</span> <span class=\"token string\">\"biography\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"dynamicparams\">dynamicParams<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#dynamicparams\"></a></h2>\n<h3 id=\"without-dynamicparams-defined-default-true-or-with-dynamicparams--true\">Without dynamicParams defined (default: true) or With dynamicParams = true<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#without-dynamicparams-defined-default-true-or-with-dynamicparams--true\"></a></h3>\n<ul>\n<li>\n<p><strong>Behavior</strong>: If you don’t define dynamicParams, Next.js assumes dynamicParams = true.</p>\n</li>\n<li>\n<p><strong>Effect</strong>:\nIf a user requests a dynamic route (e.g. /blog/123) that wasn’t returned by generateStaticParams, Next.js will try to dynamically generate the page at runtime.</p>\n</li>\n</ul>\n<p>This is useful if you expect routes outside the pre-generated list to still work.</p>\n<p>✅ Example: // app/blog/[id]/page.tsx</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">generateStaticParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prebuilds /blog/1 and /blog/2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// dynamicParams not defined → defaults to true</span>\n\n</code></pre>\n<p>Visiting /blog/3 → Page still works (fetched at runtime).</p>\n<h3 id=\"with-dynamicparams--false\">With dynamicParams = false<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#with-dynamicparams--false\"></a></h3>\n<ul>\n<li>\n<p><strong>Behavior</strong>: You are telling Next.js that only the params returned from generateStaticParams are valid.</p>\n</li>\n<li>\n<p><strong>Effect</strong>: If a user requests a route not in generateStaticParams, they’ll get a 404 instead of dynamic generation.\nThis is useful when your routes are fixed/finite (e.g. product categories, locales).</p>\n</li>\n</ul>\n<p>✅ Example:</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// app/blog/[id]/page.tsx</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> dynamicParams <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🚫 no runtime params</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">generateStaticParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>Visiting /blog/1 or /blog/2 → Works (prebuilt).</li>\n<li>Visiting /blog/3 → 404 (no fallback)</li>\n</ul>\n<p><strong>🔑 Summary</strong></p>\n<ul>\n<li>\n<p><strong>generateStaticParams + dynamicParams=false</strong> → ✅ only prebuilt routes, ❌ strict 404 for missing ones.</p>\n</li>\n<li>\n<p><strong>generateStaticParams + dynamicParams=true</strong> → ✅ prebuilt routes, but missing ones will render dynamically or statically depending on presence of dynamic functions in the page.</p>\n</li>\n<li>\n<p><strong>No generateStaticParams at all</strong> → (by default is true)</p>\n</li>\n</ul>\n<h1 id=\"streaming\">Streaming<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#streaming\"></a></h1>\n<ul>\n<li>Streaming is a strategy that allows for progressive UI rendering from the server</li>\n<li>Work is broken down into smaller chunks and streamed to the client as soon as they're ready</li>\n<li>This means users can see parts of the page right away, without waiting for everything to load</li>\n<li>It's particularly powerful for improving initial page load times and handling Ul elements that depend on slower data fetches, which would normally hold up the entire route</li>\n<li>built in with App router</li>\n<li>use <suspense> from react to achieve this</suspense></li>\n</ul>","noteIndex":{"id":"dlb5bmx7v8f6otsgongz4vx","title":"Hi","desc":"","updated":1663067414354,"created":1648190029829,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"5e58da66991a53ed4cf17d0cade77fe6","links":[{"type":"wiki","from":{"fname":"root","id":"dlb5bmx7v8f6otsgongz4vx","vaultName":"Harshita-notes"},"value":"user.tharshita13","alias":"@tharshita13","position":{"start":{"line":15,"column":12,"offset":433},"end":{"line":15,"column":24,"offset":445},"indent":[]},"xvault":false,"to":{"fname":"user.tharshita13"}}],"anchors":{"contacts":{"type":"header","text":"Contacts","value":"contacts","line":13,"column":0,"depth":2}},"children":["trkx8xrg7g2fm023ez4ldqj","c8csxid3zoghxorepwcrami","urj8q1uq98o3upmgbt2qxns","ykyv5ng8vb44dx8wlchugby","qfxhhwhykm8ml24xxlu67v3","fmv0zz06pgij3bozzx9zes9"],"parent":null,"data":{},"body":"\nHi,\nWelcome to Harshita's Digital Garden 🌱\nI'm Harshita Joshi. I'm a software engineer.\nWhen not at the computer, I play ukulele, do yoga, study [German](https://harshita-mindfire.github.io/german-for-beginners/) and wonder about having numerous pets.\n\n## Contacts\n\nYou can find and contact me in the following places\n\n- Email: tharshita13@gmail.com\n\n- Github: [Harshita-mindfire](https://github.com/Harshita-mindfire)\n\n- Medium: [@tharshita13](https://medium.com/@tharshita13)\n\n- LinkedIn: [Harshita Joshi](https://www.linkedin.com/in/harshita-joshi-030b29118/)\n\n- Instagram: [imharshita07](https://www.instagram.com/imharshita07/)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true,"enableEngineV3":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Digital Garden","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://Harshita-mindfire.github.io","assetsPrefix":"/Frontend-JsDev-Handbook","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}