{"pageProps":{"note":{"id":"0bvpfpbl0mfb06jdccaiqao","title":"Route Handlers","desc":"","updated":1753204420955,"created":1753204420955,"custom":{},"fname":"learning.nextjs.routing.route-handlers","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"3d42635e0805e532b5acdbe69ef84f88","links":[],"anchors":{"conventions":{"type":"header","text":"Conventions","value":"conventions","line":17,"column":0,"depth":2},"dynamic-route-handlers":{"type":"header","text":"Dynamic route handlers","value":"dynamic-route-handlers","line":26,"column":0,"depth":2},"examples":{"type":"header","text":"Examples","value":"examples","line":37,"column":0,"depth":3},"url-query-params":{"type":"header","text":"URL Query Params","value":"url-query-params","line":106,"column":0,"depth":2},"headers":{"type":"header","text":"Headers","value":"headers","line":124,"column":0,"depth":2},"examples-1":{"type":"header","text":"Examples","value":"examples-1","line":132,"column":0,"depth":3},"cookies":{"type":"header","text":"Cookies","value":"cookies","line":149,"column":0,"depth":2},"example-setting-and-retrieving-via-headers-and-request":{"type":"header","text":"Example: Setting and retrieving via headers and request","value":"example-setting-and-retrieving-via-headers-and-request","line":158,"column":0,"depth":3},"example-setting-using-cookies-from-nextheaders":{"type":"header","text":"Example: setting using cookies from next/headers","value":"example-setting-using-cookies-from-nextheaders","line":178,"column":0,"depth":3},"redirect-in-route-handlers":{"type":"header","text":"redirect in route handlers","value":"redirect-in-route-handlers","line":187,"column":0,"depth":2},"caching":{"type":"header","text":"Caching","value":"caching","line":196,"column":0,"depth":2},"middleware":{"type":"header","text":"middleware","value":"middleware","line":202,"column":0,"depth":2}},"children":[],"parent":"vh28j803j8gmx35nymyloxt","data":{}},"body":"<h1 id=\"route-handlers\">Route Handlers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#route-handlers\"></a></h1>\n<ul>\n<li>\n<p>app router also let us create <strong>custom request handlers for your routes</strong>.</p>\n</li>\n<li>\n<p>unlike page routes, which returns HTML content, Route handlers let us build RESTFUL endpoints with complete control over response.</p>\n</li>\n<li>\n<p>Just like Node + express app.</p>\n</li>\n<li>\n<p>good for making external API request</p>\n</li>\n<li>\n<p>runs server side, hence the secret keys are also secured and never reaches browser</p>\n</li>\n<li>\n<p>supports <strong>GET, POST, PUT, PATCH DELETE, HEAD, OPTIONS.</strong></p>\n</li>\n<li>\n<p>returns 405 method not allowed response for unsupported method.</p>\n</li>\n<li>\n<p>we are studing app router here, but if you remember page router, route handlers are equivalent to /api routes.</p>\n</li>\n</ul>\n<h2 id=\"conventions\">Conventions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#conventions\"></a></h2>\n<ul>\n<li>\n<p>create  <code>route.ts</code> file inside app directory.</p>\n</li>\n<li>\n<p><strong>the route.ts file in the same route segment level as page.tsx will result in a conflict and page.tsx will not be served. Instead the route handler handles the request</strong></p>\n</li>\n<li>\n<p>the Handler functions takes 2 parameters</p>\n<ul>\n<li>request object => request: NextRequest </li>\n<li>context object containing route params => {params} : {params: Promise&#x3C;{id: string}>}</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"dynamic-route-handlers\">Dynamic route handlers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#dynamic-route-handlers\"></a></h2>\n<pre class=\"language-graphql\"><code class=\"language-graphql\">\n- <span class=\"token property\">app</span>\n    <span class=\"token operator\">|</span><span class=\"token property\">___comments</span>\n         <span class=\"token operator\">|</span><span class=\"token property\">_____route</span>.<span class=\"token property\">ts</span>\n                 <span class=\"token operator\">|</span><span class=\"token property\">_____</span><span class=\"token punctuation\">[</span><span class=\"token property\">id</span><span class=\"token punctuation\">]</span>\n                        <span class=\"token operator\">|</span><span class=\"token property\">______route</span>.<span class=\"token property\">ts</span>\n</code></pre>\n<h3 id=\"examples\">Examples<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#examples\"></a></h3>\n<ul>\n<li><strong>contents of /app/comments/route.ts:</strong></li>\n</ul>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// route handler</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> comments <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./data\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Get method</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token constant\">GET</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">Response</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span>comments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// post method</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token constant\">POST</span><span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> request<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// similar to DB call</span>\n  <span class=\"token keyword\">const</span> newComment <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> comments<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    text<span class=\"token operator\">:</span> content<span class=\"token punctuation\">.</span><span class=\"token property-access\">text</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  comments<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>newComment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Response</span></span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>newComment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    status<span class=\"token operator\">:</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li><strong>contents of /app/comments/[id]/route.ts</strong></li>\n</ul>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">NextRequest</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"next/server\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// dynamic route handle, get comment with a specific id</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token constant\">GET</span><span class=\"token punctuation\">(</span>\n  _request<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">NextRequest</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> params<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> params<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> comment <span class=\"token operator\">=</span> comments<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> comment<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">===</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">Response</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// patch</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token constant\">PATCH</span><span class=\"token punctuation\">(</span>\n  request<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">NextRequest</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> params<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> request<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> params<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> text <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> body<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> comments<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> comment<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">===</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  comments<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">text</span> <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">Response</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span>comments<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token constant\">DELETE</span><span class=\"token punctuation\">(</span>\n  _request<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">NextRequest</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> params<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> params<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> comments<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> comment<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span> <span class=\"token operator\">===</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> deletedData <span class=\"token operator\">=</span> comments<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  comments<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">Response</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span>deletedData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"url-query-params\">URL Query Params<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#url-query-params\"></a></h2>\n<p>Fetching the params after ?</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">NextRequest</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"next/server\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> comments <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./data\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token constant\">GET</span><span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">NextRequest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token property-access\">nextUrl</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">searchParams</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> searchParams<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"query\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> filteredComments <span class=\"token operator\">=</span> query\n    <span class=\"token operator\">?</span> comments<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> comment<span class=\"token punctuation\">.</span><span class=\"token property-access\">text</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">includes</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> comments<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">Response</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">json</span><span class=\"token punctuation\">(</span>filteredComments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"headers\">Headers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#headers\"></a></h2>\n<ul>\n<li>\n<p>HTTP headers represents the metadata associated with req and response</p>\n<ul>\n<li>\n<p><strong>Request Headers</strong>: sent by client(like web browser) to server. Sends essential info about request to servers. eg: accept, user-agent, authorization etc.</p>\n</li>\n<li>\n<p><strong>Response Headers</strong>: sent back from server to client.\nprovide info about the server and the data being sent in response.\neg: \"Content-Type\",</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"examples-1\">Examples<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#examples-1\"></a></h3>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> headers <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"next/headers\"</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token constant\">GET</span><span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">NextRequest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> headerData <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> headerData<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> searchParams<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"query\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Response</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#x3C;h1> Hi&#x3C;/h1>\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"cookies\">Cookies<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#cookies\"></a></h2>\n<ul>\n<li>small piece of data that server sends to user's web browser.</li>\n<li>browser can store cookies and send it back to server with future request.</li>\n</ul>\n<p>3 main purpose</p>\n<ul>\n<li>managing user session (like user login and shopping cart)</li>\n<li>handling personalizations(such user preferences and themes)</li>\n<li>tracking (like recording and analyzing user behaviour)</li>\n</ul>\n<h3 id=\"example-setting-and-retrieving-via-headers-and-request\">Example: Setting and retrieving via headers and request<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#example-setting-and-retrieving-via-headers-and-request\"></a></h3>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">//setting a cookie</span>\n<span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Response</span></span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">\"Set-Cookie\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"theme=dark\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">//retrieving cookie</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token constant\">GET</span><span class=\"token punctuation\">(</span>\n  request<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">NextRequest</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cookies <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token property-access\">cookies</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"theme\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>cookies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { name: 'theme', value: 'dark' }</span>\n</code></pre>\n<h3 id=\"example-setting-using-cookies-from-nextheaders\">Example: setting using cookies from next/headers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#example-setting-using-cookies-from-nextheaders\"></a></h3>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> cookies <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"next/headers\"</span><span class=\"token punctuation\">;</span>\n\ncookieStore<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resultsPerPage\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>cookieStore<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resultsPerPage\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"redirect-in-route-handlers\">redirect in route handlers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#redirect-in-route-handlers\"></a></h2>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span>redirect<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"next-navigation\"</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token constant\">GET</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/v2/users'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"caching\">Caching<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#caching\"></a></h2>\n<p>route handlers are not cached by default but you can opt for caching when using <strong>GET</strong> method.</p>\n<ul>\n<li>Caching <strong>only</strong> works with <strong>GET</strong> methods. Other HTTP methods are never cached.</li>\n</ul>\n<h2 id=\"middleware\">middleware<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#middleware\"></a></h2>\n<ul>\n<li>intercepts the request response cycle.</li>\n<li>enables redirects, rewrites.</li>\n<li>can be used to manipulate both header and cookies</li>\n<li>written in src folder</li>\n</ul>","noteIndex":{"id":"dlb5bmx7v8f6otsgongz4vx","title":"Hi","desc":"","updated":1663067414354,"created":1648190029829,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"5e58da66991a53ed4cf17d0cade77fe6","links":[{"type":"wiki","from":{"fname":"root","id":"dlb5bmx7v8f6otsgongz4vx","vaultName":"Harshita-notes"},"value":"user.tharshita13","alias":"@tharshita13","position":{"start":{"line":15,"column":12,"offset":433},"end":{"line":15,"column":24,"offset":445},"indent":[]},"xvault":false,"to":{"fname":"user.tharshita13"}}],"anchors":{"contacts":{"type":"header","text":"Contacts","value":"contacts","line":13,"column":0,"depth":2}},"children":["trkx8xrg7g2fm023ez4ldqj","c8csxid3zoghxorepwcrami","urj8q1uq98o3upmgbt2qxns","ykyv5ng8vb44dx8wlchugby","qfxhhwhykm8ml24xxlu67v3","fmv0zz06pgij3bozzx9zes9"],"parent":null,"data":{},"body":"\nHi,\nWelcome to Harshita's Digital Garden 🌱\nI'm Harshita Joshi. I'm a software engineer.\nWhen not at the computer, I play ukulele, do yoga, study [German](https://harshita-mindfire.github.io/german-for-beginners/) and wonder about having numerous pets.\n\n## Contacts\n\nYou can find and contact me in the following places\n\n- Email: tharshita13@gmail.com\n\n- Github: [Harshita-mindfire](https://github.com/Harshita-mindfire)\n\n- Medium: [@tharshita13](https://medium.com/@tharshita13)\n\n- LinkedIn: [Harshita Joshi](https://www.linkedin.com/in/harshita-joshi-030b29118/)\n\n- Instagram: [imharshita07](https://www.instagram.com/imharshita07/)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true,"enableEngineV3":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Digital Garden","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://Harshita-mindfire.github.io","assetsPrefix":"/Frontend-JsDev-Handbook","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}