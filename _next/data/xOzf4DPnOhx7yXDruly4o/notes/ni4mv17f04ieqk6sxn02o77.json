{"pageProps":{"note":{"id":"ni4mv17f04ieqk6sxn02o77","title":"Fundamentals","desc":"","updated":1649609418446,"created":1648899620451,"custom":{},"fname":"learning.react.fundamentals","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"58fabadde35c679278e7094ea9f76cd6","links":[{"type":"wiki","from":{"fname":"learning.react.fundamentals","id":"ni4mv17f04ieqk6sxn02o77","vaultName":"Harshita-notes"},"value":"tags.learn","alias":"#learn","position":{"start":{"line":178,"column":20,"offset":6051},"end":{"line":178,"column":26,"offset":6057},"indent":[]},"xvault":false,"to":{"fname":"tags.learn"}}],"anchors":{"react":{"type":"header","text":"React","value":"react","line":8,"column":0,"depth":2},"component":{"type":"header","text":"component","value":"component","line":16,"column":0,"depth":2},"functional-components-over-class":{"type":"header","text":"Functional components over Class","value":"functional-components-over-class","line":20,"column":0,"depth":2},"jsx":{"type":"header","text":"JSX","value":"jsx","line":31,"column":0,"depth":2},"pure-components":{"type":"header","text":"Pure components","value":"pure-components","line":45,"column":0,"depth":2},"react-state-vs-props":{"type":"header","text":"React State vs Props","value":"react-state-vs-props","line":52,"column":0,"depth":2},"controlled-and-uncontrolled-components":{"type":"header","text":"controlled and uncontrolled components","value":"controlled-and-uncontrolled-components","line":59,"column":0,"depth":2},"controlled-components":{"type":"header","text":"Controlled Components","value":"controlled-components","line":63,"column":0,"depth":3},"uncontrolled-component":{"type":"header","text":"Uncontrolled component","value":"uncontrolled-component","line":87,"column":0,"depth":3},"lifecycle-phases":{"type":"header","text":"Lifecycle phases","value":"lifecycle-phases","line":113,"column":0,"depth":2},"detail":{"type":"header","text":"Detail","value":"detail","line":119,"column":0,"depth":3},"context":{"type":"header","text":"Context","value":"context","line":130,"column":0,"depth":2},"flushsync":{"type":"header","text":"flushSync","value":"flushsync","line":145,"column":0,"depth":2},"todo":{"type":"header","text":"TODO","value":"todo","line":182,"column":0,"depth":2}},"children":["lr6lnzahqwfbdwlc9x38hlj","o6nvengftckl6e4kft81zln"],"parent":"8fp89ktw3fhi2p6bt35b5ju","data":{}},"body":"<h1 id=\"fundamentals\">Fundamentals<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#fundamentals\"></a></h1>\n<h2 id=\"react\">React<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#react\"></a></h2>\n<p>A JS library for building User interfaces.</p>\n<ul>\n<li>uses Virtual DOM</li>\n<li>unindirectional data flow</li>\n<li>reusable UI components</li>\n</ul>\n<h2 id=\"component\">component<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#component\"></a></h2>\n<p>a fuction that returns markup</p>\n<h2 id=\"functional-components-over-class\">Functional components over Class<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#functional-components-over-class\"></a></h2>\n<ul>\n<li>use functional comp over class, after 16.8 hooks can be used as lifecycle events.</li>\n<li>use class component when you want a react functionality that is not available for functions yet, eg: error boundries</li>\n<li>Only class components can be error boundaries. To make class component an error boundary we define a new lifecycle method called componentDidCatch(error, info).</li>\n</ul>\n<p>ReactDOM.render function: takes 2 i/p</p>\n<ul>\n<li>App</li>\n<li>document.getElementById(\"root\")</li>\n</ul>\n<h2 id=\"jsx\">JSX<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#jsx\"></a></h2>\n<p>you can use the conditional ? operator. it works inside JSX:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&#x3C;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>isLoggedIn <span class=\"token operator\">?</span> <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">AdminPanel</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">LoginForm</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n</code></pre>\n<p>When you donâ€™t need the else branch, you can also use a shorter logical &#x26;&#x26; syntax:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&#x3C;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>isLoggedIn <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">AdminPanel</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n</code></pre>\n<h2 id=\"pure-components\">Pure components<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#pure-components\"></a></h2>\n<p>Some JavaScript functions are pure. A pure function:</p>\n<ul>\n<li>Minds its own business. It does not change any objects or variables that existed before it was called.</li>\n<li>Same inputs, same output. Given the same inputs, a pure function should always return the same result.</li>\n</ul>\n<h2 id=\"react-state-vs-props\">React State vs Props<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#react-state-vs-props\"></a></h2>\n<ul>\n<li>State of a component is an object that holds some information that may change over the lifetime of the component.</li>\n<li>props are inputs to a component, They are data passed down from a parent component to a child component.</li>\n</ul>\n<p>Both props and state are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. Props get passed to the component similar to function parameters whereas state is managed within the component similar to variables declared within a function.</p>\n<h2 id=\"controlled-and-uncontrolled-components\">controlled and uncontrolled components<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#controlled-and-uncontrolled-components\"></a></h2>\n<p>In Controlled components the form data is handled by react(eg: state) and with uncontrolled comp. form data is handled by DOM itself.</p>\n<h3 id=\"controlled-components\">Controlled Components<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#controlled-components\"></a></h3>\n<p>In React, controlled and uncontrolled components are two different approaches to managing the state of a form component.</p>\n<p>A controlled component is a component that takes its current value through props and notifies changes through callbacks, like onChange. When a user enters data into a form element, the component's state is updated and the UI is re-rendered with the new values. In other words, the state of the component is controlled by React.</p>\n<p>Here's an example of a controlled component for an input field:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">InputField</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token operator\">&#x3C;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>In this example, the value of the input field is controlled by the value state variable. The handleChange function updates the value state when the input field changes, and the new value is passed down to the input element as a prop.</p>\n<h3 id=\"uncontrolled-component\">Uncontrolled component<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#uncontrolled-component\"></a></h3>\n<p>an uncontrolled component is a component that manages its own state internally. In an uncontrolled component, the form data is handled by the DOM itself, instead of being managed by React.</p>\n<p>Here's an example of an uncontrolled component for an input field:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">InputField</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input value:\"</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">elements</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">inputField</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&#x3C;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"inputField\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span><span class=\"token maybe-class-name\">Submit</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>In this example, the form data is handled by the DOM. When the user submits the form, the handleSubmit function accesses the value of the input field directly from the DOM using event.target.elements.inputField.value.</p>\n<h2 id=\"lifecycle-phases\">Lifecycle phases<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lifecycle-phases\"></a></h2>\n<ul>\n<li>Mounting</li>\n<li>updating</li>\n<li>unmounting</li>\n</ul>\n<h3 id=\"detail\">Detail<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#detail\"></a></h3>\n<ul>\n<li>\n<p><strong>Mounting</strong>: The component is ready to mount in the browser DOM. This phase covers initialization from\n<code>constructor(), getDerivedStateFromProps(), render(), and componentDidMount()</code> lifecycle methods.</p>\n</li>\n<li>\n<p><strong>Updating</strong>: In this phase, the component gets updated in two ways, <strong>sending the new props</strong> and <strong>updating the state</strong> either from setState() or forceUpdate(). This phase covers <code>getDerivedStateFromProps(), shouldComponentUpdate(), render(), getSnapshotBeforeUpdate() and componentDidUpdate()</code> lifecycle methods.</p>\n</li>\n<li>\n<p><strong>Unmounting</strong>: In this last phase, the component is not needed and gets unmounted from the browser DOM. This phase includes <code>componentWillUnmount()</code> lifecycle method.</p>\n</li>\n</ul>\n<p><img src=\"/Frontend-JsDev-Handbook/assets/images/2023-04-14-19-35-20.png\" alt=\"Lifecycle of component\"></p>\n<h2 id=\"context\">Context<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#context\"></a></h2>\n<p>Context provides a way to pass data through the component tree without having to pass props down manually at every level.</p>\n<p>For example, authenticated users, locale preferences, UI themes need to be accessed in the application by many components.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Provider</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Consumer</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createContext</span><span class=\"token punctuation\">(</span>defaultValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>To pass context:\n<ul>\n<li>Create and export it with export const MyContext = createContext(defaultValue).</li>\n<li>Pass it to the useContext(MyContext) Hook to read it in any child component, no matter how deep.</li>\n<li>Wrap children into &#x3C;MyContext.Provider value={...}> to provide it from a parent.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"flushsync\">flushSync<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#flushsync\"></a></h2>\n<p>Call flushSync to force React to flush any pending work and update the DOM synchronously.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> flushSync <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">flushSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setSomething</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Example</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'handler'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">flushSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token arrow operator\">=></span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'handler '</span> <span class=\"token operator\">+</span> state<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'render '</span> <span class=\"token operator\">+</span> state<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token operator\">&#x3C;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&#x3C;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>click me<span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\nuserEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click me'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token doc-comment comment\">/**\n * Output\n * \"render 0\"\n * \"handler\"\n * \"render 1\"\n * \"handler 0\"\n * **/</span>\n</code></pre>\n<h2 id=\"todo\">TODO<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#todo\"></a></h2>\n<ul>\n<li>React.StrictMode <a class=\"color-tag\" style=\"--tag-color: #fbeeac;\" href=\"/Frontend-JsDev-Handbook/notes/gnxywb70sldsrsabn47cn3z\">#learn</a></li>\n</ul>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/Frontend-JsDev-Handbook/notes/lr6lnzahqwfbdwlc9x38hlj\">Function First Class Entity</a></li>\n<li><a href=\"/Frontend-JsDev-Handbook/notes/o6nvengftckl6e4kft81zln\">Virtual Dom</a></li>\n</ol>","noteIndex":{"id":"dlb5bmx7v8f6otsgongz4vx","title":"Hi","desc":"","updated":1663067414354,"created":1648190029829,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"5e58da66991a53ed4cf17d0cade77fe6","links":[{"type":"wiki","from":{"fname":"root","id":"dlb5bmx7v8f6otsgongz4vx","vaultName":"Harshita-notes"},"value":"user.tharshita13","alias":"@tharshita13","position":{"start":{"line":15,"column":12,"offset":433},"end":{"line":15,"column":24,"offset":445},"indent":[]},"xvault":false,"to":{"fname":"user.tharshita13"}}],"anchors":{"contacts":{"type":"header","text":"Contacts","value":"contacts","line":13,"column":0,"depth":2}},"children":["trkx8xrg7g2fm023ez4ldqj","c8csxid3zoghxorepwcrami","urj8q1uq98o3upmgbt2qxns","ykyv5ng8vb44dx8wlchugby","qfxhhwhykm8ml24xxlu67v3","fmv0zz06pgij3bozzx9zes9"],"parent":null,"data":{},"body":"\nHi,\nWelcome to Harshita's Digital Garden ðŸŒ±\nI'm Harshita Joshi. I'm a software engineer.\nWhen not at the computer, I play ukulele, do yoga, study [German](https://harshita-mindfire.github.io/german-for-beginners/) and wonder about having numerous pets.\n\n## Contacts\n\nYou can find and contact me in the following places\n\n- Email: tharshita13@gmail.com\n\n- Github: [Harshita-mindfire](https://github.com/Harshita-mindfire)\n\n- Medium: [@tharshita13](https://medium.com/@tharshita13)\n\n- LinkedIn: [Harshita Joshi](https://www.linkedin.com/in/harshita-joshi-030b29118/)\n\n- Instagram: [imharshita07](https://www.instagram.com/imharshita07/)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true,"enableEngineV3":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Digital Garden","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://Harshita-mindfire.github.io","assetsPrefix":"/Frontend-JsDev-Handbook","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}