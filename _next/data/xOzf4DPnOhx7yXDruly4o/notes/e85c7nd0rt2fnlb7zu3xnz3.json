{"pageProps":{"note":{"id":"e85c7nd0rt2fnlb7zu3xnz3","title":"Basic Types","desc":"","updated":1709628024801,"created":1709628024801,"custom":{},"fname":"learning.typescript.basic-types","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"e23a7e9efe7863912a709e04cfef767e","links":[],"anchors":{"core-types":{"type":"header","text":"Core Types","value":"core-types","line":10,"column":0,"depth":2},"other-types":{"type":"header","text":"Other Types","value":"other-types","line":46,"column":0,"depth":2},"type-aliases":{"type":"header","text":"Type Aliases","value":"type-aliases","line":74,"column":0,"depth":2},"function-return-types--void":{"type":"header","text":"Function return types & void","value":"function-return-types--void","line":96,"column":0,"depth":2},"functions-as-type":{"type":"header","text":"Functions as type","value":"functions-as-type","line":125,"column":0,"depth":2},"function-type--callbacks":{"type":"header","text":"Function Type && Callbacks","value":"function-type--callbacks","line":131,"column":0,"depth":2},"further-references":{"type":"header","text":"Further references","value":"further-references","line":159,"column":0,"depth":2}},"children":[],"parent":"w5l9zvdha3es8jaxge5e4lu","data":{}},"body":"<h1 id=\"basic-types\">Basic Types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#basic-types\"></a></h1>\n<p>Typescript's type system helps us during development.\nThe key difference b/w JS and TS type system is JS uses dynamic types(resolves during runtime) and TS uses static types(set during development)</p>\n<h2 id=\"core-types\">Core Types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#core-types\"></a></h2>\n<ul>\n<li>\n<p><strong>number</strong>: All numbers, no differentiation b/w integers and floats.</p>\n</li>\n<li>\n<p><strong>string</strong></p>\n</li>\n<li>\n<p><strong>boolean</strong></p>\n</li>\n<li>\n<p><strong>object</strong></p>\n</li>\n<li>\n<p><strong>array</strong></p>\n</li>\n<li>\n<p><strong>tuple</strong>: (added by TS) fix length array.\neg: In below example, role is tuple. It is a fixed length(2) array with first index value as number and second has string. <code>person.role[1] = 10; person.role = [1, \"abcd\", \"def\"]</code> will result in compile time errors. </p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">person</span><span class=\"token operator\">:</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">role</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">]</span> <span class=\"token comment\">// tuple</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">role</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"author\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>  <strong>Note</strong> : <code>person.role.push(\"heeloo\")</code> will not result in a compile time error. This is an exception. TS cannot catch this error.</p>\n</li>\n<li>\n<p><strong>enum</strong>: Automatically enumerated global constant identifiers. </p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> <span class=\"token maybe-class-name\">Role</span> <span class=\"token punctuation\">{</span><span class=\"token constant\">ADMIN</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">READ_ONLY</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">AUTHOR</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>  by default here Role.ADMIN will have value 0, READ_ONLY: 1 and AUTHOR 2. We can change this by</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> <span class=\"token maybe-class-name\">Role</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">ADMIN</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ADMINISTRATOR\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token constant\">READ_ONLY</span> <span class=\"token operator\">=</span><span class=\"token string\">\" Read only users\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token constant\">AUTHOR</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Author\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li>\n<p><strong>any</strong></p>\n</li>\n</ul>\n<p><strong>Note</strong>: The core primitive types in TypeScript are all lowercase!</p>\n<h2 id=\"other-types\">Other Types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#other-types\"></a></h2>\n<ul>\n<li>\n<p><strong>union</strong>: </p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li>\n<p><strong>literal types</strong>: </p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> result<span class=\"token operator\">:</span> <span class=\"token string\">'value1'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'value2'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// now result cannot be assigned any value other than value1 or value 2. </span>\nresult <span class=\"token operator\">=</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// results in compile time error</span>\n</code></pre>\n</li>\n<li>\n<p><strong>unknown</strong>: we don't know yet what's the type. It is similar to any but more restrictive.</p>\n</li>\n<li>\n<p><strong>never</strong>: never returns anything. eg: error functions</p>\n</li>\n<li>\n<p><strong>symbol</strong>:\nThere is a primitive in JavaScript used to create a globally unique reference via the function Symbol():</p>\n</li>\n</ul>\n<pre class=\"language-ts\"><code class=\"language-ts\">    <span class=\"token keyword\">const</span> firstName <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> secondName <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>firstName <span class=\"token operator\">===</span> secondName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//This comparison appears to be unintentional because the types 'typeof firstName' and 'typeof secondName' have no overlap.</span>\n    <span class=\"token comment\">// Can't ever happen</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"type-aliases\">Type Aliases<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#type-aliases\"></a></h2>\n<p>Type aliases can be used to \"create\" your own types. </p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">NumStringType</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">CustomLiteralType</span></span> <span class=\"token operator\">=</span> <span class=\"token string\">\"value1\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// now these can be used as below:</span>\n\n<span class=\"token keyword\">let</span> variable1<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">NumStringType</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>You're not limited to storing union types though - you can also provide an alias to a (possibly complex) object type.</p>\n<p>For example:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">User</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> u1<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Max'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this works!</span>\n</code></pre>\n<p>This allows you to avoid unnecessary repetition and manage types centrally.</p>\n<h2 id=\"function-return-types--void\">Function return types &#x26; void<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#function-return-types--void\"></a></h2>\n<p>return type in func is specified after \":\"</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Result is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sum<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The function that does not have a return statement is of return type void.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// this is internally :void</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>The function that has a return statement but returns nothing, is of return type undefined</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// this is internally : undefined . You can also use : void here if required. won't throw any error.</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2 id=\"functions-as-type\">Functions as type<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#functions-as-type\"></a></h2>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">combinedResult</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"function-type--callbacks\">Function Type &#x26;&#x26; Callbacks<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#function-type--callbacks\"></a></h2>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">addAndHandle</span><span class=\"token punctuation\">(</span>n1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> n2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">cb</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">addAndHandle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>NOTE: </strong> callback functions can return something, even if the argument on which they're passed does NOT expect a returned value.</p>\n<p>for example: the below code will compile just fine. even though the return type of cb is void and we are returning boolean.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">sendRequest</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">cb</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>response<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... sending a request with \"data\"</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>data<span class=\"token operator\">:</span> <span class=\"token string\">'Hi there!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token function\">sendRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Send this!'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"further-references\">Further references<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#further-references\"></a></h2>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html\">https://www.typescriptlang.org/docs/handbook/2/everyday-types.html</a></li>\n</ul>","noteIndex":{"id":"dlb5bmx7v8f6otsgongz4vx","title":"Hi","desc":"","updated":1663067414354,"created":1648190029829,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"5e58da66991a53ed4cf17d0cade77fe6","links":[{"type":"wiki","from":{"fname":"root","id":"dlb5bmx7v8f6otsgongz4vx","vaultName":"Harshita-notes"},"value":"user.tharshita13","alias":"@tharshita13","position":{"start":{"line":15,"column":12,"offset":433},"end":{"line":15,"column":24,"offset":445},"indent":[]},"xvault":false,"to":{"fname":"user.tharshita13"}}],"anchors":{"contacts":{"type":"header","text":"Contacts","value":"contacts","line":13,"column":0,"depth":2}},"children":["trkx8xrg7g2fm023ez4ldqj","c8csxid3zoghxorepwcrami","urj8q1uq98o3upmgbt2qxns","ykyv5ng8vb44dx8wlchugby","qfxhhwhykm8ml24xxlu67v3","fmv0zz06pgij3bozzx9zes9"],"parent":null,"data":{},"body":"\nHi,\nWelcome to Harshita's Digital Garden 🌱\nI'm Harshita Joshi. I'm a software engineer.\nWhen not at the computer, I play ukulele, do yoga, study [German](https://harshita-mindfire.github.io/german-for-beginners/) and wonder about having numerous pets.\n\n## Contacts\n\nYou can find and contact me in the following places\n\n- Email: tharshita13@gmail.com\n\n- Github: [Harshita-mindfire](https://github.com/Harshita-mindfire)\n\n- Medium: [@tharshita13](https://medium.com/@tharshita13)\n\n- LinkedIn: [Harshita Joshi](https://www.linkedin.com/in/harshita-joshi-030b29118/)\n\n- Instagram: [imharshita07](https://www.instagram.com/imharshita07/)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true,"enableEngineV3":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Digital Garden","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://Harshita-mindfire.github.io","assetsPrefix":"/Frontend-JsDev-Handbook","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}