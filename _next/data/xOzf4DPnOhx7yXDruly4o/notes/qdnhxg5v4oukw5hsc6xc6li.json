{"pageProps":{"note":{"id":"qdnhxg5v4oukw5hsc6xc6li","title":"Advance Types","desc":"","updated":1712647837717,"created":1712647837717,"custom":{},"fname":"learning.typescript.advance-types","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"852e4672b046a46845b68ede12c47e16","links":[],"anchors":{"intersection-types":{"type":"header","text":"Intersection types","value":"intersection-types","line":7,"column":0,"depth":3},"typeguards":{"type":"header","text":"Typeguards","value":"typeguards","line":23,"column":0,"depth":3},"index-properties":{"type":"header","text":"index properties","value":"index-properties","line":34,"column":0,"depth":3},"optional-chaining":{"type":"header","text":"optional chaining","value":"optional-chaining","line":47,"column":0,"depth":3},"nullish-coalescing":{"type":"header","text":"nullish coalescing","value":"nullish-coalescing","line":54,"column":0,"depth":3}},"children":[],"parent":"w5l9zvdha3es8jaxge5e4lu","data":{}},"body":"<h1 id=\"advance-types\">Advance Types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#advance-types\"></a></h1>\n<h3 id=\"intersection-types\">Intersection types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#intersection-types\"></a></h3>\n<ul>\n<li>For objects, intersection type is combination of both object properties.</li>\n</ul>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">TypeA</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">TypeB</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">TypeC</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">TypeA</span> <span class=\"token operator\">&#x26;</span> <span class=\"token maybe-class-name\">TypeB</span> <span class=\"token comment\">// will have props of both TypeA and TypeB</span>\n</code></pre>\n<ul>\n<li>for union types, intersection type are the types they have in common.</li>\n</ul>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Combinable</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Numeric</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Universal</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Combinable</span> <span class=\"token operator\">&#x26;</span> <span class=\"token maybe-class-name\">Numeric</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// intersection would be number</span>\n</code></pre>\n<h3 id=\"typeguards\">Typeguards<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#typeguards\"></a></h3>\n<p>With type guards you avoid runtime errors by checking types before you try to do something with the values.</p>\n<ul>\n<li>instanceOf</li>\n<li>typeOf</li>\n<li>property in object</li>\n</ul>\n<p>Reference: <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html\">https://www.typescriptlang.org/docs/handbook/2/narrowing.html</a></p>\n<ul>\n<li>in case of interfaces, use <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#discriminated-unions\">discriminated unions</a>.</li>\n</ul>\n<h3 id=\"index-properties\">index properties<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#index-properties\"></a></h3>\n<ul>\n<li>Sometimes you donâ€™t know all the names of a typeâ€™s properties ahead of time, but you do know the shape of the values.</li>\n</ul>\n<p>In those cases you can use an index signature to describe the types of possible values, for example:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">User</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>prop<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p> Read more <a href=\"https://www.typescriptlang.org/docs/handbook/2/objects.html#index-signatures\">here</a></p>\n<h3 id=\"optional-chaining\">optional chaining<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#optional-chaining\"></a></h3>\n<p>ts supports the below code instead of using <code>if(user &#x26;&#x26; user.job &#x26;&#x26; user.job.name)</code></p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">?.</span>job<span class=\"token operator\">?.</span>name<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"nullish-coalescing\">nullish coalescing<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#nullish-coalescing\"></a></h3>\n<p> if <strong>null or undefined</strong> used default value;\neg:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> username <span class=\"token operator\">??</span> <span class=\"token string\">'Max'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// stores max</span>\n\n\n<span class=\"token keyword\">const</span> lname <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> value2 <span class=\"token operator\">=</span> xyz <span class=\"token operator\">??</span> <span class=\"token string\">'Smith'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//stores ''.</span>\n</code></pre>\n<p>if we would have used value2 = xyz || 'Smith', the value2 will be = <code>Smith</code></p>","noteIndex":{"id":"dlb5bmx7v8f6otsgongz4vx","title":"Hi","desc":"","updated":1663067414354,"created":1648190029829,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"},"contentHash":"5e58da66991a53ed4cf17d0cade77fe6","links":[{"type":"wiki","from":{"fname":"root","id":"dlb5bmx7v8f6otsgongz4vx","vaultName":"Harshita-notes"},"value":"user.tharshita13","alias":"@tharshita13","position":{"start":{"line":15,"column":12,"offset":433},"end":{"line":15,"column":24,"offset":445},"indent":[]},"xvault":false,"to":{"fname":"user.tharshita13"}}],"anchors":{"contacts":{"type":"header","text":"Contacts","value":"contacts","line":13,"column":0,"depth":2}},"children":["trkx8xrg7g2fm023ez4ldqj","c8csxid3zoghxorepwcrami","urj8q1uq98o3upmgbt2qxns","ykyv5ng8vb44dx8wlchugby","qfxhhwhykm8ml24xxlu67v3","fmv0zz06pgij3bozzx9zes9"],"parent":null,"data":{},"body":"\nHi,\nWelcome to Harshita's Digital Garden ðŸŒ±\nI'm Harshita Joshi. I'm a software engineer.\nWhen not at the computer, I play ukulele, do yoga, study [German](https://harshita-mindfire.github.io/german-for-beginners/) and wonder about having numerous pets.\n\n## Contacts\n\nYou can find and contact me in the following places\n\n- Email: tharshita13@gmail.com\n\n- Github: [Harshita-mindfire](https://github.com/Harshita-mindfire)\n\n- Medium: [@tharshita13](https://medium.com/@tharshita13)\n\n- LinkedIn: [Harshita Joshi](https://www.linkedin.com/in/harshita-joshi-030b29118/)\n\n- Instagram: [imharshita07](https://www.instagram.com/imharshita07/)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true,"enableEngineV3":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Harshita-notes","sync":"sync"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Digital Garden","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://Harshita-mindfire.github.io","assetsPrefix":"/Frontend-JsDev-Handbook","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}