{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Hi","n":1},"1":{"v":"\nHi,\nWelcome to Harshita's Digital Garden 🌱\nI'm Harshita Joshi. I'm a software engineer.\nWhen not at the computer, I play ukulele, do yoga, study [German](https://harshita-mindfire.github.io/german-for-beginners/) and wonder about having numerous pets.\n\n## Contacts\n\nYou can find and contact me in the following places\n\n- Email: tharshita13@gmail.com\n\n- Github: [Harshita-mindfire](https://github.com/Harshita-mindfire)\n\n- Medium: [@tharshita13](https://medium.com/@tharshita13)\n\n- LinkedIn: [Harshita Joshi](https://www.linkedin.com/in/harshita-joshi-030b29118/)\n\n- Instagram: [imharshita07](https://www.instagram.com/imharshita07/)\n","n":0.141}}},{"i":2,"$":{"0":{"v":"Demo","n":1}}},{"i":3,"$":{"0":{"v":"News for You","n":0.577}}},{"i":4,"$":{"0":{"v":"Misc","n":1},"1":{"v":"\nRSS to JSON covertor\n\n- fetch(`https://api.rss2json.com/v1/api.json?rss_url=https://timesofindia.indiatimes.com/rssfeeds/4719148.cms`)\n","n":0.447}}},{"i":5,"$":{"0":{"v":"Links","n":1},"1":{"v":"# News For You\n\n## Videos\n- [Assignment Demo](https://drive.google.com/file/d/1sHWL5ur1YIMlNcLmncTfMm-j5yz1Lb73/view?usp=sharing)\n- [Design Walkthrough](https://drive.google.com/file/d/1E2NNqHKUh_4TeYhrU3QKh2uGL8jIgVEf/view?usp=sharing)\n## Project Doc\n- [News For You](https://docs.google.com/document/d/1HNSSAEbEhAirxumQWYoejOL7d1QTT5Kzq3U239eUHOY/edit#)\n## References\n\n### Micro Frontend\n\n- Microfrontends: https://www.youtube.com/watch?v=lKKsjpH09dU\n- Global State management with Module Federation: https://www.youtube.com/watch?v=njXeMeAu4Sg\n- Communication using Pub/Sub and Event Bus:\thttps://raz-levy.medium.com/communicating-between-micro-frontends-using-custom-events-in-react-js-e3dab0571edb\n- Add vue app with react micro frontend: https://indepth.dev/tutorials/react/add-vue-to-react-micro-frontend \n- Redux: https://www.youtube.com/watch?v=1oU_YGhT7ck\n\n### Microservices\n\n\n- Ecommerce Microservices with RabbitMQ: https://www.youtube.com/watch?v=gesxvFh0U84\n- Dockerizing node app: https://nodejs.org/en/docs/guides/nodejs-docker-webapp\n- Dockerizing node app, postgres and pgadmin for visualization: https://www.section.io/engineering-education/dockerized-prisma-postgres-api/#create-and-run-a-prisma-server-with-docker\n- How to Run PostgreSQL and pgAdmin Using Docker: https://towardsdatascience.com/how-to-run-postgresql-and-pgadmin-using-docker-3a6a8ae918b5\n- API Gateway: https://www.youtube.com/watch?v=hWRRdICvMNs\n- Manage apis with docker compose andTraefik:   \n    - https://www.youtube.com/watch?v=mZbLvGQqEvY\n    - https://blog.sethcorker.com/traefik-routing-for-web-apps/\n    - https://www.youtube.com/watch?v=Gk9WER6DunE&list=RDQMss5YU5liZzs&start_radio=1\n\n### Docker\n- Docker cheat sheet: https://docs.docker.com/get-started/docker_cheatsheet.pdf\n- Docker compose: https://www.youtube.com/watch?v=HG6yIjZapSA\n- Advanced Docker: https://www.youtube.com/watch?v=QeQ2MH5f_BE\n\n### Github Repository\n\n#### micro svc\n- [User service](https://github.com/varun-mfs/news-for-you)\n- [News Delivery service](https://github.com/asishmindfire/news-delivery-service)\n- [Reporting](https://github.com/nikhild007/reportingService)\n- [RSS fetch service](https://github.com/Harshita-mindfire/rss-fetch-service)\n- [Docker images](https://github.com/asishmindfire/docker-configuration)\n- [Shared model](https://github.com/asishmindfire/newsforyou-schemas-npm-package)\n\n#### micro fe\n- [User Auth service](https://github.com/asishmindfire/news-app-mfe)\n- [Category Filter](https://github.com/Harshita-mindfire/category-sidebar-mfe)\n- [News Service](https://github.com/nikhild007/NewsLayout/)\n- [Reporting Service](https://github.com/varun-mfs/report-mfe)\n\n\n","n":0.089}}},{"i":6,"$":{"0":{"v":"Tags","n":1}}},{"i":7,"$":{"0":{"v":"JavaScript","n":1}}},{"i":8,"$":{"0":{"v":"Frontend Web Performance Checklist","n":0.5},"1":{"v":"\n- Loading the script using the async or defer attribute to avoid blocking document parsing.\n- Removing the script if it doesn't add clear value to your site.\n- Minify/Remove unnecessary CSS and JS\n- reduce xecution time: The combination of code splitting, minification and compression, removal of unused code and caching techniques will greatly improve execution time.\n- Effective image handling:\n  Properly size images\n  Serve images that are appropriately-sized to save cellular data and improve load tim\n\n## Don'ts\n\n-\n","n":0.115}}},{"i":9,"$":{"0":{"v":"Learn","n":1},"1":{"v":"\nTopics to learn\nperformance\n\n1. ~~fe performance checklist~~\n2. libuv os delegation\n3. threadpool, caching with redis\n4. event loop\n5. threads, benchmark server performance\n6. ~~web worker and worker threads~~\n7. forking children\n\nsecurity\n\n1. securing restful api node.js\n2. ~~OWasp~~\n3. becrypt\n4. jwt\n5. ~~xss~~\n6. auth0\n\nReact\n\n1. strict\n\nSEO\n\n1.\n\n","n":0.167}}},{"i":10,"$":{"0":{"v":"Resources","n":1}}},{"i":11,"$":{"0":{"v":"Links","n":1},"1":{"v":"-[Open source emojis for designers, developers and everyone else!](https://openmoji.org/)\n- [vector icons and stickers](https://www.flaticon.com/)","n":0.277}}},{"i":12,"$":{"0":{"v":"Troubleshoot","n":1},"1":{"v":"\n### kill a port in windows\n\n```bash\n\nnetstat -ano | findstr :3000\n\ntaskkill /PID <PID> /F\n```\n\n### npm connection refused error\n\n```\nnpm config set proxy null\nnpm config set https-proxy null\nnpm config set registry http://registry.npmjs.org/\n```\n\n### prettier not working on save?\n\n- go to settings: > cmd+shidt+P/Ctrl + Shift+P > Preferences: Open Settings (UI) > write on save in search bar, check Editor: Format on Save\n\n\n### kill a port in mac\n\n- Find: `sudo lsof -i :3000`\n\n- Kill: `kill -9 <PID>`\n\n\n### get ip add on mac\n**Internal IP**\n- ipconfig getifaddr en0 \n\n**Public IP**\n- type what is my ip address in google and get it.\n\n\n## install java in mac0s\nhttps://www.geeksforgeeks.org/how-to-install-java-on-macos/\n","n":0.101}}},{"i":13,"$":{"0":{"v":"Reading","n":1},"1":{"v":"\n## Good Reads\n- [10 years of typescript](https://devblogs.microsoft.com/typescript/ten-years-of-typescript/)\n- [How superhuman grows](https://www.howtheygrow.co/p/how-superhuman-grows)","n":0.316}}},{"i":14,"$":{"0":{"v":"War of Lanka","n":0.577},"1":{"v":"\n## Comments\n\nThe final book in the Ram Chandra Series is considerably lengthy, providing extensive details on various aspects. Nonetheless, the initial chapters shine with their skillfully crafted conversations among Ravan, Sita, and Kumbhkaran.\n\nAs the narrative unfolds, we discover that Sita is, indeed, Vedavati's daughter, a suspicion I had entertained to some extent. Vishwamitra, already aware of this revelation, devises additional strategies that may be explored in potential spin-offs. However, the book would have benefited from trimming at least 100 pages as it suffers from pacing issues, leading to significant lag.\n\nA notable flaw is the sudden shift in Ravan's portrayal. Previously established as a prominent villain throughout the preceding three books, his reduced significance following the mere mention of Vedavati lacks depth and leaves the reader wanting more in terms of character development and consistency. It was difficult to comprehend the abrupt change of heart considering that he already knew Vedavati was deceased.\n","n":0.081}}},{"i":15,"$":{"0":{"v":"The Seven Husband of Evelyn Hugo","n":0.408},"1":{"v":"\n## Summary \n\nThe life of `Evelyn Hugo` is filled with scandal and fame. Over the course of her lifetime, she was married eight times to seven different husbands. Eighth time the charm, she secretly married the love of her life `Celia St James`, also an Oscar-winning actress. In an era prior to the acceptance of bisexuality, she was a bisexual. As she says herself, `I spent half my time loving her and half hiding how much I loved her.`. Evelyn, like any other human, made mistakes along the way. Although some of them were unforgivable, she believed she did what had to be done for her survival. She was suffering from `Breast Cancer` during her last days and wanted to come out of closet through her biography. She chose `Monique`, a struggling writer for `Vivane`(magazine) for writing her biography. A curious Monique wondered why Evelyn Hugo had chosen her out of all the writers. Evelyn asked Monique to justify her true character in the book. It was not in her interest to whitewash her actions. \n\n### Marriages\n- She married `Ernie Diaz` to get out of her depressing town where her father treated her like trash.\n- Fell in love with superstar `Don Adler`, became a victim of #domestic-violence, divorced.\n- Went to LA and married `Mick Riva` for a day to stop spreading any rumours about her and Celia.\n- Married `Rex North` as a publicity stunt to get TRP for upcoming movie.\n- Married her best-friend `Harry Cameron`(gay) to start a family of her own.\n- Fell in love with her director `Max Girard` divorced soon after she received a hint from Celia on getting back together.\n- Married `Robert Jamison`, Celia's brother to settle with Celia in Europe.\n- Married `Celia` in her bedroom. Celia suffered from a disease, died few years after.\n\n\n## Takeaways\n\n- `When you're given an opportunity to change your life, be ready to do whatever it takes to make it happen. The world doesn't give things, you take things`\n\n\n## Fav quotes\n- `The cruelest thing you can do to someone you love, give them just enough good to make them stick through a hell of a lot of bad.`","n":0.053}}},{"i":16,"$":{"0":{"v":"The Lean Startup","n":0.577},"1":{"v":"\n## 4. Experiment\n\n- gain validated learning\n- take initial steps like we perform a science experiment\n    - have a hypothesis\n    - make calculated prediction in theory\n    - perform\n- begin small experiments immediately\n    - break it down and calculate value and growth hypothesis(value hypothesis is if the new feature/product adds alue to customer? growth hypothesis describes the growth of feature/product after shipping it.)\n    - an experiment is a product. Instead of manager asking engineer to build certain requirements. The lean startup encourages team to answer these questions:\n        a. Do customer release it is a problem which you aim to solve?\n        b. If there was a solution, will it increase growth?\n        c. can we build the solution ?\n\n_success is not delivering feature; success is learning how to solve customer's problem_\n","n":0.089}}},{"i":17,"$":{"0":{"v":"Sita: warrior of Mithila","n":0.5},"1":{"v":"\n- Author: Amish Tripathi\n\n## Comments\n\nI thoroughly enjoyed reading the second book in the Ram Chandra Series by Amish. It beautifully crafted a vivid and powerful portrayal of Sita. She exhibited remarkable intelligence, unwavering determination, and an indomitable warrior spirit. Along her journey, she formed deep bonds with loyal friends who I believe will stand by her side until the series concludes. Sita possesses unwavering clarity regarding her purpose and priorities. This book successfully maintains the series' core themes of strength, wisdom, choice, love, and self-discovery.\n\nFurthermore, this book delves deeply into the enigmatic secrets that remained unresolved from the first installment. The Malayaputras have designated Sita as the next Vishnu, and it is revealed that Vishwamitra, the leader of the Malayaputras and Sita's guru, deliberately orchestrated Ram's use of the devi astra against the Lankans. While there are still untold stories awaiting us, such as the rivalry between Divodas and Kaushik and the connection between Vishwamitra and Ravan, this book remains a compelling and captivating read.\n\n## Favorite quotes\n\n- The entire anecdote about `the death of the matriarch of a large elephant herd`. Wonderful narration. pg no 96 onwards.\n- Hanuman: _better to have loved and lost than never to have loved at all_\n  Sita: _Forgive me, I don't mean to be rude but only someone who has never loved at all can say something like that_.\n\n## vocab\n\n- matriarch: a woman who is the head of a family or tribe.\n  > \"in some cultures the mother proceeds to the status of a matriarch\"\n- beseech: ask someone urgently to do something.\n  > He cast a beseeching look at his sister, begging for her help.\n","n":0.061}}},{"i":18,"$":{"0":{"v":"Ravan: Enemy of Aryawarta","n":0.5},"1":{"v":"\n## Comments\n\nThis is the best book of the series. I loved every single chapter. The storytelling is excellent, beautifully crafted, engaging, and filled with just the right amount of drama to portray Ravan as the perfect villain. The love angle of Vedavati, heartbreak, loss, the brotherly obligations, anger, destruction, it all made sense. Each character is a hero in their own right. Really loved how the author made complete circle with Samichi's entry, the connection between vishwamitra -ravan and ravan-sita\n\n## Phrases I liked\n\n- The tale of lion and the deer. pg 156.\n\n- _Kumbhkaran swallowed a lump in his throat. He had read somewhere that there was nothing worse than unrequited love. But they were wrong. There was something worse: Unrequited love that was not even aware of it being one-sided._\n\n> In a typical case of unrequited love, at least the person experiencing it is aware of the lack of reciprocation. They may feel heartbroken or disappointed, but they have the clarity of knowing that their love is not returned.\n\nHowever, in the above scenario, the person remains oblivious to the fact that their affection is not reciprocated. They continue to harbor feelings for someone who does not feel the same way, and they may invest their emotions, time, and energy in a one-sided pursuit. The added anguish comes from the lack of awareness, as they may hold onto hope or continue to invest emotionally without realizing that their love is unrequited. In this case, the pain may be prolonged, and it can be more difficult to move on or find closure.\n","n":0.062}}},{"i":19,"$":{"0":{"v":"Ram: scion of ikshvaku","n":0.5},"1":{"v":"\n## Comments\n\nThis is one of the best novels I have read recently. Initially it took me some time to get onboard. The frequent _sanskrit_ names and references and a better vocabulary requirement kept me from turning pages but as I moved on from my inertia of reading thrillers, I fell in love with the narration. It torches light on why do we workship who we worship. Ram is an ideal man, it is very inherent to be practical or you know just stupid, but to be ideal is something that requires both courage and sacrifice. ^dxpub7hs2rel\nP.S. Sita is the best part of novel.\n\n## Takeaways\n\n![[reading.ram#^dxpub7hs2rel]]\n\n## Fav quotes\n\n- sanskrit language: _Kimapi Nu Janaahaa Vadishyanti. Tadeva Kaaryam Janaanaam_\n\n  > People will talk nonsense. It is, after all their job.\n\n- Dashrath continued, _I blamed you for my defeat. You suffered all your life, and yet you never rebelled. I thought it was because you were weak. `But weak people celebrate when twists of fate hurt their tormentors`. And yet you risked your life to protect me_\n\n- If a tactic has lead to failure, then persisting with it unquesttioningly in the wild hope of a different outcome, is nothing short of insanity.\n\n- Emperor Prithu had spoken of the ideal human archetype of the _aryaputra_, a gentleman, and the _aryaputri_, a lady, a prototypical human partnership of two strong individuals, who didn't compete for exact equality but were complimentary, completing each other. Two souls that were dependent on each other, giving each other purpose; `two halves of a whole`\n\n## vocab\n\n- penury: extreme poverty\n- immitent: about to happen, overanging\n  > Ram knew that the attack was imminent\n- hastily: quickly\n  > Ram hastily sped towards chambers\n- accost: confronted/ approach and address (someone) boldly or aggressively.\n  > En route, they were accousted by Sumitra\n- admonish: reprimand\n  > _Go back to sleep_, admonished an irritated Ram.\n- flabbergasted: astonished\n- stoic: determined not to complain or show emotions\n  > Lakshman stood stoic and tight lipped.\n- chagrined: humiliated\n  > A chagrined Lakshman fell silent.\n- assuaging: soothe/calm\n  > We are assuaging our conscience\n- nuance: subtle difference\n  > There is a nuance that you are missing\n- exacerbate: make worse\n  > Confusion was exacerbated when two laws contradicted each other.\n- befuddle: confused\n  > I was enjoying the obvious befuddlement of my fellow hikers.\n","n":0.052}}},{"i":20,"$":{"0":{"v":"Poem","n":1},"1":{"v":"\n- [Rainbow Bridge](https://www.rainbowsbridge.com/Poem.htm)","n":0.577}}},{"i":21,"$":{"0":{"v":"Daisy Jones & the Six","n":0.447},"1":{"v":"\n## Summary\n\nThe story revolves around a rock band called The Six, consisting of six members who aspire to make it big in the rock 'n' roll industry. The protagonist, Billy Dunne, is the lead singer of the band, and he strives to maintain sobriety since the birth of his first child. He and his wife Camila has a different level of trust which to be honest I found faulty.\n\nDaisy Jones is the female protagonist, a wealthy, beautiful, and talented singer-songwriter. She is also a drug addict, frequently consuming pills. After collaborating on a hit song called \"Honeycomb\" with The Six, she officially joins the band. As they continue writing songs together, Billy and Daisy develop feelings for each other, although they resist acting upon them, creating tension within the dynamic of the band. Despite the challenges, the band progresses and achieves success, becoming the number one rock band.\n\nHowever, just as they reach the pinnacle of their career, the band decides to part ways for the greater good. Each member goes on their own path and ultimately finds happiness.\n\n## Comments\n\nThe book is engaging and can be devoured overnight. The unique style of presenting the story as an interview, juggling narratives from band members, crew, and everyone involved, adds to its appeal. While I may have not fully grasped the intricacies of trust and love between Billy and his wife Camila, it is still a satisfying read for a Friday night.\n\nIt's worth noting that there is also a TV series adaptation of the book available on Prime. I skimmed through it but didn't find it particularly enjoyable.\n","n":0.061}}},{"i":22,"$":{"0":{"v":"Blogs","n":1},"1":{"v":"## Blogs\n\n- https://javascript.plainenglish.io/i-bet-you-dont-use-these-javascript-tricks-and-pratices-5ab5438ed4c8\n- https://www.codifytools.com/blog/react-npm-package\n- https://www.theverge.com/22684730/students-file-folder-directory-structure-education-gen-z\n- https://arxiv.org/pdf/2005.01716.pdf\n- https://ansuz.sooke.bc.ca/entry/23\n- https://www.fullstacklabs.co/blog/keyboard-shortcuts-with-react-hooks\n- https://css-tricks.com/creating-a-vs-code-theme/\n- https://epicreact.dev/\n- https://levelup.gitconnected.com/next-js-13-trpc-a-match-made-in-heaven-9764fadd1084\n- https://medium.com/@softvar/making-chrome-extension-smart-by-supporting-spa-websites-1f76593637e8\n- https://medium.com/codica/what-is-a-minimum-lovable-product-and-how-to-build-one-22cb61f67e8a\n- https://medium.com/geekculture/6-chatgpt-mind-blowing-extensions-to-use-it-anywhere-db6638640ec7\n\n## Handbook\n- https://aws.amazon.com/startups/start-building/how-to-build-a-public-facing-API/\n- https://frontendmasters.com/guides/front-end-handbook/2019/\n- https://adamtheautomator.com/github-actions-environment-variables/\n- https://colorhunt.co/palettes/dark\n- https://ethanmick.com/how-to-upload-a-file-in-next-js-13-app-directory\n- https://blog.logrocket.com/setting-up-monorepo-with-lerna-typescript/\n- https://www.youtube.com/watch?v=8OCEfOKzpAw\n- https://javascript.plainenglish.io/implementing-debouncing-in-react-f3316ef344f5\n- https://community.auth0.com/t/ultimate-guide-to-auth0-in-a-chrome-extension-popup/61362\n- https://tobiasahlin.com/blog/move-from-jquery-to-vanilla-javascript\n- https://www.section.io/engineering-education/dockerized-prisma-postgres-api/#create-and-run-a-prisma-server-with-docker\n- https://levelup.gitconnected.com/javascript-basics-how-to-use-rss-to-retrieve-medium-articles-d9c4d7c10387\n- https://www.section.io/engineering-education/logging-with-winston/\n- https://blog.sethcorker.com/traefik-routing-for-web-apps/\n- https://nipunamarcus.medium.com/micro-frontend-module-federation-with-vite-for-react-d2a8edad7f14\n\n\n## Cool projects\n- https://www.npmjs.com/package/@hufe921/canvas-editor\n- https://github.com/Gruntfuggly/calendar\n- https://github.com/cyrus8050/yt-dynamic-form/tree/master/src\n- https://github.com/gzomer/grammarly-extension\n- https://github.com/prakash-chakraborty/free-tshirts-stickers-and-swag-for-developers#t-shirts-shirt\n- https://github.com/manshu/reactjs-chrome-extension/blob/master/webpack.common.js\n\n\n## Apis\n\n### Zendesk\n- https://support.zendesk.com/hc/en-us/articles/4408845965210-Using-OAuth-authentication-with-your-application#topic_ar1_mfs_qk\n- https://support.zendesk.com/hc/en-us/articles/4408845965210-Using-OAuth-authentication-with-your-application\n- https://developer.zendesk.com/documentation/apps/publish-your-app-theme-or-bot/global_oauth_intro/#do-i-need-a-global-oauth-client\n- https://developer.zendesk.com/documentation/ticketing/managing-tickets/creating-and-updating-tickets/#protecting-against-ticket-update-collisions\n- https://developer.zendesk.com/documentation/ticketing/using-the-zendesk-api/adding-ticket-attachments-with-the-api/\n\n## Athena\n- https://fhir.epic.com/Documentation?docId=oauth2&section=BackendOAuth2Guide\n","n":0.146}}},{"i":23,"$":{"0":{"v":"A man called Ove","n":0.5},"1":{"v":"\n## Author\n- Fredrik Backman\n\n## Comments \n\n\"A Man Called Ove\" is a captivating novel that explores the life of Ove, a seemingly grumpy and isolated man. The book beautifully portrays the extraordinary in the ordinary, making even the mundane tasks come alive with the author's incredible writing style. Each chapter presents a unique perspective on life, delving into themes of loss, sorrow, and ultimately, hope.\n\nAs the story unfolds, readers are taken on a journey through Ove's past, gradually unraveling the reasons behind his seemingly cold demeanor. Through his encounters with neighbors and unexpected friendships, Ove's character undergoes a transformation, revealing his hidden depths and warmth.\n\nThe narrative skillfully weaves together past and present, creating a full circle of emotions and experiences. Certain phrases and motifs recur throughout the book, adding layers of meaning with each repetition and enhancing the reader's understanding of Ove's complex persona.\n\nThis is probably the best book that I read recently.\n\n## Quotes/Phrases I liked\n\n- Loving someone is like moving into a house,\" Sonja used to say. \"At first you fall in love with all the new things, amazed every morning that all this belongs to you, as if fearing that someone would suddenly come rushing in through the door to explain that a terrible mistake had been made, you weren't actually supposed to live in a wonderful place like this. Then over the years the walls become weathered, the wood splinters here and there, and you start to love that house not so much because of all its perfection, but rather for its imperfections. You get to know all the nooks and crannies. How to avoid getting the key caught in the lock when it's cold outside. Which of the floorboards flex slightly when one steps on them or exactly how to open the wardrobe doors without them creaking. These are the little secrets that make it your home.\n\n- Death is a strange thing. People live their whole lives as if it does not exist, and yet it's often one of the great motivations for living. Some of us, in time, become so conscious of it that we live harder, more obstinately, with more fury. Some need its constant presence to even be aware of its antithesis. Others become so preoccupied with it that they go into the waiting room long before it has announced its arrival. We fear it, yet most of us fear more than anything that it may take someone other than ourselves. For the greatest fear of death is always that it will pass us by. And leave us there alone.\n\n- And time is a curious thing. Most of us only live for the time that lies right ahead of us. A few days, weeks, years. One of the most painful moments in a person's life probably comes with the insight that an age has been reached when there is more to look back on than ahead. And when time no longer lies ahead of one, other things have to be lived for. Memories, perhaps.\n\n- But sorrow is unreliable in that way. When people don’t share it there’s a good chance that it will drive them apart instead.\n\n- They say the best men are born out of their faults and that they often improve later on, more than if they'd never done anything wrong.\n\n- Sorrow and loss are constant, but if we all had to go through our whole lives carrying them the whole time, we wouldn’t be able to stand it. The sadness would paralyze us. So in the end we just pack it into bags and find somewhere to leave it.\n\n- She often said that “all roads lead to something you were always predestined to do.” And for her, perhaps, it was something.\n\nBut for Ove it was someone.\n\n- So there were certainly people who thought that feelings could not be judged by looking at cars. But they were wrong.","n":0.039}}},{"i":24,"$":{"0":{"v":"Learning","n":1}}},{"i":25,"$":{"0":{"v":"Eng","n":1}}},{"i":26,"$":{"0":{"v":"Vocab","n":1}}},{"i":27,"$":{"0":{"v":"Word Power Made Easy","n":0.5},"1":{"v":"- **altruist**: person who selflessly cares about and helps others, without expecting anything in return\n- **asceticism** (/əˈsɛtɪsɪz(ə)m/):  noun Renunciation of worldly goods/possessions.\n- **misanthrope**(noun): a person who dislikes humankind.\n- **obstetrician**: physician who deliver babies or treat pregnant women.\n- **dexterous** (adjective): skillfull.\n> \"a dexterous keyboard player\"\n- **adroit** (adjective): skillfull\n> \"he was adroit at tax avoidance\"\n- **gauche** (adjective): unsophisticated and socially awkward. Noun: gaucherie\nIn french, gauche means left hand, hence the negative meaning associated.\n> \"a shy and gauche teenager\"","n":0.115}}},{"i":28,"$":{"0":{"v":"Meanings","n":1},"1":{"v":"\n\n- **eminence**: fame or acknowledged superiority within a particular sphere.\n> \"her eminence in cinematography\"\n- **abdicate** : renounce one's throne \n- **by virtue of** : because or as a result of.\n> By virtue of power vested in me, I hearby order for 2 pizzas\n- **in lieu of** : instead of\n- **by dint of**: by means of\n- **tyrannical**: oppressive\n> Joffery was a tyrannical ruler.\n","n":0.127}}},{"i":29,"$":{"0":{"v":"Grammer","n":1}}},{"i":30,"$":{"0":{"v":"Preposition","n":1},"1":{"v":"\nword placed before a noun or pronoun to show in what relation the person or thing denoted by it stands in regard of something else.\n\n- _for_, _from_, _in_, _on_ are often omitted before nouns of place or time.\neg: We did it last week. I cannot  walk a yard. Wait a minute.\n\n- no preposition before these words:\n> net, last each, every\n\n![[learning.eng.grammer.preposition.arrive-at-or-in#arrive-at-on-in,1]]\n\n![[Time at on In|learning.eng.grammer.preposition.time-at-on-in]]\n\n***\n### Preposition in workplace\n\n\n__She works__\n\n## at\n>a specific place\n\n- at a bank\n- at my desk\n- at the airport\n\n## for\n>employer or length of time\n\n- for Dendron\n- for 8 hours\n\n## with\n>people, teams\n\n- with Susan\n- IT dept\n\n## in\n>city, place\n\n- in lonon\n- in a factory\n\n## on\n- on a laptop\n- on a project \n- on 5th loor\n\n","n":0.094}}},{"i":31,"$":{"0":{"v":"Time at on In","n":0.5},"1":{"v":"\n## Time at on in\n\n        /\\\n       /at\\ specific time\n      / on \\ 1 day  date\n     /  in  \\ months, seasons, years etc \n    /________\\","n":0.204}}},{"i":32,"$":{"0":{"v":"Arrive at or In","n":0.5},"1":{"v":"\n## Arrive At on in?\n```\n\n             Arrive \n           /        \\\n         /            \\\n     WHEN               WHERE\n   /  |   \\             /     \\\nat    on    in         at       in\n5pm   Sun   July      airport   London\n     \n```\n### WHEN\n- at: most specific period of time: hour, minute.\n- on: wider then a specific time: one date, one day\n- in : year, month\n\n### WHERE\n- at: specific place. doesn't matter if the name is specified or not.\neg: airport, hotel \n- in: city, country\n\n\n## Exceptions\n\nNo prepositions for \nyesterday, last year, next week, home\n\n","n":0.113}}},{"i":33,"$":{"0":{"v":"Reverse Proxy","n":0.707}}},{"i":34,"$":{"0":{"v":"Traefik","n":1},"1":{"v":"\n## Resource\n\n- https://www.youtube.com/watch?v=mZbLvGQqEvY\n- https://www.youtube.com/watch?v=Gk9WER6DunE&list=RDQMss5YU5liZzs&start_radio=1\n","n":0.5}}},{"i":35,"$":{"0":{"v":"Nextjs","n":1}}},{"i":36,"$":{"0":{"v":"Version 13","n":0.707},"1":{"v":"\nroutes are defined in /app folder\n\n## use client directive\n\nThe \"use client\" directive is a convention to declare a boundary between a Server and Client Component module graph.\n\n## Server and Client Components\n\n- by default all components are server components.\n- Can be differenciated via \"use client\".\n\n### Why Server Components ?\n\n- better leverage server infrastructure. \neg: you can move data fetching to the server, closer to your database, and keep large dependencies that previously would impact the client JS bundle size on the server, leading to improved performance.\n- client-side JavaScript bundle size is reduced.\n\n### Advantages of server components\n\n- loads faster\n- smaller client bundles\n- SEO friendly\n- access to resources that client cannot use(DB, file system etc)\n\n### Disadvantages\n\n- not user friendly\n- no component state. Can't use the useState hook. Import will give error.\n- no lifecycle methods. Can't use useEffect.\n\n### Client components\n\nNow if you want to use useState in one of your component, write \"use client\" as the first line of your code, and nextjs will regard it as a client component.\n\n## Data Fetching in v-13\n\n```js\n// This request should be cached until manually invalidated.\n// Similar to `getStaticProps`.\n// `force-cache` is the default and can be omitted.\nfetch(URL, { cache: 'force-cache' });\n \n// This request should be refetched on every request.\n// Similar to `getServerSideProps`.\nfetch(URL, { cache: 'no-store' });\n \n// This request should be cached with a lifetime of 10 seconds.\n// Similar to `getStaticProps` with the `revalidate` option.\nfetch(URL, { next: { revalidate: 10 } });\n```","n":0.065}}},{"i":37,"$":{"0":{"v":"Routing","n":1},"1":{"v":"\nReference repo: https://github.com/Harshita-mindfire/next-js-learn\n\n- File system based routing.\n\n**Routing conventions:**\n\n1. All routes must be inside app folder.\n1. Each folder represents a segment of URL path.\n1. Routes files must be named either page.js or page.tsx\n1. 404 routes are handled by default.\n\n- Every page in app router receives route parameters through [[params | learning.nextjs.routing.Link#params]] prop. The type of params is a promise that resolves to an obj containing dynamic segments as key value pairs.\n\n\nWhen these conventions are followed, route file automatically becomes available as a route.\n\n- similarly for nested routes: \n\n![](/assets/images/nested-routes.png)\n\n## Dynamic routes\n\n- folder with name wrapped around with sqaure brackets [ ].\n\n```figma\n- app\n    - products\n        - page.tsx\n        - [productId]\n            - page.tsx\n    - page.tsx\n\n```\n\n- to now get the segment from http://localhost:3000/products/1\n```jsx\nimport React from \"react\";\n\nconst ProductDetails = async ({\n  params,\n}: {\n  params: Promise<{ productId: string }>;\n}) => {\n  const productId = (await params).productId;\n  return <div>Product details: {productId}</div>;\n};\n\nexport default ProductDetails;\n```\n\n### Nested dynamic routes\n\n![](/assets/images/routes.png)\n\n### Catch all segments\n\n- Dynamic Segments can be extended to catch-all subsequent segments by adding an ellipsis inside the brackets [...segmentName].\n\n```figma\n- shop\n  - [...slug]\n    - page.tsx\n```\n\n\n\nFor example, /shop/[...slug].js will match /shop/clothes, but also /shop/clothes/tops, /shop/clothes/tops/t-shirts, and so on.\n\nRoute\tExample URL\tparams\n- /shop/[...slug].js\t/shop/a\t{ slug: ['a'] }\n- /shop/[...slug].js\t/shop/a/b\t{ slug: ['a', 'b'] }\n- /shop/[...slug].js\t/shop/a/b/c\t{ slug: ['a', 'b', 'c'] }\n\n- To make the slugs optional, wrap the slug in double square brackets \"[[]]\"\n\n- `/shop/[[...slug]].js`\t/shop\t{ slug: undefined }\n\nFor example if you would try to access just the /shop, it would result in 404. To use the same page.tsx inside slug and also to make slugs optional, we can do the following:\n```figma\n- shop\n  - [[...slug]]\n    - page.tsx\n```\n\n## custom 404\n- not-found.tsx\n```tsx \nexport default function NotFound() {\n  return <h1> custom 404 page <>/h1>\n}\n```\nThe file with this route gets called automatically on 404. We can also explicitally call this as a func as well.\n\n**NOTE**: **NotFound component does not accept any props**\nUse `usePathname` from `next/navigation` hook to access the url segments.\n\n```tsx\nconst pathname = usePathname()\n\n```\n\n**NOTE** _To use usePathname() hook, the component must be a client component, hence add \"use-client\" directive at the top of the page._\n\n\n\nLet's say we want to call 404 page if the review id is > 100 (eg: /products/1/reviews/1000 )\n\n```tsx\nimport {notFound } from \"next/navigation;\n\nexport default async function ProductReview({params} : {params: Promise<{productId: string; reviewId: string}>}) {\n  const { reviewId} = await params;\n  if(parseInt(reviewId) > 100) {\n    notFound()\n  }\n  return <h1> Review no {reviewId} of {productId} </h1>\n} \n```\n\n\n## Private folders\n\n- starts with underscore _\n- the folder and its sub folders are excluded from routing.\n\n### uses\n- separating UI logic from routing logic\n- consistent way to organize internal files.\n\n## Route groups\n- logically organize our routes and project files without impacting the URL structure.\n- only way to share layouts between routes without affecting the URL.\n- also helps us to apply routes selectively to specific parts of app(multiple root layout)\n\n_the folder wrapped in () tells nextjs to use this as an organizational tool only and exclude it from the url. Now the urls inside it are still accessed with http://localhost:3000/register and not /auth/register_\n\n```figma\n- (auth) \n  - register\n    - page.tsx\n  - login\n    - page.tsx\n  - forgotpassword\n    - page.tsx\n```","n":0.045}}},{"i":38,"$":{"0":{"v":"Templates","n":1},"1":{"v":"Templates are similar to layouts in that they are also UI shared between multiple pages in you app.\n\n**key difference** is whenever user switches between routes sharing a template, you get a complete fresh start.\n- new template instance is mounted\n- state is cleared\n- DOM elements are recreated.\n- effects are resyncronized.\n\nCreated via: \n- naming template.tsx\n- recieves children props.\n\n\n![](/assets/images/templates.png)","n":0.134}}},{"i":39,"$":{"0":{"v":"Route Handlers","n":0.707},"1":{"v":"- app router also let us create **custom request handlers for your routes**.\n- unlike page routes, which returns HTML content, Route handlers let us build RESTFUL endpoints with complete control over response.\n- Just like Node + express app.\n- good for making external API request\n- runs server side, hence the secret keys are also secured and never reaches browser\n- supports **GET, POST, PUT, PATCH DELETE, HEAD, OPTIONS.**\n- returns 405 method not allowed response for unsupported method.\n\n- we are studing app router here, but if you remember page router, route handlers are equivalent to /api routes.\n\n## Conventions\n- create  `route.ts` file inside app directory.\n- **the route.ts file in the same route segment level as page.tsx will result in a conflict and page.tsx will not be served. Instead the route handler handles the request**\n\n- the Handler functions takes 2 parameters\n    - request object => request: NextRequest \n    - context object containing route params => {params} : {params: Promise<{id: string}>}\n\n\n## Dynamic route handlers\n\n```graphql\n\n- app\n    |___comments\n         |_____route.ts\n                 |_____[id]\n                        |______route.ts\n```\n\n### Examples\n- **contents of /app/comments/route.ts:**\n\n```ts\n// route handler\nimport { comments } from \"./data\";\n// Get method\nexport async function GET() {\n  return Response.json(comments);\n}\n\n// post method\nexport async function POST(request: Request) {\n  const content = await request.json();\n  // similar to DB call\n  const newComment = {\n    id: comments.length + 1,\n    text: content.text,\n  };\n  comments.push(newComment);\n  return new Response(JSON.stringify(newComment), {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    status: 201,\n  });\n}\n```\n\n- **contents of /app/comments/[id]/route.ts**\n\n```ts\nimport { NextRequest } from \"next/server\";\n\n// dynamic route handle, get comment with a specific id\nexport async function GET(\n  _request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  const { id } = await params;\n  const comment = comments.find((comment) => comment.id === parseInt(id));\n  return Response.json(comment);\n}\n\n// patch\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  const body = await request.json();\n  const { id } = await params;\n  const { text } = body;\n  const index = comments.findIndex((comment) => comment.id === parseInt(id));\n  comments[index].text = text;\n  return Response.json(comments[index]);\n}\n\nexport async function DELETE(\n  _request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  const { id } = await params;\n  const index = comments.findIndex((comment) => comment.id === parseInt(id));\n  const deletedData = comments[index];\n  comments.splice(index, 1);\n  return Response.json(deletedData);\n}\n```\n\n## URL Query Params\n\nFetching the params after ?\n\n```ts\nimport { NextRequest } from \"next/server\";\nimport { comments } from \"./data\";\n\nexport async function GET(request: NextRequest) {\n  const searchParams = request.nextUrl.searchParams;\n  const query = searchParams.get(\"query\");\n  const filteredComments = query\n    ? comments.filter((comment) => comment.text.includes(query))\n    : comments;\n  return Response.json(filteredComments);\n}\n```\n\n## Headers\n- HTTP headers represents the metadata associated with req and response\n  - **Request Headers**: sent by client(like web browser) to server. Sends essential info about request to servers. eg: accept, user-agent, authorization etc.\n\n  - **Response Headers**: sent back from server to client. \n      provide info about the server and the data being sent in response.\n      eg: \"Content-Type\",\n\n### Examples\n\n```ts\nimport { headers } from \"next/headers\"\nexport async function GET(request: NextRequest) {\n  const headerData = await headers();\n  const token = headerData.get(\"Authorization\");\n  console.log(\"token\", token);\n  const query = searchParams.get(\"query\");\n  return new Response(\"<h1> Hi</h1>\", {\n    headers: {\n      \"Content-Type\": \"text/html\",\n    },\n  });\n}\n```\n\n## Cookies\n- small piece of data that server sends to user's web browser.\n- browser can store cookies and send it back to server with future request.\n\n3 main purpose\n- managing user session (like user login and shopping cart)\n- handling personalizations(such user preferences and themes)\n- tracking (like recording and analyzing user behaviour)\n\n### Example: Setting and retrieving via headers and request\n\n```tsx\n//setting a cookie\nreturn new Response(JSON.stringify(comment), {\n    headers: {\n      \"Set-Cookie\": \"theme=dark\",\n    },\n  });\n```\n\n```tsx\n//retrieving cookie\nexport async function GET(\n  request: NextRequest,\n) {\n  const cookies = request.cookies.get(\"theme\");\n  console.log(cookies); // { name: 'theme', value: 'dark' }\n```\n\n### Example: setting using cookies from next/headers\n\n```tsx\nimport { cookies } from \"next/headers\";\n\ncookieStore.set(\"resultsPerPage\", \"20\");\nconsole.log(cookieStore.get(\"resultsPerPage\"));\n```\n\n## redirect in route handlers\n\n```ts\nimport {redirect} from \"next-navigation\"\nexport async function GET() {\n redirect('/api/v2/users')\n}\n```\n\n## Caching\n\nroute handlers are not cached by default but you can opt for caching when using **GET** method.\n- Caching **only** works with **GET** methods. Other HTTP methods are never cached.\n\n\n## middleware\n\n- intercepts the request response cycle.\n- enables redirects, rewrites.\n- can be used to manipulate both header and cookies\n- written in src folder\n\n","n":0.039}}},{"i":40,"$":{"0":{"v":"Parallel Routes","n":0.707},"1":{"v":"- Parallel routes allow you to **render multiple pages in parallel under different named slots** (routes) within a single layout\n- They’re used when you want to render multiple views at once that are independent of each other but share layout structure.\n- They’re defined in the app/ directory using the `@slot` naming convention.\n- **slots are received as props in the layout**.\n- the children prop is also a slot by default.\n\n```graphql\napp/\n├── layout.js\n├── @analytics/\n│   └── page.js\n├── @main/\n│   └── page.js\n\n```\n\n## Important features\n- **independent route handling**\n    - each slot can have its own loading, error states. This is useful in scenarios where different sections of the page load at varing speed and can have different errors\n\n    ![parallel routing](/assets/images/parallel-route.png) \n\n- **subnavigation in routes**: Each slot can function as mini application, has its own navigation and state management.\n    - users can interact, sort, filter with a slot, navigating through pages without affecting others.\n\n    ![alt text](/assets/images/sub-navigation.png)\n\n\n## Unmatched routes\n- **Navigation through UI**(like clicking links): When traversed by clicking a link, Nextjs keeps showing whatever was there previously in the unmatched routes\n\n- **Page reload**: Next.js looks for a **default.tsx** in each unmatched slot to render. This is a critical file as it serves as a fallback. 404 is received when default.tsx is not found on reload.\n\n\n## Conditional routes\nfor eg, you want to display dashboard for authenticated users but login page for others. Condn routes helps us to do with while maintaining completly separate code on same URL.\n\neg: https://github.com/gopinav/Next.js-15-Tutorials/blob/main/routing-demo/src/app/complex-dashboard/layout.tsx\n\n\n## Usage\nif you're building:\n- Modal-based routing\n- Split-view dashboards\n- Multi-panel layouts with deep linking\n- Nested or partially refreshing UIs\n\nthen parallel routes are a cleaner, more powerful tool for structuring and scaling the app.\n\n| Feature\t| Normal Component\t| Parallel Routes |\n|- | -|- |\nRendering based on prop changes | \t✅\t| ✅\nIndependent navigation |\t❌ | \t✅\nLayout preservation on route change | \t❌\t| ✅\nNative streaming support\t| ❌\t | ✅\nCode-splitting per UI section | \t🟡 Manual\t| ✅ Auto\nIdeal for modals, tabs, sidebars |\t❌ Workaround | \t✅ Cleanly\n\n\n\n\n## Doubts clarification\n\n🧩 1. Rendering Independence vs. Navigation Independence\nYou're right:\n\n✅ Normal components won’t re-render if props/state don’t change.\n\nBUT:\n\n❌ Normal components live in the same route, so any route change will re-trigger the layout and all child components will re-render (or reload data, if they use useEffect, useRouter, or fetch() in getServerSideProps).\n\n✅ Parallel routes let you navigate just one slot (e.g., side panel or modal) without re-rendering or affecting the rest of the page.","n":0.051}}},{"i":41,"$":{"0":{"v":"Intercepted Routes","n":0.707},"1":{"v":"\n- advanced routing mechanism that allows you to load a route from another part of application within current layout.\n- particularly useful when you want to display new content while keeping ypur user in same context.\n- let you show alternate UI by preserving context but defaults to the standard UI on direct page loads.\n- **intercepting routes are created in source folder**\n- these routes **require a specific prefix** based on below conventions.\n\n\n## Conventions\n\n- use (.) to match segments at same level\n- use (..) to match one level above \n    > similar to how we relative import files ./file.tsx for same level, ../file.tsx on level above\n- use (..)(..) to match 2 level above\n- use (...) to match segments from root app directory.\n\n```graphql\n\napp/\n├── layout.js\n├── folder1\n│   └── page.js\n|   |\n|   └── (..)f3 // intercepting route for f3\n|   |      └── page.js \n|   |\n|   └── (.)f2 // dest. route(f2) is present at same level with intercepting here\n|   |      └── page.js // intercepted UI\n|   |\n|   └── f2\n|       └── page.js // Original f2 UI\n|       |\n|       └── (..)(..)f4 // intercepting f4 present at 2 level above.\n|\n├── f3 // original f3 UI\n│   └── page.js\n|\n├── f4 // original f4 UI\n│   └── page.js\n\n```\n\nFrom this above structure the intercepted UI is displayed if we try to load UI of f2 or f3 from f1\neg:\n```tsx\n<Link href={\"/f1/f2\"}>F2 </Link>\n<Link href={\"/f3\"}>F3 </Link>\n```\n\nexample:\n![intercepting routes](/assets/images/intercepting-routes.png)\n","n":0.068}}},{"i":42,"$":{"0":{"v":"Metadata","n":1},"1":{"v":"# Routing metadata\n\n- metadata api is powerful feature that lets us define metadata for each page(good for SEO)\n- 2 ways to handle metadata in layout.tsx or page.tsx files.\n  - static metadata object\n  - dynamic generateMetadata function\n\n  ## Configuring metadata\n  **metadata rules**\n  - both layout, page.tsx can export metadata. Layout metadata applies to all its pages, while page metadata is applied tp that page.\n  - metadata follows top-down order. starting from root level.\n  - they merge together if metadata exists in multiple pages. For matching properties the page metadata overrides layout metadata.\n  - does not work with client components(that have use-client directive). To handle metadata in client components, separate the logic that requires client component as a separate component and import it in page.tsx.\n\n### Static metadata\n  ```tsx\n  export const metadata = {\n  title: \"Next.js\",\n  description: \"Generated by Next.js\",\n};\n  ```\n\n### Dynamic metadata\n  - when metadata is dependent on dynamic info like current route params, external data or metadata defined in parent segments.\n\n  ```tsx\n\n  import { Metadata} from \"next\"\n\n  export const generateMetadata = async({params}: Props): Promise<Metadata> => {\n    const id= (await params).productId;\n    return {\n      title: `Product ${id}`\n    }\n  }\n\n  type Props = {\n    params: Promise<{productId: string}>\n  }\n  ```\n\n  ## Title metadata\n\n  The title property in metadata can be defined as :\n  - a string\n  - an object : it can have 3 keys:\n        - default\n        - template\n        - absolute\n\n### String title\n  ```tsx\n  export const metadata = {\n  title: \"Next.js\",\n};\n```\n### Object title\n\n- **default**: the default title is defined in layout.tsx, the children page that does not have a title metadata, defaults to this value.\n```tsx\n  export const metadata = {\n  title: {\n    default: \"Next.js Tutorial\"\n  }\n};\n```\n- **template** : Consistent way of formatting the title. It allows us to have prefix/suffix. \nfor eg, if the layout.tsx has the following metadata\n```tsx\n  export const metadata = {\n  title: {\n    default: \"Next.js Tutorial\",\n    template: \"%s | ByteSizedFrontend\"\n  }\n};\n```\n\nNow if the children page has title metadata = \"Routing\", the title in the actual page metadata will come as: `Routing | ByteSizedFrontend`\n\n- **absolute**: to breakthrough the template, use absolute in children route metadata\nfor eg, if the layout metadata remains same as above and I have the child page.tsx as:\n```tsx\n  export const metadata = {\n  title: {\n    absolute: \"Routing example\"\n  }\n};\n```\nThe final title would appear as `Routing example`.\n","n":0.052}}},{"i":43,"$":{"0":{"v":"Loading UI","n":0.707},"1":{"v":"\nThis file helps us create loading states that users see while waiting for content to load in a specefic route segment.\n\n- appears instantly\n- add loading.tsx\n","n":0.2}}},{"i":44,"$":{"0":{"v":"Layouts","n":1},"1":{"v":"\n- Pages are route specific UI components\n- Layouts is a UI that is shared between multiple pages in your app like header, footer etc.\n\n## Creation\n- default export a react component from `layout.tsx` file.\n- takes a children prop populated with page content.\n\neg: root layout. any structure in here goes to all the pages.\nThe children prop changes based on the route accessed.\n```tsx\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <header\n          style={{\n            backgroundColor: \"#f4f9f7\",\n            textAlign: \"center\",\n            padding: \"1rem\",\n          }}\n        >\n          Header\n        </header>\n        {children}\n        <footer\n          style={{\n            backgroundColor: \"ghostwhite\",\n            textAlign: \"center\",\n            padding: \"1rem\",\n          }}\n        >\n          Footer\n        </footer>\n      </body>\n    </html>\n  );\n}\n\n\n```\n\n## Nested Layout\nlayout.tsx inside a route is specific for that route.\n\n## Multiple root layout.\nIf we want let say 2 of our route to have one layout and all the others to have another, we would require multiple root layouts,\nfor this, we take help of router groups.\n\nEg: we need only footer for login and register route, for customers, we want both header and footer.\n\n```figma\n- app\n  - (auth)\n    - login\n      - page.tsx\n    - register\n      - page.tsx\n    layout.tsx //AuthRootLayout\n  - (marketing)\n    - customers\n      - page.tsx\n    - suppliers\n      - page.tsx\n    - page.tsx //global entry page\n    - layout.tsx //MarketingRootLayout\n```\n\n\n\n## Handling errors\n- ![[learning.nextjs.routing.error-handling#handling-errors-in-layouts]]\n\n\n","n":0.071}}},{"i":45,"$":{"0":{"v":"Error Handling","n":0.707},"1":{"v":"- are **client components**\n- error.tsx file\n- receives error and reset prop.\n- error is of type Error and reset is a function that attempts to retry rendering the component.\n- enables you to attempt to recover from from an error without requirring a full page review.\n\n![](/assets/images/component-hierarchy.png)\n\n```tsx\n\"use client\";\nimport { useRouter } from \"next/navigation\";\nimport { startTransition } from \"react\";\n\nconst ErrorBoundary = ({\n  error,\n  reset,\n}: {\n  error: Error;\n  reset: () => void;\n}) => {\n  const router = useRouter();\n  const reload = () => {\n    startTransition(() => {\n      router.refresh();\n      reset();\n    });\n  };\n  return (\n    <div>\n      Error is: {error.message}\n      <button onClick={reload}>Try again</button>\n    </div>\n  );\n};\n\nexport default ErrorBoundary;\n\n\n```\n\n## Handling errors in layouts\n- The error boundary won't catch error thrown in layout.tsx within the same segment(in the same folder) because of the component rendering hierarchy.\n- layout sits above the error boundry in the component tree.\n- to resolve, move the error boundry at the parent of layout.\n\nSo how do we handle errors that are thrown from root layout? Since it does not have a parent, how do we catch it?\n\nvia **global-error.tsx** that sits in the root directory. \n\n## Global error boundry\n- global-error.tsx\n**NOTE: IT only works in production mode.**\n- It needs its own html and body tags to be rendered since it replaces our root layout.\n","n":0.07}}},{"i":46,"$":{"0":{"v":"Link","n":1},"1":{"v":"- Nextjs provide `<Link>` component for client side navigation.\n- inherits HTML's `<a>` tag.\n- imported from \"next/link\"\n\n```tsx\nimport Link from \"next/link\";\nimport React from \"react\";\n\nconst Home = () => {\n  return (\n    <div>\n      Welcome Home\n      <Link href=\"/about\">About</Link>\n    </div>\n  );\n};\n\nexport default Home;\n```\n\n- **replace** attribute : replaces overrides the current history entry instead of adding a new one `<Link href=\"\" replace>`.\n\n## Styling Links\n\n```tsx\n\"use client\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport React from \"react\";\nimport \"./layout.css\";\n\nconst linksHref = [\n  { href: \"/login\", title: \"Login\" },\n  { href: \"/register\", title: \"Register\" },\n];\n\nconst AuthLayout = ({ children }: { children: React.ReactNode }) => {\n  const pathname = usePathname();\n  return (\n    <div>\n      {linksHref.map((item, index) => {\n        const isActive =\n          item.href === pathname ||\n          (pathname.startsWith(item.href) && item.href !== \"/\");\n        return (\n          <Link\n            href={item.href}\n            key={index}\n            className={isActive ? \"active\" : \"\"}\n          >\n            {item.title}\n          </Link>\n        );\n      })}\n      {children}\n    </div>\n  );\n};\n\nexport default AuthLayout;\n\n```\n\n## params\n\nparams is a promise that resolves to an ob j containing the dynamic route parameters (like id)\n\n## searchParams:\n- promise that resolves to an obj containing query params (like filters and sorting)\n\nBelow is an example through server component.\n\n\n```tsx\nimport Link from \"next/link\";\nimport React from \"react\";\n\nconst ArticleDetails = async ({\n  params,\n  searchParams,\n}: {\n  params: Promise<{ articleId: string }>;\n  searchParams: Promise<{ lang: string }>;\n}) => {\n  const { articleId } = await params;\n  const { lang } = await searchParams;\n  return (\n    <div>\n      Title: {articleId} in language {lang}\n      <div>\n        <Link href={`/articles/${articleId}?lang=en`}>Read in english</Link>\n        <Link href={`/articles/${articleId}?lang=fr`}>Read in French</Link>\n        <Link href={`/articles/${articleId}?lang=es`}>Read in Spanish</Link>\n      </div>\n    </div>\n  );\n};\n\nexport default ArticleDetails;\n```\n\n- await params and search params is only possible in server components. Next.js Client Components themselves cannot be defined as async functions, meaning you cannot directly use await at the top level of a Client Component's render function. This is a fundamental distinction between Server Components and Client Components in Next.js.\nHowever, this does not mean you cannot use async/await within Client Components at all. You can use async/await within. for example in useEffect/eventhandlers etc.\n\n```tsx\n\"use client\";\n\nimport Link from \"next/link\";\nimport React from \"react\";\nimport { use } from \"react\";\n\nconst ArticleDetails = ({\n  params,\n  searchParams,\n}: {\n  params: Promise<{ articleId: string }>;\n  searchParams: Promise<{ lang: string }>;\n}) => {\n  const { articleId } = use(params);\n  const { lang } = use(searchParams);\n  return (\n    <div>\n      Title: {articleId} in language {lang}\n      <div>\n        <Link href={`/articles/${articleId}?lang=en`}>Read in english</Link>\n        <Link href={`/articles/${articleId}?lang=fr`}>Read in French</Link>\n        <Link href={`/articles/${articleId}?lang=es`}>Read in Spanish</Link>\n      </div>\n    </div>\n  );\n};\n\nexport default ArticleDetails;\n```\n\n\n## Navigating Programmatically\n\n- **useRouter**\n- **redirect**\n\n### useRouter\n\n```tsx\n\"use client\";\nimport { useRouter, redirect } from \"next/navigation\";\nimport React, { use } from \"react\";\n\nconst OrderProduct = ({\n  searchParams,\n}: {\n  searchParams: Promise<{ country: string }>;\n}) => {\n  const router = useRouter();\n  const { country } = use(searchParams);\n  console.log(\"country\", country);\n  const handleClick = () => {\n    router.push(\"/\");\n  };\n  return (\n    <div>\n      <button onClick={handleClick}>Order Product</button>\n      {country === \"in\" ? redirect(\"/\") : redirect(\"/about\")}\n    </div>\n  );\n};\n\nexport default OrderProduct;\n\n\n```","n":0.047}}},{"i":47,"$":{"0":{"v":"Rendering","n":1},"1":{"v":"- CSR\n- SSR\n- SSG\n- suspense SSR\n- React server components\n\n\n## Client side rendering\n- The approach where browser(client) transforms react components into what you see on screen.\n\n![alt text](/assets/images/CSR.png)\n\n### Drawbacks of CSR\n- **SEO**: When SEs crawl your site, they are looking for HTMl content to understand what the page is about. But with CSR, the page source is basically an empty div. Since content relies on JS to render on Client site, SE struggles to index it properly.\n\n- **Performance and UX**: users can suffer from slow load times, as their browser download, parse and execute JS before seeing any meaningful content.\n\n\n\n\n\n## Server side solutions\n\n![alt text](/assets/images/SSR.png)\n\n1. Static Site Generation (SSG)\n \n2. Server-Side Rendering (SSR)\n \nSSG happens during build time when you deploy your application to the server. This results in pages that are already rendered and ready to serve. It's perfect for content that stays relatively stable, like blog posts\n \nSSR, on the other hand, renders pages on-demand when users request them. It's ideal for personalized content like social media feeds where the HTML changes based on who's logged in.\n\n### Hydration\n(react adding interactivity to the server rendered HTML)\n \nDuring hydration, React takes control in the browser and reconstructs the component tree in memory, using the server-rendered HTML as a blueprint\n \nIt carefully maps out where all the interactive elements should go, then hooks up the JavaScript logic\n \nThis involves initializing application state, adding click and mouseover handlers, and setting up all the dynamic features needed for a full interactive user experience.\n\n### Drawbacks of SSR\n \n- **You have to fetch everything before you can show anything**\n \nComponents cannot start rendering and then pause or \"wait\" while data is still being loaded\n \nIf a component needs to fetch data from a database or another source (like an API), this fetching must be completed before the server can begin rendering the page\n \nThis can delay the server's response time to the browser, as the server must finish collecting all necessary data before any part of the page can be sent to the client\n\n- **You have to load everything before you can hydrate anything**\n \nFor successful hydration, where React adds interactivity to the server-rendered HTML, the component tree in the browser must exactly match the server-generated component tree\n \nThis means that all the JavaScript for the components must be loaded on the client before you can start hydrating any of them.\n\n- **You have to hydrate everything before you can interact with anything**\n \nReact hydrates the component tree in a single pass, meaning once it starts hydrating, it won't stop until it's finished with the entire tree\n \nAs a consequence, all components must be hydrated before you can interact with any of them.\n\n\n### Suspense SSR\n\nUse the `<Suspense>` componenet to unlock 2 major SSR features:\n- HTML streaming on server\n- Selective hydration on the client.\n\nThis solves the 3 all or nothing concerns of SSR: \n \n1. having to load the data for the entire page. \n    > React 18+ can fix this via `<Suspense>`\n \n2. loading the JavaScript for the entire page\n    > can be fixed with code splitting.\n \n3. hydrating the entire page.\n    > Suspense also allows React to let hydrate other parts of the page before the section wrapped within it is ready. This is what we call: **selective hydration**. In scenarios where multiple components are awaiting hydration, React prioritizes hydration based on user interactions\n \nat once, create an \"all or nothing\" waterfall problem that spans from the server to the client, where each issue must be resolved before moving to the next one\n \n\n### Drawbacks of suspense ssr\nraises 3 question:\n1. do user still need to download so much data(loading entire webpage bit by bit)\n2. should all components be hydrated, even those that don't need interactivity(static content components)\n3. Shouldn't we be leverging our servers more(user's device do bulk of the JS work which can slow things down)\n\n\n### React Server components\n![[learning.nextjs.rendering.react-server-components]]\n\n\n\n\n","n":0.039}}},{"i":48,"$":{"0":{"v":"React Server Components","n":0.577},"1":{"v":"**The app router in Nextjs is built entirely on RSC architecture. All these features are built into the latest version of Nextjs**\n## Takeaways\n- React Server Components offer a new approach to building React apps by separating components into two: Server Components and Client Components\n \n- Server Components run exclusively on the server - they fetch data and prepare content without sending code to the browser\n \n- This makes your app faster because users download less code\n \nHowever, they can't handle any interactions\n \n- Client Components, on the other hand, run in the browser and manage all the interactive parts like clicks and typing\n \n- They can also get an initial server render for faster page loads\n\n## React Server components\n\nevolution of react CSR--> SSR ---> Suspense SSR---> RSC\n\n- represents a new architechture, which leverages the strengths of both server and client environments to optimize efficiency, load times and interactivity..\n\n- Introduces dual models:\n    - client components\n    - server components\n\nThis distiction is based on the environment they would execute and the specific systems they are designed to interact with, for eg: browser apis, hooks, goes in client components.\n\n### Client components\n- first rendered on the server then on the client.\n- in nextjs, use \"use client\" to differentiate the components as a CC.\n\n### Server components\n- Server Components represent a new type of React component specifically designed to operate exclusively on the server\n- And unlike client components, their code stays on the server and is never downloaded to the client \n- This design choice offers multiple benefits to React applications\n\n**Benefits**\n- **Smaller bundle sizes**: Since Server Components stay on the server, all their dependencies stay there too. This is fantastic for users with slower connections or less powerful devices since they don't need to download, parse, and execute that JavaScript.\n Plus, there's no hydration step, making your app load and become interactive faster\n- **Direct access to server-side resources**: Server Components **can talk directly to databases and file systems**, making data fetching super efficient without any client-side processing.\nThey use the server's power and proximity to data sources to manage compute-intensive rendering tasks.\n- **Enhanced security**: Since SC only run on server, sensitive data like API keys never leave the server.\n- **Improved data fetching**: since SC are closer to data source, this can improve performance by reducing time it takes to fetch data needed for rendering.\n- **Caching**: can cache the results and reuse them for different users and requests\n- **Faster initial load & FCP**: By generating HTML on the server, users see your content immediately- no waiting for JS to download and execute.\n- **Improved SEO**\n- **Efficient Streaming**: SC can split the rendering process into chunks that stream to client as they're ready. This means users start seeing content faster instead of waiting for entire page to render on the server.\n\n\nServer components handle data fetching and static rendering, client components take care of rendering the interactive elements.\n\n\n \n\n### rsc payload\n\n- these files have a special JSOn format are generated by react for each route and represent your virtual DOM in a super compavct way using abbreviations and internal references.\n- fr server components it also includes the actual rendered result.\n- CC rsc payload is a bit different,it has placeholders showing where the CC should go + refernces to their JS files\n\n\n","n":0.043}}},{"i":49,"$":{"0":{"v":"Server Rendering Strategies","n":0.577},"1":{"v":"- Static rendering\n- dynamic rendering\n- streaming\n\n# Static rendering\n \nStatic rendering is a server rendering strategy where we generate HTML pages when building our application\n \nThink of it as preparing all your content in advance - before any user visits your site\n \nOnce built, these pages can be cached by CDNs and served instantly to users\n \nWith this approach, the same pre-rendered page can be shared among different users, giving your app a significant performance boost\n\n**Usage**: blog post, e-commerce product listings, documentation(like the one you are currently reading, it is statically rendered.) \n\n## How to statically render\n- default strategy in app router. all routes are automatically prepared at build time without any additional help.\n\n## Summary\n \nStatic rendering is a server rendering strategy where we generate HTML pages when building our application\n \nThink of it as preparing all your content in advance - before any user visits your site\n \nOnce built, these pages can be cached by CDNs and served instantly to users\n \nWith this approach, the same pre-rendered page can be shared among different users, giving your app a significant performance boost\n\n# Dynamic rendering\n\n- Dynamic rendering is a strategy where the HTML is generated at request time\n \n- Next.js automatically enables it when it encounters dynamic functions like **cookies, headers, connection, draftMode, after or searchParams** prop\n \n- Dynamic rendering is great for personalized content like social media feeds\n \n- You don't have to stress about choosing between static and dynamic rendering\n \n- Next.js automatically selects the optimal rendering strategy for each route based on the features and APIs you're using\n \n- if you want to force a route to be dynamically rendered, you can use the \n```jsx\nexport const dynamic = 'force-dynamic\" config at the top of your page\n```\n\n## generateStaticParams\n\nlet you to pre-render static routes for dynamic segments. Runs at build time. Hnadles multiple dynamic segments.\n- returns an array of objects where the keys are dynamic route parameters. \n- givings us a nice performance boost.\n\n\n- app/products/[id]/page.tsx\n```tsx\nexport default async function ProductPage({params}: {params: Promise<{id: string}>}) {\n\n    const {id} = await params\n    return <h1> Product {id} details\n}\n```\n\nbuilding this, the product details page is dynamically rendered, since nextjs doesn't know what id value it would need until someone requests a specific url.\n\n**To generate a few pages statically, we can use `generateStaticParams` function. It helps with frequently accessed pages, they are pre-rendered and ready to be served instantly.** \n\n- app/products/[id]/page.tsx\n```tsx\n\n// we are statically passing these 3 params, now these 3 pages will be statically generated.\n\nexport async generateStaticParams() {\n    return [{id: \"1\"}, {id: \"2\"}, {id: \"3\"}]\n}\n\nexport default async function ProductPage({params}: {params: Promise<{id: string}>}) {\n\n    const {id} = await params\n    return <h1> Product {id} details\n}\n```\n\n- for routes with multiple dynamic route segments:\nSuppose we have a product catalog with categories and products\n \n/products/[category]/[product]/page.tsx\n\n```tsx \nexport async function generateStaticParams() {\n \nreturn [\n    { category: \"electronics\", product: \"smartphone\" },\n    \n    { category: \"electronics\", product: \"laptop\" },\n    \n    { category: \"books\", product: \"science-fiction\" },\n    \n    { category: \"books\", product: \"biography\" },\n]; \n}\n```\n\n## dynamicParams\n\n### Without dynamicParams defined (default: true) or With dynamicParams = true\n\n- **Behavior**: If you don’t define dynamicParams, Next.js assumes dynamicParams = true.\n\n- **Effect**:\nIf a user requests a dynamic route (e.g. /blog/123) that wasn’t returned by generateStaticParams, Next.js will try to dynamically generate the page at runtime.\n\nThis is useful if you expect routes outside the pre-generated list to still work.\n\n✅ Example: // app/blog/[id]/page.tsx\n\n\n```tsx\nexport async function generateStaticParams() {\n  return [{ id: \"1\" }, { id: \"2\" }]; // prebuilds /blog/1 and /blog/2\n}\n// dynamicParams not defined → defaults to true\n\n```\n\nVisiting /blog/3 → Page still works (fetched at runtime).\n\n### With dynamicParams = false\n\n- **Behavior**: You are telling Next.js that only the params returned from generateStaticParams are valid.\n\n- **Effect**: If a user requests a route not in generateStaticParams, they’ll get a 404 instead of dynamic generation.\nThis is useful when your routes are fixed/finite (e.g. product categories, locales).\n\n✅ Example:\n\n```tsx\n// app/blog/[id]/page.tsx\nexport const dynamicParams = false; // 🚫 no runtime params\nexport async function generateStaticParams() {\n  return [{ id: \"1\" }, { id: \"2\" }];\n}\n```\n- Visiting /blog/1 or /blog/2 → Works (prebuilt).\n- Visiting /blog/3 → 404 (no fallback)\n\n\n**🔑 Summary**\n\n- **generateStaticParams + dynamicParams=false** → ✅ only prebuilt routes, ❌ strict 404 for missing ones.\n\n- **generateStaticParams + dynamicParams=true** → ✅ prebuilt routes, but missing ones will render dynamically or statically depending on presence of dynamic functions in the page.\n\n- **No generateStaticParams at all** → (by default is true)\n\n# Streaming\n- Streaming is a strategy that allows for progressive UI rendering from the server\n- Work is broken down into smaller chunks and streamed to the client as soon as they're ready\n - This means users can see parts of the page right away, without waiting for everything to load\n \n- It's particularly powerful for improving initial page load times and handling Ul elements that depend on slower data fetches, which would normally hold up the entire route\n- built in with App router\n- use <Suspense> from react to achieve this","n":0.035}}},{"i":50,"$":{"0":{"v":"Server and Client Composition Patterns","n":0.447},"1":{"v":"\nScenarios where we can use client or server components.\n## Server components\n- fetching data\n- accessing backend resources directly\n- keeping sensitive information (like access tokens and API keys) secure on the server\n- handling large dependencies server-side - which means less JavaScript for your users to download\n\n## Client components\n \n- adding interactivity\n- handling event listeners (like onClick(), onChange(), etc.)\n- managing state and lifecycle effects (using hooks like useState(), useReducer(), useEffect()) \n- working with browser-specific APIs \n- implementing custom hooks\n- Using React class components\n\n\nBut the differentiation isn't that black and white always. **Here are some patterns to keep in mind:**\n\n# Server component patterns\n\n## Server-only code\n- Some code is specifically designed to run exclusively on the server\n \n- Think about modules or functions that work with multiple libraries, handle environment variables, communicate directly with databases, or process sensitive information.\n \n- Since JavaScript modules can be shared between Server and Client Components, code meant for the server could accidentally find its way to the client\n \n- This is bad news as it can bloat your JavaScript bundle, expose your secret keys, database queries, and sensitive business logic\n \nIt's super important to keep server-only code separate from client-side code\n\n> use **_server-only_** package. This throws a build time error if a someone accidentally imports server code into Client component.\n\n```tsx\nimport \"server-only\";\n```\n\n## Third party packages\n\n- Server Components have introduced an exciting new paradigm in React, and the ecosystem is evolving to keep up\n \n- Third-party packages are starting to add the \"use client\" directive to components that need client-side features, making it clear where they should run\n \n- Many npm packages haven't made this transition yet\n \n- This means while they work fine in Client Components, they might break or fail completely in Server Components\n \n- We can wrap the third-party components that need client-side features in our own Client Components: i.e, create a client component \"use client\" and use the third party package here, import this client component in server component instead of directly writing code of such third party packages in server component.\n\n## Context providers\nContext providers typically live near the root of an application to share global state and logic. For example, your application's theme.\n \nHowever, React context isn't supported in Server Components.\n \nIf you try to create a context at your application's root, you'll run into an error. **The solution is to create your context and render its provider inside a dedicated Client Component**\n\n- Extracting the context provider and wrapping other server components as its children does not turn those server components into client components. We’ll dive deeper into this idea later when discussing client-side patterns.\n\n\n# Client component patterns\n\n## Client only code\n","n":0.048}}},{"i":51,"$":{"0":{"v":"Rendering Lifecycle","n":0.707},"1":{"v":"\nRSC have 3 key players\n- your browser(client)\n- Next js(framework)\n- React (our library)\n\n- rsc loading sequence\n![alt text](/assets/images/rsc-loading-sequence.png)\n\n- update \n![alt text](/assets/images/rsc-update-sequence.png)\n\n","n":0.229}}},{"i":52,"$":{"0":{"v":"Optimization","n":1},"1":{"v":"\n## Head Metadata\n\n- Import Head from next/head and use it for any component;\n\n```js\nimport { Fragment } from 'react';\nimport Head from 'next/head';\n\nfunction Component1() {\n  return (\n    <Fragment>\n      <Head>\n        <title>Events Page</title>\n      </Head>\n      <SomeComponent />\n    </Fragment>\n  );\n}\n```\nnote: next.js automatically merges multiple head elements. if there is tag conflict(like two Head have title property), the latter one will be used.","n":0.134}}},{"i":53,"$":{"0":{"v":"NextJS 12","n":0.707},"1":{"v":"\n- Next.js is a framework for building web applications.\n- Next.js uses file-system routing, which means how you structure your files determines the routes in your application.\n\n\n## Fundamentals\n\n- _app.js allows you to customize everything that would be rendered as a body of an html document.\n- _documents.js allows you to customize your entire html document. You need to define a special `class` component inside it.\n    - this is required if you want to add some elements outside your application or add html level customizations like <html lang=\"en>\n\n```js\nimport Document, {Html, Head, Main, NextScript} from \"next/document\";\n\nclass MyDoc extends Document {\nrender() {\n    return(\n        <Html lang=\"en\">\n            <Head />\n            <body>\n                <div id=\"overlay\" />\n                <Main />\n                <NextScript />\n            </body>\n        </Html>\n    )\n}\n}\n```\n\n### installation\n```bash\nnpx create-next-app@latest\n```\n\n### Difference b/w nextjs file base routing and React-Code based routing\n\n- no boiler plate code for adding routes in nextjs page based routing. The pages folder structure in itself are routes. Files and folder structure(in /pages folder) influences routes.","n":0.081}}},{"i":54,"$":{"0":{"v":"Doubts","n":1},"1":{"v":"\n- **Question**\n  In nextjs, how does getStaticPath() returning {fallback: true} differ from getServerSideProps? Isn't both of them generate pages just in time? Why do we need getServerSideProps if fallback true does the exact same thing?\n\n**Answer**\n\nWhile `{fallback: true}` and `getServerSideProps` both generate pages dynamically at runtime, they have some important differences that make them better suited for different use cases.\n\nFirstly, `{fallback: true}` is typically used for generating pages for dynamic routes that have a large number of possible values, but only a small subset of those values are actually used frequently. In this case, it's not practical to pre-render all possible values at build-time because it would take too long or consume too much resources. Instead, using `{fallback: true}` allows you to pre-render only the most frequently used values at build-time, and generate the remaining pages on-demand at runtime. This can lead to faster build times and reduced resource usage.\n\nOn the other hand, `getServerSideProps` is useful when you need to generate pages that require data that can't be pre-fetched at build-time. For example, if you have a page that shows real-time data or user-specific data, you can use `getServerSideProps` to fetch the necessary data at runtime and generate the page on the server-side. This ensures that the page always shows the most up-to-date information.\n\nAdditionally, `getServerSideProps` gives you more control over the page generation process. With `{fallback: true}`, you have less control over the timing and order of page generation, and you can't do things like server-side rendering conditional content. With `getServerSideProps`, you have full control over the data fetching and rendering process, and can generate pages with more complex logic.\n\nIn summary, while `{fallback: true}` and `getServerSideProps` can both generate pages dynamically at runtime, they are better suited for different use cases. `{fallback: true}` is useful for generating pages for dynamic routes with a large number of possible values, while `getServerSideProps` is useful for generating pages that require real-time or user-specific data, or that have more complex rendering logic.\n","n":0.055}}},{"i":55,"$":{"0":{"v":"HTML","n":1}}},{"i":56,"$":{"0":{"v":"Canvas","n":1},"1":{"v":"The HTML `<canvas>` element is used to draw graphics, on the fly, via JavaScript.\nThe `<canvas>` element is only a container for graphics. You must use JavaScript to actually draw the graphics.\n\n```html\n<canvas id=\"myCanvas\" width=\"300\" height=\"150\"></canvas>\n```\n- The `getContext()` method returns an object with tools (methods) for drawing.\n```js\nconst myCanvas = document.getElementById(\"myCanvas\");\nconst ctx = myCanvas.getContext(\"2d\");\n```\n<canvas id=\"myCanvas\" width=\"300\" height=\"150\"></canvas>\n\n## Draw\n\n### Fill Style\nThe fillStyle property can be a CSS color, a gradient, or a pattern. The default fillStyle is black.\nThe fillRect(x,y,width,height) method draws a rectangle, filled with the fill style, on the canvas:\n```js\nctx.fillStyle = \"#FF0000\";\n``` \n- Drwaing a rectangle\n\nThe syntax is context.rect(x, y, width, height)\n```js\nctx.fillRect(10,10,300,150)\n```\n- Drawing a line\n```js\n// Define a start Point\n  ctx.moveTo(0, 0);\n  // Define an end Point\n  ctx.lineTo(300, 150);\n  // Stroke it (Do the Drawing)\n  ctx.stroke();\n```\n- Drawing a circle\n\narc(x,y,r,start,end)\n```js\n // circle\n      ctx.beginPath();\n      ctx.arc(150, 75, 40, 0, 2 * Math.PI);\n      ctx.stroke();\n```\n\n## Gradient\n\nThere are two different types of gradients:\n\n- createLinearGradient(x,y,x1,y1) - creates a linear gradient\n- createRadialGradient(x,y,r,x1,y1,r1) - creates a radial/circular gradient\n- The addColorStop() method specifies the color stops, and its position along the gradient. Gradient positions can be anywhere between 0 to 1.\n\n- To use the gradient, set the fillStyle or strokeStyle property to the gradient, then draw the shape (rectangle, text, or a line).\n\n```js\n// Create gradient\nconst grd = ctx.createLinearGradient(0,0,200,0);\ngrd.addColorStop(0,\"white\");\ngrd.addColorStop(01,\"blue\");\n\n// Fill with gradient\nctx.fillStyle = grd;\nctx.fillRect(10,10,150,80);\n```\n\n## Text\nmethods:\n\n- font - defines the font properties for the text\n- fillText(text,x,y) - draws \"filled\" text on the canvas\n- strokeText(text,x,y) - draws text on the canvas (no fill)\n\n```js \nctx.font = \"30px Arial\";\nctx.fillText(\"Hello World\", 10, 50);\n```\n\nto align center\n```js\nctx.font = \"30px Arial\";\nctx.textAlign = \"center\";\nctx.fillText(\"Hello World\",canvas.width/2, canvas.height/2);\n```","n":0.063}}},{"i":57,"$":{"0":{"v":"GitHub Actions","n":0.707}}},{"i":58,"$":{"0":{"v":"Workflow Syntax","n":0.707},"1":{"v":"\n## Source\n- [workflow-syntax-for-github-actions](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions)\n\n## Notes\n- store workflow files in the .github/workflows\n- __on__: To automatically trigger a workflow, use on to define which events can cause the workflow to run","n":0.189}}},{"i":59,"$":{"0":{"v":"Dsa","n":1}}},{"i":60,"$":{"0":{"v":"Resource","n":1},"1":{"v":"- [Anuj Bahiya: Java](https://www.youtube.com/playlist?list=PLUcsbZa0qzu3yNzzAxgvSgRobdUUJvz7p)\n- [Traversy Media: JS Cardio](https://www.youtube.com/playlist?list=PLillGF-Rfqbb4ZOnsNCIB-DnLuUrQjS_G)\n- [Neetcode](https://www.youtube.com/watch?v=KLlXCFG5TnA&list=PLot-Xpze53ldVwtstag2TL4HQhAnC8ATf)\n- [MIT course- Algorithms](https://www.youtube.com/watch?v=ZA-tUyM_y7s&list=PLUl4u3cNGP63EdVPNLG3ToM6LaEUuStEY)\n- [Complete Resources list](https://medium.com/gitconnected/how-i-got-in-to-amazon-microsoft-google-all-from-studying-these-resources-31724508ce0e)\n- [Graph Theory](https://www.youtube.com/watch?v=DgXR2OWQnLc&list=PLDV1Zeh2NRsDGO4--qE8yH72HFL1Km93P)\n\n### Problem Set\n- [strivers-sde-sheet](https://takeuforward.org/interviews/strivers-sde-sheet-top-coding-interview-problems/)\n- Advance: https://cses.fi/problemset/","n":0.213}}},{"i":61,"$":{"0":{"v":"Leetcode","n":1},"1":{"v":"\n## Two pointer - Leetcode 121\n\n- find the (sum-num) in hashmap\n- if not present, store number and its index in hashmap\n- [[source code(inside workspace) | dsa\\neetcode\\twoSum.js]]\n- [Source github URL](https://github.com/Harshita-mindfire/Harshita-notes/blob/main/dsa/neetcode/twoSum.js)\n* Parses entire array in single pass: O(n)\n* adding an element to hashmap: O(1) constant time\n* reading an element from hashmap: O(1) constant\n    \n## Sliding Window: Best Time to Buy and Sell Stock - Leetcode 121\n\n![](/assets/images/2022-09-11-22-17-37.png)\n- two pointer\n- [[source code | dsa\\neetcode\\best-time-to-sell.js]]","n":0.12}}},{"i":62,"$":{"0":{"v":"NFR","n":1}}},{"i":63,"$":{"0":{"v":"accessibility","n":1},"1":{"v":"## Top picks\n\n1. use semantic HTML. It has a lot built in capabilities like responding to focus, tab and enter.\n2. Correct heading order, h1 first then h2 etc. Don't use headings for styling purpose(use `<strong>`, css or other approaches)\n3. don't use anchor tags for buttons(like in hamburger menus). a tags without href is almost next to nothing. screen reader will read it as a normal text. If absolutely necessary, use `role` and make tab-index=0 so that this elements gets added to the tab-tree and is accessible with tab. note that tabindex=0 does not make it the first element to be accessed by tab.\n\n\n### aria\n- **aria-label**: used if we have an image inside hyperlink and no text. It gives elements a programmatic accessible name so that screen readers can let the user know what the element will do once interacted with.\n- **aria-expanded**: When a screen reader lands on an element with the attribute \"aria-expanded\", it announced the status as either \"expanded\" or \"collapsed\". eg: for menus.\n- **aria-labelledby**: for images with captions. DRY with writing alt and caption. Add aria-labelledby=\"id-of-element-where-caption-is-wriiten\"\n- **aria-hidden**: aria-hidden=\"true\" hides the element from assistive technologies.\n- **aria-required**: used in input field. In HTML5 this can be skipped and `required` is used.\n- **role**: use roles for elements that are not being used as there usual self.\n\n```html\nQ: What would screen readers announce when they encounter this button:\n<button aria-label=\"Shop now\">Shop</button>\n\nA: only aria-label: Shop now\n```\n\n### images\n- use alt=\"\" for background images.\n- always add alt tag for images added with `<img>` tag. Skipping it would result in screen reader to announce the file name. Yikes!\n\n### bypass blocks\nadding bypass blocks allows us to skip blocks while navigating site through tab.\n\n## navigation\n- use correct semantics: `<nav>`\n- use ol, li and links instead of divs or aria attributes like role etc.\n\n### google maps/iframes\n- whenever you have any iframe always add the title attribute.\n- when using maps, also add the address in textual format for screen readers. \n- some sites also provide driving directions in separate link that allows screen readers to get index of location.\n\n### contact forms\n- have associated labels for inputs. Don't use placeholder text only for labels. good idea is to skip them completely. \n- keep a heading above a form. Some users navigate site with headings(keyboard first, screenreaders), if the form has no heading associated with it, it might get unnoticed.\n\n```html\n<h3> Sign in Form</h3>\n<form> ... </form>\n```\n### icons\n- hide decorative icons for assistive technology by adding aria-hidden=\"true\".\n- for icons that have links(instagram icon), the svg is wrapped inside the anchor tag. For such cases: hide svg with aria-hidden and add meaningful aria-label to anchor tag.\n\n### links\n- have descriptive links. If users use screen readers and only access clickables, the link text should make sense.\neg:\n- **BAD**\n    ```html\n    To make an appointment, click <a href=\"xyz\">here</a>\n    ```\n\n- **GOOD**\n\n    ```html\n    <a href=\"xyz\">make an appointment</a> today!\n    ```\n\n## Checklist\nAfter developing an accessible website:\n1. Run lighthouse report in Chrome to get status.\n2. Make sure every clickable is accessible through keyboard.\n3. Run through the site using screen readers.\n\n\n## Screen readers\n\n- If you're on a Windows machine and would like to get started with screen readers, NVDA is a great option.\n- NVDA official site: nvaccess.org\n>NVDA stands for Non visual desktop access\n- https://webaim.org/articles/nvda/","n":0.044}}},{"i":64,"$":{"0":{"v":"Yarn","n":1},"1":{"v":"- version: `yarn -v`\n- upgarde to yarn 3: `yarn set release berry`\n- downgrade back to yarn 1: `yarn set release 1.22.1`","n":0.218}}},{"i":65,"$":{"0":{"v":"Yaml","n":1},"1":{"v":"\n- https://learnxinyminutes.com/docs/yaml/\n\n- hierarchy is determined by indentation.\n- hyphons (-) represents lists.\n- parsing YAML file is little bit slower than json files\n","n":0.218}}},{"i":66,"$":{"0":{"v":"Winston","n":1},"1":{"v":"\n## Resource\r\n- https://www.section.io/engineering-education/logging-with-winston/","n":0.577}}},{"i":67,"$":{"0":{"v":"Web","n":1},"1":{"v":"\n## Critical Rendering Path\n\n- sequence of steps the browser goes through to render the page ie. to convert html, css, js to pixels on your screen.\n\n```mermaid\ngraph TD;\n    DOM-->CSSOM-->RenderTree--> Layout-->Paint;\n    DOM --> Javascript;\n    Javascript --> DOM\n    Javascript --> CSSOM\n```\n### DOM\n- browser captures all contents of the page in DOM\n- full parsed representation of HTML markup.\n- browser constructs DOM incrementaly(building the dom as soon as we have the HTMl and not have to wait for entire HTMl page to render)\n- creates DOM based on token hierarchy\n```mermaid\ngraph TD;\nCharacters --> Tokens --> Nodes --> DOM\n```\n### CSSOM\n- browser captures all the styles of the page in a CSS OM\nconverts token to Nodes\n- css rules cascade down(children of body note inherit its parent's css)\n- can't use partial CSSOM since rules are overwritten\n- it is render blocking(browser blocks page rendering until the entire cssom is created)\n- more specific rules are expensive.\n\n### Render Tree\n- merge the two DOM and CSSOM in render tree\n- only captures visible content.\n### Layout\ndetermines the scrren size and position of each node in the screen.\n\n### Paint\nPaints pixels on the scrren\n\n\n## Optimizing CRP\n-  minimizing the number of critical resources by deferring non-critical ones' download, marking them as async,\n- optimizing the number of requests required along with the file size of each request,\n- optimizing the order in which critical resources are loaded by prioritizing the downloading of critical assets, thereby shortening the critical path length.","n":0.066}}},{"i":68,"$":{"0":{"v":"Web Workers","n":0.707},"1":{"v":"\n- a javascript process that runs in the bg of a web page\n- by default js is single threaded called (main thread). It is responsible for executing entire js of a web page\n- web worker is separate js thread that allows to run multiple js threads that runs in parallel.\n- it offload main thread from running heavy computational(CPU intensive) work.\n- it cannot do DOM manipulation\n\n### Implementation\n\n1. create a worker script(worker.js)\n2. Create instance of Worker in main thread.\n\n```js\nconst worker = new Worker('worker.js)\nconst btn = document.querySelector('#btn');\nbtn.addEventListener('click', () => {\n    worker.postMessage('CALCULATE')\n})\nworker.onmessage = function(message) => {\nalert(message.data)\n}\n```\n\nin worker.js\n\n```js\nself.onmessage = function (message) {\n  let sum = 0;\n  for (let i = 0; i < 1000000000; i++) sum = sum + i;\n  self.postMessage(sum);\n};\n```\n\n","n":0.093}}},{"i":69,"$":{"0":{"v":"Web Vitals","n":0.707},"1":{"v":"\n## Web vitals\n\nstandard google guidelines to provide good UX\n\n- LCP(Largest ContentFul paint) : measures loading perf, within 2.5sec of initial load\n- First Input Delay(FID): measures interactivity, 100ms.\n- Cumulative layout shift: measures visual stability.\n\n### Resource\n\n- [Traversy Media: DIY Chrome extension](https://www.youtube.com/watch?v=8B8LUn6XEkA)\n","n":0.16}}},{"i":70,"$":{"0":{"v":"Service Workers","n":0.707},"1":{"v":"\n- a JS script that gets registered with the browser.\n- stays registered even when offline\n- can load content even with no connection.\n- service workers are event driven: **install** event, **activate** event, **fetch** event etc.\n\nUses cases\n\n- background data sync/preload: lets you defer actions until user has stable connectivity. Also allows services to push periodic updates to the app so that it can update when it is next online.\n\neg=> when you hit like on instagram, and the connection is not stable, the event gets synced when we are back with stable connection.\n\n![Service worker lifecycle](/assets/images/2023-08-16-16-44-43.png)\n\n## Registration\n\n![](/assets/images/2023-08-16-17-18-27.png)\n\nOnce registered you will find it activated in your application tab of Chrome dev tools.\n![](/assets/images/2023-08-16-17-19-17.png)\n\n","n":0.097}}},{"i":71,"$":{"0":{"v":"Security","n":1},"1":{"v":"\n1. Use threat model to prioritize what needs to be protected first. Find the weakest link and raise the security level to make the weakest point as diificult to exploit as possible.\n2. Each system is vulnerable to its own specific  attacks. There is no 'one size fits all' threat model. Create a threat model to analyze:\n    - valuables to protect\n    - vulnerability\n    - types of attack possible.\n    - re-evaluate often.\n\n\n# General Security Principles\n\n## Principle of lease privilege\n- It says, every privileged user of the system should operate using the least amount of privilege necessary to complete the job. Only give as much security access to any person or group as they need, and no additional privileges.\n\n- Principle of Least-Privilege Applications:\n    - APIs\n    - System resources\n    - Database access\n    - Software version control\n    - Public-facing webpages        \n\n## Simple is more secure\n\nKeep the code simple.\n- Use clearly named functions and variables \n- Write code comments \n- Prefer built-in functions. \n- Remove cruft(redundant, unused code)\n- Disable unused features.(removing unused feature helps us to secure one feature less, i.e one less feature open to threat)\n- DRY\n\n## Deny-list Allow-list\n\nRestricting item by default is more secure approach. \nFor example: In html form certain tags are allowed whereas rest are not. If we maintain a deny-list, it will be a lot of tags, also if a new tags gets introduced, we need to make sure we update the deny list. \n\n## Defence in depth\nMulti level checkpoints like MFA, Captcha etc.\n\n### Regulating requests\n This is the first line of defence. \n - Make sure your application accepts only request methods(get, post, put etc) you expect and ignore others. \n - Also examine the request response format(Content Type and Accept).- Filter problematic IPs in the past.\n - have a cap size for file size etc.\n\n### Validating input\n Only good data is allowed in your web app. This would be different for each request but still some common areas to check are: \n - Presence/length of i/p\n - type of data (num, jpeg, pdf)\n - format(email)\n - uniqueness (no two email are same etc)\n\n### Sanitizing data\nMost languages have special characters that have a definite meaning to them. If these special characters are in the data and are not sanitized, they may use their special meaning and cause problems. \n\n- The right action would be to replace powerful characters with harmless equivalents like in  `HTML: \"<\" with \"&It;\" and \">\" with \"&gt;\"`\n- escaping characters: like in sql ' denotes start f a string. Hence: SQL: \"WHERE name='fake\\'AND 1=1--'''\n- typecasting data: Sql sanitization, JS sanitization etc\n\nData arriving directly from a user is not the only data that needs sanitization. Retrieving any stored data should be treated as new input too. For example, data may be properly sanitized for SQL when it's received and then stored in a database, but when it's retrieved from the database, it needs to be sanitized again before being used as HTML, JavaScript, JSON, XML, or any other format. It's also possible that the data changed since it was last stored. Just because it resides on your system doesn't mean you should trust it more than data coming directly from a user. You should always sanitize data before using it. \n\n### Label variables\n\nIt's important to keep track of which data has been sanitized and which has not. We can use variable names to label which data is potentially dangerous and which data is safe to use. You never want to accidentally pull in raw information, invalidating the entire sanitization process.\n- Before sanitization, we can use names such as dirty, raw, or unsafe. \n- After sanitization, we can use names such as clean, sanitized, or safe.\n\n### Keep creds private\n\n- Don't put credentials directly inside your code. We call that hard coding the credentials. Instead, store the credentials in a separate file and use variables or even better constants to refer to the values.\n- remove creds config file from version control.\n- never reuse creds.\n\n### Keep error msgs vague\nHackers use the results of their actions to improve their chances of success.\n\nImagine that a hacker visits a standard login page on a website and tries a username and password. If the response is username not found, then the hacker knows to try a different username. If after a few tries the response changes to password not found, then they'll know that they've made progress and they have found a valid username. A more secure approach is to return an identical login failed message in both cases. \n\n### Smart logging\n\nWhat to Log:\n- Date and time\n- Source (IP, user)\n- Action and target\n\nDon't log query or post params. It can log user secret infos.\nAlso don't log any internal network information – including share names, router information, and computer names – needs to be encoded or otherwise obfuscated so that they're recognizable but not a way to access or probe them via automation.\n\n\n# Most common attacks\n\n## Credential attacks\nThere's credential theft, brute-force attacks, dictionary attacks, and credential stuffing.\n\n- **credential theft**: somebody knows your credential. Maybe you shared accidently or left them somewhere.\n- **brute force**: A brute-force attack is when an attacker uses software to try every combination of characters. In order to guess a password, it is trial and error. \n- **dictionary attack**: It is also a brute force attack, but it's one which prioritizes words that are in a dictionary over random combinations. It does not change the total time required to try every combination, but it can greatly reduce the actual time required to find the correct password.  eg: Qwerty, password\n- **credential stuffing**: Once attacker knows password to one site, they try it on the other sites as well for same user. Most people have same psd for all many sites since this way it  is easier to remember.\n\n**Passwords Recommendations**\n- Use long, complex passwords\n- Never reuse a password\n- Use a password manager eg: 1pass etc\n- Use SSH keys\n- Becrypt passwords\n- Use multi-factor authentication\n\nYou can also use **Login throttling**, i.e after maybe 10 failed attempts a penalty to wait 5 mins before making next attempt.\n\n## URL manipulation and Insecure Direct Object Reference (IDOR)\n\n- Searching for private webpages\n- Exploring the file system\n- Enumerating values in the database\n- Detecting installed software\n- Accessing privileged resources\n\nManipulating a URL may reveal a private webpage. The public website may not have a link to that page, or the page may be only accessible under certain conditions. For example, adding \"preview=true\" to a URL might show an unpublished version of the page. \n\nIf a page displays a person's contact information, when the URL contains an ID of 27, then an attacker could try all IDs to get a full list of the people in the database. \n\nSoftware on a web server sometimes includes built-in webpages with special information for administration. \n\n- https://abc.com/orders/1244 : This particular url is a Direct object reference. It is fetching details of order id 1244. If this refernce is insecure(i.e not authorized) anyone with the url could see the order details, address, payment mode and details etc. Also, they can further brute force for other orders like 1243 etc. \n\n## SQL Injection\n- SQL Injection is an attack that occurs when untrusted data is used to construct an SQL query.\n\n\n\n# Data Security\n\nData Security Goals: CIA\n- Confidentiality: data is only available to privileged users\n- Integrity: data is correct and can be trusted\n- Availability: data is available when needed\n\n\n","n":0.029}}},{"i":72,"$":{"0":{"v":"Pwa","n":1},"1":{"v":"\n- Progressive web apps build websites that provides experience indifferent from native mobile apps.\n- offline mode, push notification, device camera and other indevice feature etc.\n- single codebase for ios, android, web.\n\n## pwa\n\n- to qualify as a pwa, run ligthouse.\n- to make it run offline, use [[learning.web.service-workers]].\n- create a manifest.json app to have app metadata\n- can write code for your own service worker or use lib like _workbox_ for the same.\n- `CRA` it automatically generate service worker for you.\n\n","n":0.113}}},{"i":73,"$":{"0":{"v":"Frontend Web Performance Checklist","n":0.5},"1":{"v":"\n## Resources\n\n- [Frontend Web Performance Checklist](https://dev.to/jacobandrewsky/frontend-web-performance-checklist-2o9j)\n\n## Checklist\n\n1. **Eleminate render blocking non-critical scripts**: these resources are blocking the first paint of your page. Consider delivering critical JS/CSS inline and deferring all non-critical JS/styles.\n2. **Image handling**:\n   - Serve images that are appropriately-sized to save cellular data and improve load time.\n   - Give explicit height width to images to reduce Cumulative Layout Shift(CLS).\n   - Use CSS sprites for small images/icons.\n   - Minimize the use of external scripts and fonts.\n3. **Minify/Remove unnecessary CSS and JS**: minify css/js and you can also use Code Splitting which will split code into bundles that can be loaded on demand.\n4. **Test Cross-Browser Compatibility:**: Ensure your website performs well on various browsers and devices.\n5. **Optimize Third-Party Scripts**: Evaluate the impact of third-party scripts and consider asynchronous loading.\n6. **Prioritize Accessibility**: Ensure your website is accessible to all users, including those with disabilities.\n7. **Ensure text remains visible during webfont load**: Fonts are often large files with slow load times. Some browsers hide text until the font loads, causing a flash of invisible text (FOIT).\n\n   - to avoid showing invisible text while custom fonts load is to temporarily show a system font. add `font-display: swap`` in your @font-face style\n\n   ```css\n   @font-face {\n     font-family: 'Pacifico';\n     src: local('Pacifico Regular'), local('Pacifico-Regular'),\n       url(https://fonts.gstatic.com/s/pacifico/v12/FwZY7-Qmy14u9lezJ-6H6MmBp0u-.woff2)\n         format('woff2');\n     font-display: swap;\n   }\n   ```\n\n   - swap tells the browser that text using the font should be displayed immediately using a system font. Once the custom font is ready, it replaces the system font\n\n8. **Preload key requests / Preconnect to required origins**: Declare preload links in your HTML to instruct the browser to download key resources as soon as possible\n\n   ```html\n   <head>\n     <link rel=\"preload\" href=\"critical.css\" as=\"style\" />\n     <link rel=\"preload\" href=\"critical.js\" as=\"script\" />\n   </head>\n   ```\n\n9. **Serve images in next-gen formats**: WebP or Avif provide better compression.\n\n","n":0.059}}},{"i":74,"$":{"0":{"v":"Vite","n":1},"1":{"v":"\n## Blog post\n- [Vite Crash Course Blog](https://www.traversymedia.com/blog/vite-crash-course)\n\n- npx create-vite-app my-app --template react-ts\n- dev server\n- when we build, vite uses `Rollup` (module bundler) to bundle files for production.\n- fast\n- Sass support is built into Vite\n## Start\nnpm init vite@latest vite-project\n\n## Configure port\nWe can also change some settings, including the port that the development server runs on. By default, it runs on port 5173. I prefer port 3000, so I'm going to change it to that.\n```js\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    port: 3000,\n  },\n});\n```\n\n## Env variables\nJust like CRA, Vite supports environment variables. We can create a .env file in the root of our project. We can then add environment variables to this file. They must begin with VITE_. Let's create one called VITE_API_KEY and set it to 123456789.\n```.env\nVITE_API_KEY=123456789\n```\nNow, let's go into the header and try to access this environment variable. We can do this by using the import.meta.env object.\n```js\nconst Header = () => {\n  return <div>{import.meta.env.VITE_API_KEY}</div>;\n};\n```\n\nexport default Header;\n\n## Vite vs traditional module bundlers\n![vite vs other module bundlers](/assets/images/vite-vs-others.png)\n\n\n- in development, it doesnot rebundle everything everytime you make a change. instead, it takes advantage of native ES modules in the browser. In modern browsers you can use the ES modules(import/export syntax)\nIt add scripts as \n```\n<script type=\"module\" src=\"main.js\">\n```\n\n","n":0.07}}},{"i":75,"$":{"0":{"v":"Vanilla JS","n":0.707},"1":{"v":"## Ques:\n\n- Create a vanilla js application that consumes the https://fakestoreapi.com/products?sort=asc API \nand displays a list of products in ascending order based on id. \nThe application should also include a dropdown to allow the user to change the sorting of the products between ascending and descending. \nWhen the user changes the sorting order, the application should update the query parameter value and fetch the products with the new sorting order.\n\n## Ans\n\n- HTML \n```html\n <select>\n      <option value=\"asc\">Asc</option>\n      <option value=\"desc\">Desc</option>\n    </select>\n```\n- JS\n```js\n const getProducts = async (sortOrder=\"asc\") => {\n   const response = await fetch(`https://fakestoreapi.com/products?sort=${sortOrder}`);\n   const productList = await response.json();\n   const body = document.querySelector(\"body\");\n   const test = document.querySelector(\".container\")\n   if(test) {\n     body.removeChild(test)\n   }\n   const container = document.createElement(\"container\");\n   container.classList.add(\"container\")\n   productList.map(({id, title, image} ) => {\n     const parent = document.createElement(\"div\");\n     parent.classList.add(\"parent\")\n     const card = document.createElement(\"div\");\n     const imageCard = document.createElement(\"img\");\n     imageCard.setAttribute(\"src\", image);\n     imageCard.style.width = \"50px\";\n     imageCard.style.height = \"60px\";\n     card.appendChild(imageCard)\n     const titleSpan = document.createElement(\"div\");\n     titleSpan.innerHTML = title;\n     parent.appendChild(card);\n     parent.appendChild(titleSpan);\n     container.appendChild(parent)\n   })\n   body.appendChild(container)\n\n }\n getProducts()\n\n\n   const select = document.querySelector(\"select\");\n  select.addEventListener(\"change\", (e) => {\n    getProducts(e.target.value)\n  })\n```\n\n- CSS \n```css\n.container {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.parent {\n  width: 10rem;\n}\n```\n","n":0.075}}},{"i":76,"$":{"0":{"v":"TypeScript","n":1},"1":{"v":"\n\n## React with Typescript Cheatsheet\n- https://react-typescript-cheatsheet.netlify.app/docs/basic/setup\n\n## TS\n\n- superset of javascript.\n- can't be executed by JS environment (browsers, nodejs)\n\n## Creating nodejs application with typescript config\n\n1. npm init -y\n1. save typescript as dev dependency: `npm i -D typescript`\n1. Create tsconfig.json: `npx tsc --init`.\n1. Mark `\"esModuleInterop\": true` in tsconfig.json to support import syntax\n1. `tsc` will compile typescript files to js, you can configure tsconfig.json's `outDir` property to provide path for transpiled files.\n1. `tsc -w` will watch for changes.\n1. use [[ts-node|learning.typescript#ts-node]] and nodemon in dev environment.\n\n## ts-node\n\nThe ts-node library is a TypeScript execution and REPL (Read-Eval-Print Loop) for Node.js. It allows you to directly run TypeScript code without explicitly compiling it to JavaScript.\n\nWhen you run a TypeScript file using the ts-node library, it dynamically compiles the TypeScript code on-the-fly and executes it in the Node.js runtime environment. This eliminates the need to manually compile the TypeScript code before running it with Node.js.\n\n\n## Types\n\n```js\n//array\n\nlet arr:number[]=[1,2]\n\n//fixed length array is called tuple in ts\n\nlet tuple:[number,number]=[1,2]\n\n//rest parameter any number of parameters to a function\nfunction sum(...values:number[]){\n    return values.reduce((acc,currentVal)=>acc+currentVal)\n}\n\n//structural typing : duck typing \ntype Point2D={x:number,y:number}\ntype Point3D={x:number,y:number,z:number}\n\nlet a:Point2D={x:0,y:2}\nlet b:Point3D={x:0,y:2,z:3}\n\na=b\n\n//Generics\nclass Queue<T>{\ndata:T[]=[];\n\npush(item:T){this.data.push(item);}\npop():T|undefined{return this.data.shift();}\n}\n\nconst queue=new Queue<number>()\n\n//any unknown unknown is a type safe version of any\n\n\nconst delay=(ms:number)=> new Promise(res=>setTimeout(res,ms))\n\nconst mainAsync=async()=>{\n    await delay(1000)\n    console.log(1);\n    await delay(1000)\n    console.log(2);\n    await delay(1000);\n    console.log(3);\n}\n\n//literal types\nlet direction: 'North'|'South'|'East'|'West'\n\n//typeof for primitive, instanceof for class object , in for property in object without new\n\n//discriminated unions\n\ntype Square={\n    kind:'square',\n    size:number\n}\ntype Rectangle={\n    kind:'rectangle',\n    height:number,\n    width:number\n}\n\n//never\ntype Shape=Square|Rectangle\n\nfunction area(s:Shape){\n    if(s.kind==='square'){\n        return  s.size*s.size\n    }\n    if(s.kind==='rectangle'){\n        return s.height*s.width\n    }\n    const _ensureAllCasesAreHandled:never=s\n    return _ensureAllCasesAreHandled\n}\n\n//assert function\nfunction assert(condition:unknown,message:string): asserts condition{\n    if(!condition) throw new Error(message)\n}\n\nfunction assertDate(value:unknown): asserts value is Date{\n    if(value instanceof Date)return\n    else throw new TypeError('value is not a date')\n}\n\n\n\n//read-only \nfunction sortReverse(input : readonly number[]){\n    return input.slice().sort().reverse()\n}\nconst start=[1,2,3,4,5]\nconst end=sortReverse(start)\n\ntype Point= readonly [number,number]\n\nfunction movePoint(point:Point,x:number,y:number):Point{\n    return [point[0]+x,point[1]+y]\n}\n\n//const assertion\nfunction layout(settings:{\n    align:'left'|'center'|'right',\n    padding:number\n}){\nconsole.log('performing layout', settings);\n}\n\nconst example={\n    align:'left'as const,\n    padding:10\n}\n\nlayout(example)\n\n//lookup types\ntype nestedJson={\n    prop1:{\n        prop2:string\n        prop3:number\n    }\n    prop4:boolean\n}\n\ntype lookupProp=nestedJson[\"prop1\"]\n\n//conditional types \nexport type TypeName<T>= \nT extends string?\"string\":\nT extends number?\"number\":\nT extends boolean?\"boolean\":\nT extends undefined?\"undefined\":\nT extends symbol?\"symbol\":\nT extends bigint?\"bigint\":\nT extends Function?\"function\":\nT extends null?\"null\":\n\"object\"\n\nfunction typeName<T>(t:T):TypeName<T>{\n    return typeof t as TypeName<T>\n}\n\nconst str=typeName(\"hello\")\n\n//infer\ntype isArray<T>=T extends Array<T>?\"array\":\"object\"\n\ntype MemberOfArray<T>= T extends Array<infer M>?M:T\n\ntype UnboxArray=MemberOfArray<string[]>\ntype Anything=MemberOfArray<string>\n\n//Return typeof when output of one function is the input of another\nfunction createPerson(firstName:string,lastName:string){\nreturn{\n    firstName,\n    lastName,\n    fullName:`${firstName} ${lastName}`\n}\n}\n\nfunction logPerson(person: ReturnType<typeof createPerson>){\n    console.log(\"Person\", person.firstName,person.lastName,person.fullName);\n    \n}\n\n//Mapped types loop over union of keys\ntype Point1={\n    x:number\n    y:number\n    z:number\n}\n\ntype ReadOnlyPoint<T>={\n    readonly [item in keyof T]:T[item]\n}\n\nconst center:ReadOnlyPoint<Point1>={\n    x:0,\n    y:0,\n    z:0\n}\n\n//template literal\n\nlet templateLiteral:`example ${string}`\n\ntemplateLiteral='example hello'\n\ntype CSSValue=number| `${number}px`|`${number}rem`|`${number}em`\n\nlet height:CSSValue='12px'\n\nfunction size(value:CSSValue){\n    return typeof value==='number'?value+'px':value\n}\n\nsize(1)\nsize('1rem')\nsize('1px')\n\n//Partial make all members optional\ntype PartialPoint=Partial<Point1>\n\n//Required make all members required\ntype RequiredConfig=Required<Point3D>\n\n//Readonly makes all members read only\ntype ReadonlyPoint=Readonly<Point2D>\n\nconst example1={\n    x:0\n}\n\nfunction makeReadonly<T>(t:T):Readonly<T>{\n    return Object.freeze({...t})\n}\n\nexample1.x=2\n\nconst example2=makeReadonly(example1)\n//example2.x=2\n\n//Record\n\ntype PageInfo={\n    id:number\n    title:string\n}\n\ntype PageVerbose={\n    home:PageInfo\n    services:PageInfo\n    about:PageInfo\n    contact:PageInfo\n}\ntype Pages=Record<'page'|'services'|'about'|'contact',PageInfo>\n\n\n//Mapped type as clauses\ntype State={\n    name:string\n    age:number\n}\n\ntype Setter<T>={\n    [k in keyof T & string as `set${Capitalize<k>}`]:(value: T[k])=>void\n}\n\ntype Getter<T>={\n    [k in keyof T & string as `get${Capitalize<k>}`]:()=>T[k]\n}\n```","n":0.047}}},{"i":77,"$":{"0":{"v":"React","n":1},"1":{"v":"\n- a react component has type `React.ReactNode`;\n- can use `type` and `interface` interchangebly. Generally we use interface while building a library and type while building an application.\n\n### Event props\n- HTML `onClick` event: \n```js\nconst handleClick = (event: React.MouseEvent<HTMLButtonElement>)\n```\n\n- HTML `onChange` event:\n```js\nconst handleChange = (event: React.ChangeEvent<HTMLInputElement>)\n```\n\n### Style props\n\nWill allow us to type css styles correctly.\n```js\ntype ContainerProps = {\n    style: React.CSSProperties\n}\n...\n\n<Container styles={{border: '1px solid black', padding: '1rem'}} />\n\nconst Container = (props: ContainerProps) => {\n    return <div style={props.style}> Hello</div>\n}\n```\n\n","n":0.115}}},{"i":78,"$":{"0":{"v":"Interfaces","n":1},"1":{"v":"- pure ts feature.\n- describes the structure of an object. There are no concrete values.\n- in TS it is almost equivalent to a custom type.\n- can't be instantiated and are not compiled.\n- Classes can implement an interface by `implements` keyword. More than one interfaces can be implemented by comman separated implements.\n- interface **does not have** public, private, protected access modifiers, but **can have** readonly modifier.\n- one interface can `extend` another interface using `extends` keyword.\n\neg: \n```ts\ninterface Person {\n    name: string;\n    age: number;\n    greet(message: string): void \n}\n```\n### interface and type\n\n- interface and type can often be use interchangebly. \nFor example the type equivalent of Person interface above will be:\n\n```ts\ntype Person = {\n    name: string;\n    age: number;\n    greet(message: string): void \n    lastname?: string // optional property\n}\n```\n\nwe generally use `type` when we want to store a union type. `interfaces` are used when we want to define a structure of an object.","n":0.082}}},{"i":79,"$":{"0":{"v":"Generics","n":1},"1":{"v":"- https://www.typescriptlang.org/docs/handbook/2/generics.html\n- const arr: Array<string> = []; //similar to string[]\n- Promise<string>\n\n\n## Type constraints\n- use `extends`\n\n    ```ts\n    function merge<T extends object, U extends object>(objA: T, objB: U) {\n    return Object.assign(objA, objB);\n    }\n\n    const mergedObj = merge({ name: 'Max', hobbies: ['Sports'] }, { age: 30 });\n    console.log(mergedObj);\n    ```\n\n- \n    ```ts\n    interface Lengthy {\n    length: number;\n    }\n\n    function countAndDescribe<T extends Lengthy>(element: T): [T, string] {\n    let descriptionText = 'Got no value.';\n    if (element.length === 1) {\n        descriptionText = 'Got 1 element.';\n    } else if (element.length > 1) {\n        descriptionText = 'Got ' + element.length + ' elements.';\n    }\n    return [element, descriptionText];\n    }\n    ```\n\n## keyof\n\n```ts\nfunction extractAndConvert<T extends object, U extends keyof T>(\n  obj: T,\n  key: U\n) {\n  return 'Value: ' + obj[key];\n}\n\nextractAndConvert({ name: 'Max' }, 'name');\n```\n\n## Generic classes\n\n\n## Builtin Utility types\n- Partial<>\n- Readonly<>\n\n- ## generic vs union\n\ngeneric type locks in a type\n\n`<T extends boolean | number | string>` v/s `boolean | number | string`\n","n":0.082}}},{"i":80,"$":{"0":{"v":"Decorartors","n":1},"1":{"v":"- set `experimentalDecorators`: true in tsconfig.json to use the new decorators.\n- decorators are called when the class is defined(before initialization of a class).\n\neg:\n\n```ts\n/**  This is a decorator. target receives the constructor of class. */\nfunction Logger(target: Function) {\n    console.log(\"logging....\")\n}\n\n@Logger\nclass Person {\n    name=\"Max\";\n    constructor() {\n        console.log(\"creating person...\")\n    }\n}\n\nconst pers = new Person()\n```\n\n### Decortor factory function\n\n- decorator function that returns a func.\n the above example will be modified as:\n\n```ts\n /**  This is a decorator factory. target receives the constructor of class. */\nfunction Logger(arg1: string) {\n    return function(target: Function) {\n        console.log(arg1)\n    }\n}\n\n@Logger(\"Logging Person\") // now we can pass args to decorator\nclass Person {\n    name=\"Max\";\n    constructor() {\n        console.log(\"creating person...\")\n    }\n}\n\nconst pers = new Person()\n```\n\n### Multiple decorators.\n\n- The creation happens sequentially but the execution happens bottom up.\n\n- the o/p for below would be \n\n    - LOGGER FACTORY\n    - TEMPLATE FACTORY\n    - Rendering template\n    - Creating person object...\n    - LOGGING\n\n\n```ts\n\nfunction Logger(logString: string) {\n  console.log('LOGGER FACTORY');\n  return function(constructor: Function) {\n    console.log(logString);\n  };\n}\n\nfunction WithTemplate(template: string, hookId: string) {\n  console.log('TEMPLATE FACTORY');\n  return function(constructor: any) {\n    console.log('Rendering template');\n    const hookEl = document.getElementById(hookId);\n    const p = new constructor();\n    if (hookEl) {\n      hookEl.innerHTML = template;\n      hookEl.querySelector('h1')!.textContent = p.name;\n    }\n  }\n}\n\n@Logger('LOGGING')\n@WithTemplate('<h1>My Person Object</h1>', 'app')\nclass Person {\n  name = 'Max';\n\n  constructor() {\n    console.log('Creating person object...');\n  }\n}\nconst pers = new Person();\n\nconsole.log(pers);\n```","n":0.07}}},{"i":81,"$":{"0":{"v":"Compiler","n":1},"1":{"v":"\n## Compiling single file\n\n```bash\n    tsc app.ts\n```\n\n- watch mode: `-w` or `--watch`\n\n```bash\n    tsc app.ts -w\n```\n\n## Compiling multiple files / entire project\n1. **tsc --init** : Run this cmd from root dir. This command creates a tsconfig.json file. It has bunch of configurations for entire project.\n2. Now running **tsc** or **tsc -w** will compile and watch all the `.ts` files in project.\n\n\n### Configuration\n\nThe tsconfig.json has several options to configure how ts comoiler should behave for a project. Some of them are:\n\n- **include**: Specifies an array of filenames or patterns to include in the program. These filenames are resolved relative to the directory containing the tsconfig.json file. If we have both include and exclude, exclude will filter out the files from include. so compiled files will be include - exclude.\n\n- **exclude**:  Specifies an array of filenames or patterns that should be skipped when resolving include. It is not a mechanism that prevents a file from being included in the codebase - it simply changes what the include setting finds. Can also add regex. eg:\n    ```json\n        \"exclude\": [\"node_modules\"] // this is the default behaviour.\n    ```\n\n- **files**: Specifies an allowlist of files to include in the program. An error occurs if any of the files can’t be found.\n\n- **target**: Set the JavaScript language version for emitted JavaScript and include compatible library declarations. eg: \n```json\n{\"target\": \"es6\" }\n```\n\n- **sourceMap**: simplifies debugging. When set this option **true**, it creates .map files which are understood by modern browsers. This allows us to see .ts files in the browser's source tab. Now you can add breakpoints in ts files instead of compiled js in browser.\n\n- **outDir**: folder to store o/p files. Generally ./dist\n- **rootDir**: specify root directory of input files. \n- **removeComments**: when set to true, won't emit comments to output files.\n- **noEmitOnError**: (default: false), when set to true, do not generate output file if input file has compilation error.\n\n## Reference\n- tsconfig Docs: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\n\n- Compiler Config Docs: https://www.typescriptlang.org/docs/handbook/compiler-options.html\n\n- VS Code TS Debugging: https://code.visualstudio.com/docs/typescript/typescript-debugging","n":0.056}}},{"i":82,"$":{"0":{"v":"Classes","n":1},"1":{"v":"\n## Access modifiers\n- **private**: accessible only within the class. They are not even inherited.\n    ```ts\n    class Department {\n        private employees: string[] = [];\n    }\n    ```\n- **public**: default modifier. accessible outside the class.\n- **protected**: accessible to class and its children(i.e can be inherited).\n- **readonly**: This prevents assignments to the field outside of the constructor.\n\n    ```ts\n    class Greeter {\n    readonly name: string = \"world\";\n    \n    constructor(otherName?: string) {\n        if (otherName !== undefined) {\n        this.name = otherName;\n        }\n    }\n    \n    err() {\n        this.name = \"not ok\"; //Cannot assign to 'name' because it is a read-only property.\n    }\n    }\n    const g = new Greeter();\n    g.name = \"also not ok\"; //Cannot assign to 'name' because it is a read-only property.\n    ```\n\n## Shorthand notation\nWhen we want to initialize the member variables in constructor, **instead of**\n```ts\n   class Product {\n    title: string;\n    price: number;\n    private isListed: boolean;\n    \n    constructor(name: string, pr: number) {\n        this.title = name;\n        this.price = pr;\n        this.isListed = true;\n    }\n}\n```\n**we can do**\n\n```ts\n      class Product {\n        private isListed: boolean;\n        constructor(public title: string, public price: number) {\n            this.isListed = true;\n        }\n}\n```\n\n\n## Inheritance\n\n- utilizing base class methods and properties. They are automatically passed on to the child class via inheritance.\n- can inherit one class ata time.\n- use `extends` to inherit.\n- eg:\n\n    ```ts\n    class ITDept extends Dept {\n\n    }\n    ```\n\n### overriding methods\n- TS allows to override methods of base class in child class.\n- It calls the child method when invoked from child reference.\n\n### super keyword\n- calls the constructor of the base class.\n- if you have a base class, you’ll need to call super(); in your child constructor body before using any `this.` members:\n```ts \nclass Base {\n  k = 4;\n}\n \nclass Derived extends Base {\n  constructor() {\n    // Prints a wrong value in ES5; throws exception in ES6\n    console.log(this.k);\n'super' must be called before accessing 'this' in the constructor of a derived class.\n    super();\n  }\n}\n```\n\n\n## Getters and Setters\n\n```ts\nclass Dept {\n    private id:string;\n    constructor(private name: string){}\n    get DeptId() {\n        if(this.id)\n        return this.id;\n    }\n\n    set DeptId(value: string) {\n        this.id = value;\n    }\n}\n```\n`DeptId` is a getter that is publicly accessible. Now we can get the value of dept by creating reference of Dept.\n\n```ts\n// Note how getters/setters are accessed without ()\n\nconst IT = new Dept('IT');\nconsole.log(IT.DeptId) // getting value\nIT.DeptId = '1234' // setting value\n```\n\n## Static Methods\n\n- Classes may have static members. These members aren’t associated with a particular instance of the class. They can be accessed through the class constructor object itself:\n- often used for utility functions that you want to group into a class or for global constants.\n- the static methods are decoupled from instances and **cannot** be referenced with `this`.\n- Static members are also inherited.\n\n\neg: `Math.pi`, `Math.pow()`\n\n```ts\nclass Test {\n    static year = 2024;\n    static testFunc() {\n        return \"xyz\";\n    }\n}\n// above func can be used as: \nconst a = Test.testFunc();\nconsole.log(Test.year) //2024\n```\n\n## Abstract Classes\n- A class that can't be instantiated but has to be extended.\n- An abstract class typically includes one or more abstract methods or property declarations. \n- The class which extends the abstract class must define all the abstract methods. \n- We **cannot** create an instance of an abstract class.\n\n## Private Constructors and Singletons\n\nThe singleton pattern is a creational pattern that allows you to make sure that only one instance of a class is created. .\n\n\n```ts\n    class Singleton {\n    private static instance: Singleton;\n    private constructor() {\n        // do something construct...\n    }\n    static getInstance() {\n        if (!Singleton.instance) {\n            Singleton.instance = new Singleton();\n            // ... any one time initialization goes here ...\n        }\n        return Singleton.instance;\n    }\n    someMethod() { }\n}\n\nlet something = new Singleton() // Error: constructor of 'Singleton' is private.\n\nlet instance = Singleton.getInstance() // do something with the instance...\n```\n\n- [Canvas editor singleton example](https://github.com/mindfiredigital/canvas-editor/commit/b09d98dea3a38caba041bab35736bfd2712c068c#diff-ce60497e4a1a947c474a38c5959a2d9499b9531666b1df509ac4305518a93095R11)\n\n","n":0.041}}},{"i":83,"$":{"0":{"v":"Basic Types","n":0.707},"1":{"v":"Typescript's type system helps us during development.\nThe key difference b/w JS and TS type system is JS uses dynamic types(resolves during runtime) and TS uses static types(set during development)\n\n## Core Types\n- **number**: All numbers, no differentiation b/w integers and floats.\n- **string**\n- **boolean**\n- **object**\n- **array**\n- **tuple**: (added by TS) fix length array.\n    eg: In below example, role is tuple. It is a fixed length(2) array with first index value as number and second has string. `person.role[1] = 10; person.role = [1, \"abcd\", \"def\"]` will result in compile time errors. \n    ```js\n    const person:\n    {\n        name: string;\n        role: [number, string] // tuple\n    } = {\n        name: \"John\",\n        role: [2, \"author\"]\n    }\n    ```\n    **Note** : `person.role.push(\"heeloo\")` will not result in a compile time error. This is an exception. TS cannot catch this error.\n\n- **enum**: Automatically enumerated global constant identifiers. \n    ```ts\n    enum Role {ADMIN, READ_ONLY, AUTHOR};\n    ```\n    by default here Role.ADMIN will have value 0, READ_ONLY: 1 and AUTHOR 2. We can change this by\n    ```ts\n    enum Role {\n        ADMIN = \"ADMINISTRATOR\", \n        READ_ONLY =\" Read only users\", \n        AUTHOR = \"Author\"};\n    ```\n\n- **any**\n\n**Note**: The core primitive types in TypeScript are all lowercase!\n\n## Other Types\n- **union**: \n    ```ts \n    let x: number | string;\n    ```\n\n- **literal types**: \n    ```ts\n    let result: 'value1' | 'value2'; // now result cannot be assigned any value other than value1 or value 2. \n    result = \"ok\"; // results in compile time error\n    ```\n\n- **unknown**: we don't know yet what's the type. It is similar to any but more restrictive.\n\n- **never**: never returns anything. eg: error functions\n\n- **symbol**: \nThere is a primitive in JavaScript used to create a globally unique reference via the function Symbol():\n\n```ts\n    const firstName = Symbol(\"name\");\n    const secondName = Symbol(\"name\");\n    \n    if (firstName === secondName) { //This comparison appears to be unintentional because the types 'typeof firstName' and 'typeof secondName' have no overlap.\n    // Can't ever happen\n    }\n```\n\n## Type Aliases\n\nType aliases can be used to \"create\" your own types. \n\n```ts\ntype NumStringType = number | string;\ntype CustomLiteralType = \"value1\" | \"value2\";\n\n// now these can be used as below:\n\nlet variable1: NumStringType;\n```\n\nYou're not limited to storing union types though - you can also provide an alias to a (possibly complex) object type.\n\nFor example:\n```ts\ntype User = { name: string; age: number };\nconst u1: User = { name: 'Max', age: 30 }; // this works!\n```\nThis allows you to avoid unnecessary repetition and manage types centrally.\n\n## Function return types & void\nreturn type in func is specified after \":\"\n\n```ts\nfunction add(a: number, b: number) : string {\n    const sum = a+b;\n    return `Result is ${sum}`;\n}\n```\n\nThe function that does not have a return statement is of return type void.\n```ts\nfunction add(a: number, b: number) // this is internally :void\n{\n    console.log(a+b); \n}\n\n```\n\nThe function that has a return statement but returns nothing, is of return type undefined\n```ts\nfunction add(a: number, b: number) // this is internally : undefined . You can also use : void here if required. won't throw any error.\n{\n    console.log(a+b); \n    return;\n}\n\n```\n\n## Functions as type\n\n```ts\nlet combinedResult : (a: number, b: number) => number;\n```\n\n## Function Type && Callbacks\n\n```ts\nfunction addAndHandle(n1: number, n2: number, cb: (num: number) => void) {\n  const result = n1 + n2;\n  cb(result);\n}\n\naddAndHandle(10, 20, (result) => {\n  console.log(result);\n});\n```\n**NOTE: ** callback functions can return something, even if the argument on which they're passed does NOT expect a returned value.\n\nfor example: the below code will compile just fine. even though the return type of cb is void and we are returning boolean.\n\n```ts\nfunction sendRequest(data: string, cb: (response: any) => void) {\n  // ... sending a request with \"data\"\n  return cb({data: 'Hi there!'});\n}\n \nsendRequest('Send this!', (response) => { \n  console.log(response);\n  return true;\n });\n```\n\n## Further references\n- https://www.typescriptlang.org/docs/handbook/2/everyday-types.html","n":0.041}}},{"i":84,"$":{"0":{"v":"Advance Types","n":0.707},"1":{"v":"### Intersection types\n- For objects, intersection type is combination of both object properties.\n```ts\ntype TypeA = {};\ntype TypeB = {};\ntype TypeC = TypeA & TypeB // will have props of both TypeA and TypeB\n```\n- for union types, intersection type are the types they have in common.\n\n```ts\ntype Combinable = number | string;\ntype Numeric = boolean | number;\n\ntype Universal = Combinable & Numeric; // intersection would be number\n```\n\n### Typeguards\nWith type guards you avoid runtime errors by checking types before you try to do something with the values.\n\n- instanceOf\n- typeOf\n- property in object\n\nReference: https://www.typescriptlang.org/docs/handbook/2/narrowing.html\n\n- in case of interfaces, use [discriminated unions](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#discriminated-unions).\n\n### index properties\n \n\n - Sometimes you don’t know all the names of a type’s properties ahead of time, but you do know the shape of the values.\n\nIn those cases you can use an index signature to describe the types of possible values, for example:\n```ts\ninterface User {\n    [prop: string]: string\n}\n```\n Read more [here](https://www.typescriptlang.org/docs/handbook/2/objects.html#index-signatures)\n\n ### optional chaining\n\nts supports the below code instead of using `if(user && user.job && user.job.name)`\n ```ts\n if(user?.job?.name)\n ```\n\n ### nullish coalescing\n\n if **null or undefined** used default value;\n eg:\n ```ts\n const username = response.name; // undefined\n const value = username ?? 'Max'; // stores max\n\n\n const lname = '';\n const value2 = xyz ?? 'Smith'; //stores ''.\n ```\nif we would have used value2 = xyz || 'Smith', the value2 will be = `Smith`","n":0.067}}},{"i":85,"$":{"0":{"v":"tRPC","n":1},"1":{"v":"- a library that allows you to write fully typesave API without any schema or code generation.\n\n### When a good choice\n- when typescript in both fe and be\n- for fast pace project\n\n### when a bad choice\n- your teams already working on graphQL\nif backend and fe uses different languages or teams are different\n\n## RPC\n- RPC is short for \"Remote Procedure Call\".\n- It is a way of calling functions on one computer (the server) from another computer (the client). With traditional HTTP/REST APIs, you call a URL and get a response. With RPC, you call a function and get a response.\n\n```js\n// HTTP/REST\nconst res = await fetch('/api/users/1');\nconst user = await res.json();\n\n// RPC\nconst user = await api.users.getById({ id: 1 });\n```","n":0.093}}},{"i":86,"$":{"0":{"v":"Senior Dev Q&a","n":0.577},"1":{"v":"### GraphQL vs Rest\n\n- REST is a mature technology that has been widely used for building APIs for many years. It’s based on the principles of HTTP and uses HTTP verbs like GET, POST, PUT, and DELETE to interact with resources. REST APIs usually return JSON or XML data.\n- GraphQL is a relatively newer technology. It allows clients to specify the data they need and returns only the requested data in a single response. \n\nHere are some considerations for React developers who need to choose between GraphQL and REST:\n\n- **Data requirements**: If your application requires a lot of different data from different endpoints, GraphQL can be a good option because it allows you to specify exactly what you need. With REST, you might have to make multiple requests to different endpoints to get all the data you need.\n- **Caching**: REST APIs can be more easily cached, which can improve performance. GraphQL has its own caching mechanisms, but they can be more complex to implement.\n- **Learning curve**: GraphQL can have a steeper learning curve for developers who are not familiar with it. REST is a more straightforward technology that many developers are already comfortable with.\n\n\n### virtualization\n- https://blog.logrocket.com/rendering-large-lists-react-virtualized/","n":0.071}}},{"i":87,"$":{"0":{"v":"Saas","n":1},"1":{"v":"\n## Resource\n- [Traversry Media](https://www.youtube.com/watch?v=nu5mdN2JIwM)","n":0.5}}},{"i":88,"$":{"0":{"v":"Redux","n":1},"1":{"v":"\n## Redux\n\n- predictable state container for js apps.\n- predictable because in redux, a pattern is enforced to ensure all transitions are explicit and can be tracked.\n\n![](/assets/images/2023-08-22-22-28-35.png)\n\n![](/assets/images/2023-08-22-22-29-07.png)\n\n## Three core concepts\n\n- store\n- action: js object that has a type and payload property. The type value is usually defined as constants.\n- reducer\n\n![](/assets/images/2023-08-22-22-37-23.png)\n\n![](/assets/images/2023-08-22-22-44-19.png)\n\n## Principles\n\n1. ![](/assets/images/2023-08-22-22-39-33.png)\n\n2. ![](/assets/images/2023-08-22-22-41-03.png)\n\n   The state is read only and the only way to change the state is dispatch an action\n\n3. ![](/assets/images/2023-08-22-22-43-13.png)\n\n## Redux store\n\n![](/assets/images/2023-08-23-07-16-10.png)\n\nimp methods\n\n- createStore\n- bindActionCreators\n- combineReducers\n\n### Example\n\n```js\nconst redux = require('redux');\nconst createStore = redux.createStore;\n\n//action types\nconst CAKE_ORDERED = 'CAKE_ORDERED';\nconst CAKE_RESTOCK = 'CAKE_RESTOCK';\n\n//action  creators\nfunction orderCake() {\n  return {\n    type: CAKE_ORDERED,\n  };\n}\nfunction restockCake(qty = 1) {\n  return {\n    type: CAKE_RESTOCK,\n    payload: qty,\n  };\n}\n\n// init state\nconst initState = {\n  noOfCakes: 10,\n};\n\n//reducer\nconst reducer = (state = initState, action) => {\n  switch (action.type) {\n    case CAKE_ORDERED:\n      return {\n        ...state,\n        noOfCakes: state.noOfCakes - 1,\n      };\n    case CAKE_RESTOCK: {\n      return {\n        ...state,\n        noOfCakes: state.noOfCakes + action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\n//state\nconst store = createStore(reducer);\nconsole.log('Initial State', store.getState());\n\nconst unsubscribe = store.subscribe(() =>\n  console.log('Update State', store.getState())\n);\n\nstore.dispatch(orderCake());\nstore.dispatch(orderCake());\nstore.dispatch(restockCake(2));\n\nunsubscribe();\n```\n\n### bindActionCreators\n\n- `bindActionCreators` : a helper method that turns an object whose values are action creators, into an object with the same keys, but with every function wrapped into a dispatch call so they may be invoked directly.\n\n```js\nconst actions = redux.bindActionCreators(\n  { orderCake, restockCake },\n  store.dispatch\n);\nactions.orderCake();\nactions.restockCake(1);\n```\n\n### Combine Reducers\n\n```js\nconst rootReducer = redux.combineReducers({\n  cake: cakeReducer,\n  iceCream: iceCreamReducer,\n});\n\nconst store = redux.createStore(rootReducer);\n```\n\n### Apply Middleware\n\n```js\nconst reduxLogger = require('redux-logger');\nconst logger = reduxLogger.createLogger();\nconst store = redux.createStore(rootReducer, applyMiddleware(logger));\n```\n\n### Redux Thunk\n\n[[learning.redux.thunk]]\n\n","n":0.065}}},{"i":89,"$":{"0":{"v":"Thunk","n":1},"1":{"v":"\n- a middleware that allows an action creator function to return a function instead of an action.\n- the returned function gets dispatch as an argument\n- the function can introduce side effects and also dispatch actions\n\n```js\nconst redux = require('redux');\nconst reduxLogger = require('redux-logger');\nconst reduxThunk = require('redux-thunk').default;\n\n// action types\nconst FETCH_USERS_REQUESTED = 'FETCH_USERS_REQUESTED';\nconst FETCH_SUCCESS = 'FETCH_SUCCESS';\nconst FETCH_FAILED = 'FETCH_FAILED';\n\n//action creators\n\nconst fetchUsersReq = () => {\n  return {\n    type: FETCH_USERS_REQUESTED,\n  };\n};\n\nconst fetchUserSuccess = (data) => {\n  return {\n    type: FETCH_SUCCESS,\n    payload: data,\n  };\n};\n\nconst fetchFailed = (err) => {\n  return {\n    type: FETCH_FAILED,\n    payload: err,\n  };\n};\n\n//initstate\n\nconst initState = {\n  loading: true,\n  data: [],\n  error: '',\n};\n\n//reducer\n\nconst userReducer = (state = initState, action) => {\n  switch (action.type) {\n    case FETCH_USERS_REQUESTED: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case FETCH_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n        data: action.payload,\n        error: '',\n      };\n    }\n    case FETCH_FAILED:\n      return {\n        loading: false,\n        data: [],\n        error: action.payload,\n      };\n  }\n};\n\n//store\n\nconst store = redux.createStore(\n  userReducer,\n  redux.applyMiddleware(reduxLogger.createLogger(), reduxThunk)\n);\n\nconst fetchUsers = () => {\n  return function (dispatch) {\n    dispatch(fetchUsersReq());\n    fetch('https://jsonplaceholder.typicode.com/todos')\n      .then((response) => response.json())\n      .then((json) => dispatch(fetchUserSuccess(json.slice(0, 4))))\n      .catch((err) => dispatch(fetchFailed(err.message)));\n  };\n};\nstore.dispatch(fetchUsers());\n```\n\n","n":0.076}}},{"i":90,"$":{"0":{"v":"Redux Toolkit","n":0.707},"1":{"v":"\n- Redux toolkit serves as an abstraction over redux. It gives good DX and eradicates the need for a lot of boiler plate code.\n","n":0.204}}},{"i":91,"$":{"0":{"v":"React Redux","n":0.707},"1":{"v":"\n- React-redux is a lib that provides bindings to use React and redux(toolkit) together in an application.\n\n## Links\n\n- https://www.youtube.com/watch?v=9boMnm5X9ak&list=PLC3y8-rFHvwheJHvseC3I0HuYI2f46oAK\n- https://github.com/gopinav/Redux-Toolkit-Tutorials/blob/master/redux-demo\n- library for state management.\n\n## store\n\n- state container that stores the application state.\n\n### createStore\n\n- method that takes 2 arguments\n  - reducer\n  - applyMiddleware method (optional)\n\n```js\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware));\n```\n\n## reducer\n\npure function, takes 2 arguments\n\n- initial state\n- action\n  returns new state\n\n```js\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_USERS_REQUESTED:\n      return {\n        ...state,\n        loading: true,\n      };\n    case FETCH_USERS_SUCCEEDED:\n      return {\n        loading: false,\n        users: action.payload,\n        error: '',\n      };\n  }\n};\n```\n\n## action\n\n- object\n  - type (required)\n  - payload (optional)\n\n```js\nconst succeed = {\n  type: FETCH_USERS_SUCCEEDED,\n  payload: users,\n};\n```\n\n## Action creator\n\nAction creator: method that returns an action.\n\n```js\nconst fetchUsersSuccess = (users) => {\n  return {\n    type: FETCH_USERS_SUCCEEDED,\n    payload: users,\n  };\n};\n```\n\n## redux thunk\n\nmiddleware that allows you to write action creators which return a function instead of an object.\n\n```js\nconst fetchUsers = () => {\n  return function (dispatch) {\n    dispatch(fetchUsersRequest());\n    axios\n      .get('https://jsonplaceholder.typicode.com/users')\n      .then((response) => {\n        // response.data is the users\n        const users = response.data.map((user) => user.id);\n        dispatch(fetchUsersSuccess(users));\n      })\n      .catch((error) => {\n        // error.message is the error message\n        dispatch(fetchUsersFailure(error.message));\n      });\n  };\n};\n\nstore.dispatch(fetchUsers());\n```\n","n":0.074}}},{"i":92,"$":{"0":{"v":"Misc","n":1},"1":{"v":"## Immer\n\n- Immer is a package that allows you to work with immutable state in a more convenient way.\n- The basic idea is that with Immer you will apply all your changes to a temporary draft, which is a proxy of the currentState. Once all your mutations are completed, Immer will produce the nextState based on the mutations to the draft state. This means that you can interact with your data by simply modifying it while keeping all the benefits of immutable data.\n- by default implemented in redux toolkit\n\n```js\nconst produce = require(\"immer\").produce;\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case STREET_UPDATED:\n      //   return {\n      //     ...state,\n      //     address: {\n      //       ...state.address,\n      //       street: action.payload\n      //     }\n      //   }\n      return produce(state, (draft) => {\n        draft.address.street = action.payload;\n      });\n    default: {\n      return state;\n    }\n  }\n};\n```\n","n":0.085}}},{"i":93,"$":{"0":{"v":"React","n":1},"1":{"v":"\n## Resources\n\n- [React](https://sapient.udemy.com/course/complete-react-developer-zero-to-mastery/)\n- https://kentcdodds.com/blog\n- https://overreacted.io/\n- [React Examples](https://reactjsexample.com/)\n\n## Core fundamentals\n- x jsx, x rerendering, x virtual dom, state, props, components, parent, child, lifecycle, hooks \n## to make framework\n- [x] routing\n- [x] error handling\n- [ ] state management(prop drilling) context api, redux-toolkit\n- [ ] data fetching: react query, axios\n\n## Adavenced\n- performance and optimatisation: memoization : x useMemo, x useCallback, lazyloading\n- PWAs\n- configuration: babel, webpack, css preprocessing\n\n","n":0.125}}},{"i":94,"$":{"0":{"v":"Legacy","n":1}}},{"i":95,"$":{"0":{"v":"React Children","n":0.707},"1":{"v":"\n\n## React Children\n\n```jsx\n  const Children: {\n        map<T, C>(children: C | ReadonlyArray<C>, fn: (child: C, index: number) => T):\n            C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;\n        forEach<C>(children: C | ReadonlyArray<C>, fn: (child: C, index: number) => void): void;\n        count(children: any): number;\n        only<C>(children: C): C extends any[] ? never : C;\n        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;\n    };\n```\n\nExample:\n```js\nimport axios from \"axios\";\nimport React, { useEffect } from \"react\";\nimport { useState } from \"react\";\n\nexport const CurrentUserLoader = ({ children }) => {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      const response = await axios.get(\"/current-user\");\n      setUser(response.data);\n    })();\n  }, []);\n\n  return (\n    <>\n      {React.Children.map(children, (c) => {\n        if (React.isValidElement(c)) {\n          return React.cloneElement(c, { user });\n        }\n        return c;\n      })}\n    </>\n  );\n};\n\n```","n":0.087}}},{"i":96,"$":{"0":{"v":"Clone Element","n":0.707},"1":{"v":"\n\nclone element\n```js\nimport { cloneElement } from 'react';\n\n// ...\nconst clonedElement = cloneElement(\n  <Row title=\"Cabbage\">\n    Hello\n  </Row>,\n  { isHighlighted: true },\n  'Goodbye'\n);\n\nconsole.log(clonedElement); \n```\n\nTo override the props of some React element, pass it to cloneElement with the props you want to override:\n\n```jsx\n\nimport { cloneElement } from 'react';\n\n// ...\nconst clonedElement = cloneElement(\n  <Row title=\"Cabbage\" />,\n  { isHighlighted: true }\n);\nHere, the resulting cloned element will be <Row title=\"Cabbage\" isHighlighted={true} />.\n```","n":0.124}}},{"i":97,"$":{"0":{"v":"Testing","n":1},"1":{"v":"Jest:\n- JS testing framework\n- a test runner that finds test, run test, determines the result of tests and reports back in a human readable manner.\n\nRTL\n- JS testing utility that provides virtual DOm for testing react components.\n- It provides a virtual DOm that we can interact with and verify the component behaviour.\n\n## Types of test\n- unit test: focus on testing an individual building blocks of an application like class, fn or components. Tested in isolation. Dependency are mocked.\n- integration test: focus on testing combination of units.\n- E2E test: focus on testing entire application flow.\n\n\n","n":0.104}}},{"i":98,"$":{"0":{"v":"Router","n":1},"1":{"v":"\nUpdtaes are done in v6 of react-router-dom: See here: [[React Router v6|learning.react.router#react-router-v6]]\n\n## Browser Router\n\n```jsx\n<BrowserRouter>\n  // components you'd like to add routing capability\n</BrowserRouter>\n```\n\n## Router\n\nSpecify the path and component to render for that path.\n\nNOTE:\n\n- The below code will render about home and about component for path _/about_.\n\n```jsx\n    <Route path= '/' component= {Home} />\n    <Route path= '/about' component= {About} />\n    <Route path= '/shop/:id' component= {Shop} /> // dynamic route\n```\n\n## Switch\n\nStop rendering after first match.\nNOTE:\n\n- The below code will only render Home component for path _/about_. Since first match is*/*\n\n```jsx\n<Switch>\n  <Route path=\"/\" component={Home} />\n  <Route path=\"/about\" component={About} />\n</Switch>\n```\n\nTo overcome this, use the Route property: exact.\n\n```jsx\n<Switch>\n  <Route path=\"/\" exact component={Home} />\n  <Route path=\"/about\" component={About} />\n</Switch>\n```\n\n## Link\n\nAdding hyperlinks to your component. Thakes only one argument 'to'\n\n```jsx\n<Link to='/about'>\n <li>About</li>\n</Link>\n<Link to={`/shop/${item.id}`}> {item.name} </Link>\n```\n\nThe Link passes props to the component that gets rendered.\n\n## React Router Hooks\n\n### useParams\n\nuseParams(): get props passed by Link to the component.\n\n```jsx\n<Link to= {`/shop/${item.id}`}>View Details</Link>\n...\n<Route path='/shop/:id' component={ItemDetails}>\n...\nconst params = useParams() //can now access the param id with params.id\n```\n\n### useNavigate\n\n- Before v6, we had <Redirect to='/' /> to redirect from a component. Now <Redirect /> is replaced with <Navigate />. We can also use new hook useNavigate to further redirect. This also replaces the **goBack** method of react-router-dom.\n\n```jsx\nconst navigate = useNavigate();\nuseEffect(()=> {\n    ...\n    if(res.error === '404'){\n        navigate('/')\n    }\n},[])\n```\n\n- If you want to go back to the most recent page from history you can write\n\n```jsx\n<div onClick={() => navigate(-1)}> Go Back </div>\n```\n\n### useLocation\n\nThe new hook useLocation to get the location of route.\n\n```jsx\nconst location = useLocation();\nconst { pathname } = location; // path name is the route; /shop/231\n```\n\n## React Router v6\n\nThe v6 has various backwards incomaptible changes: Here is the changelog of them\n\n## Changes\n\n- `<Switch>` has been removed from v6.\n- You need to wrap all your Route under `<Routes>`\n- no need to do _exact_ anymore.\n- `<Redirect />` is repaced with `<Navigate />`\n- **component** property of `<Route>` is changed to **element**. It takes JSX as an argument.\n\nBefore:\n\n```jsx\n<Route path= '/' component={Home}>\n```\n\nNew:\n\n```jsx\n<Routes>\n    <Route path='/' element={<About />}>\n</Routes>\n```\n\n- can access the params passed to Component only with [[useParams|learning.react.router#useparams]]. The ({match}) prop is no longer valid\n\n- **goBack** method is no longer valid\n\n## useRoutes\n","n":0.054}}},{"i":99,"$":{"0":{"v":"React Patterns","n":0.707},"1":{"v":"\n## Layout components\n\n- design pattern used to structure the layout of a React application\n- focus on organizing other components within a web page. like split screen, lists, modal\n-  promotes code reusability, separation of concerns, and a clean, organized codebase.\n\n\n### key concepts\nthe core components of our page should be unaffected by its placement.\n- reusability\n- separation of concerns: separating layout logic from business logic, you can focus on the specific responsibilities of each component. \n\n### example\n\n- for split screen type of layouts we should try to keep the stylings in the parent components and not the individual left and right.\n\n- for lists: example of reusability \n\n```jsx\n\n//RegularList.jsx\nexport const RegularList = ({ items, sourceName, ItemComponent }) => {\n  return (\n    <>\n      {items.map((item, i) => (\n        <ItemComponent key={i} {...{ [sourceName]: item }} />\n      ))}\n    </>\n  );\n};\n\n//SmallAuthorListItem.jsx\n\nexport const SmallAuthorListItem = ({author}) => {\n  const {name, age} = author;\n  return(\n    <p> Name: {name}, Age: {age}</p>\n  )\n}\n\n// App.jsx\n\n<RegularList\n        items={authors}\n        sourceName={\"author\"}\n        ItemComponent={SmallAuthorListItem}\n      />\n\n      <RegularList\n        items={books}\n        sourceName={\"book\"}\n        ItemComponent={SmallAuthorListItem}\n      />\n\n```\n\n","n":0.079}}},{"i":100,"$":{"0":{"v":"Render Prop","n":0.707},"1":{"v":"\n## reference\n- [Render Props Pattern](https://www.patterns.dev/react/render-props-pattern)\n- [cloneElement – React](https://react.dev/reference/react/cloneElement#passing-data-with-a-render-prop)\n\n## overview\n\nA render prop is a prop on a component, whose value is a function that returns a JSX element. The component itself does not render anything besides the render prop. Instead, the component simply calls the render prop, instead of implementing its own rendering logic.\n\n- **NOTE**: a render prop doesn’t have to be called render. Any prop that renders JSX is considered a render prop\n\n**props.children is also technically a render prop**\n\n## Example\n\nTo the Component element, we have to pass a prop called render, which is a function that returns a React element.\n\n```jsx\n<Title render={() => <h1>I am a render prop!</h1>} />\nconst Title = (props) => props.render();\n\n```\n\n## Key feature\n\n- **Reusability**: the component that receives the prop is very reusable. We can use it multiple times, passing different values to the render prop each time.\n    ```jsx\n    <Title render={() => <h1>✨ First render prop! ✨</h1>} />\n    <Title render={() => <h2>🔥 Second render prop! 🔥</h2>} />\n    ```\n\n\n##  Why would you want to use this?\n\nA component that takes a render prop usually does a lot more than simply invoking the render prop. Instead, we usually want to pass data from the component that takes the render prop, to the element that we pass as a render prop!\n\n```jsx\nfunction Component(props) {\n  const data = { ... }\n\n  return props.render(data)\n}\n\n//The render prop can now receive this value that we passed as its argument.\n<Component render={(data) => <ChildComponent data={data} />}\n\n```\n\n\n### example\n\nInput value in °F and °K \n\n```jsx\nfunction Input(props) {\n  const [value, setValue] = useState(\"\");\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        placeholder=\"Temp in °C\"\n      />\n      {props.render(value)}\n    </>\n  );\n}\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>☃️ Temperature Converter 🌞</h1>\n      <Input\n        render={(value) => (\n          <>\n            <Kelvin value={value} />\n            <Fahrenheit value={value} />\n          </>\n        )}\n      />\n    </div>\n  );\n}\n\nfunction Kelvin({ value = 0 }) {\n  return <div className=\"temp\">{value + 273.15}K</div>;\n}\n\nfunction Fahrenheit({ value = 0 }) {\n  return <div className=\"temp\">{(value * 9) / 5 + 32}°F</div>;\n}\n```\n\n\n### additing addiional props to an exising element (replacing clone elemenet)\n\n[[Cloning | learning.react.legacy.clone-element]]\n children makes it hard to tell how the data flows through your app. Hence we use other alternaives like render prop pattern.\n\n Instead of using cloneElement, consider accepting a render prop like renderItem. Here, List receives renderItem as a prop. List calls renderItem for every item and passes isHighlighted as an argument:\n\n```jsx\nexport default function List({ items, renderItem }) {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  return (\n    <div className=\"List\">\n      {items.map((item, index) => {\n        const isHighlighted = index === selectedIndex;\n        return renderItem(item, isHighlighted);\n      })}\n  )\n ```\n\n The renderItem prop is called a “render prop” because it’s a prop that specifies how to render something. For example, you can pass a renderItem implementation that renders a <Row> with the given isHighlighted value:\n \n```jsx\n<List\n  items={products}\n  renderItem={(product, isHighlighted) =>\n    <Row\n      key={product.id}\n      title={product.title}\n      isHighlighted={isHighlighted}\n    />\n  }\n/>\n```\n\n\n## Cons\n\n- The issues that we tried to solve with render props, have largely been replaced by React Hooks. As Hooks changed the way we can add reusability and data sharing to components, they can replace the render props pattern in many cases.\n\n- Since we can’t add lifecycle methods to a render prop, we can only use it on components that don’t need to alter the data they receive.\n\n### example of custom hooks\n\n```jsx\nimport React, { useState, useEffect } from 'react';\n\n// Render Prop Component implemented with a functional component\nconst DataFetcher = ({ url, children }) => {\n  const [state, setState] = useState({\n    loading: true,\n    error: null,\n    data: null,\n  });\n\n  useEffect(() => {\n    let isMounted = true;\n\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n        if (isMounted) setState({ loading: false, data });\n      } catch (error) {\n        if (isMounted) setState({ loading: false, error });\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      isMounted = false; // Cleanup to prevent setting state on unmounted component\n    };\n  }, [url]);\n\n  return children(state);\n};\n\n// Usage of Render Prop\nconst ComponentUsingRenderProp = () => (\n  <DataFetcher url=\"https://api.example.com/data\">\n    {({ loading, error, data }) => {\n      if (loading) return <p>Loading...</p>;\n      if (error) return <p>Error: {error.message}</p>;\n      return <div>Data: {JSON.stringify(data)}</div>;\n    }}\n  </DataFetcher>\n);\n\n// custom hook: The custom hook approach remains largely the same, emphasizing code reuse and readability:\n\nimport React, { useState, useEffect } from 'react';\n\n// Custom Hook\nfunction useDataFetcher(url) {\n  const [state, setState] = useState({\n    loading: true,\n    error: null,\n    data: null,\n  });\n\n  useEffect(() => {\n    let isMounted = true;\n\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n        if (isMounted) setState({ loading: false, data });\n      } catch (error) {\n        if (isMounted) setState({ loading: false, error });\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [url]);\n\n  return state;\n}\n\n// Usage of Custom Hook\nconst ComponentUsingHooks = () => {\n  const { loading, error, data } = useDataFetcher('https://api.example.com/data');\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n  return <div>Data: {JSON.stringify(data)}</div>;\n};\n```","n":0.035}}},{"i":101,"$":{"0":{"v":"Observer Pattern with events","n":0.5},"1":{"v":"\nEvent emitters\n\n## Example\n\n- Button.jsx\n```jsx\nimport { emitter } from \"../App\";\n\nconst Buttons = (props) => {\n  const onIncrementCounter = () => {\n    emitter.emit(\"increment\");\n  };\n  const onDecrementCounter = () => {\n    emitter.emit(\"decrement\");\n  };\n  return (\n    <div>\n      <button onClick={onIncrementCounter}>➕</button>\n      <button onClick={onDecrementCounter}>➖</button>\n    </div>\n  );\n};\nexport default Buttons;\n\n```\n- Counter.jsx\n\n\n```jsx\nimport { useEffect, useState } from \"react\";\nimport { emitter } from \"../App\";\n\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    const onIncrement = () => {\n      setCount((count) => count + 1);\n    };\n    const onDecrement = () => {\n      setCount((count) => count - 1);\n    };\n    emitter.on(\"increment\", onIncrement);\n    emitter.on(\"decrement\", onDecrement);\n    return () => {\n      emitter.off(\"increment\", onIncrement);\n      emitter.off(\"decrement\", onDecrement);\n    };\n  }, []);\n  return <div>#: {count}</div>;\n};\nexport default Counter;\n\n```","n":0.095}}},{"i":102,"$":{"0":{"v":"Higher Order Components","n":0.577},"1":{"v":"- A component that returns another component\n\nMain Goal:\n- improve existing components w/o modifying code\n- allows us to add extra functionality to an existing component.\n\n- usually starts with lowercase\n\n\n## Examples\n- logs props\n```jsx\nexport const checkProps = (Component) => {\n  return (props) => {\n    console.log(props);\n    return <Component {...props} />;\n  };\n};\n// we can now use checkprops HOC in App.jsx or anywhere else like\nconst UserInfoWrapper = checkProps(UserInfo);\n<UserInfoWrapper name=\"jojo\" >\n```\n\n- A HOC that adds user props.\n\n```jsx\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nexport const includeUser = (Component, userId) => {\n  return (props) => {\n    const [user, setUser] = useState(null);\n\n    useEffect(() => {\n      (async () => {\n        const response = await axios.get(`/users/${userId}`);\n        setUser(response.data);\n      })();\n    });\n\n    return <Component {...props} user={user} />;\n  };\n};\n\n//can be used as\nconst UserInfoWithUser = includeUser(UserInfo, \"2\");\n...\nreturn <UserInfoWithUser />\n\n```\n","n":0.089}}},{"i":103,"$":{"0":{"v":"Functional Programming","n":0.707},"1":{"v":"-  is a declarative programming paradigm where programs are constructed by composing pure functions.\n- encourages code reusability and maintainability.\n-  treating [[functions as a first class citizens| learning.react.fundamentals.function-first-class-entity]].\n\nApplications of FP\n- Functional Component\n- HOC\n_ Recurrsive Pattern\n- Composition\n- Partial Component\n\n\n\n\n","n":0.164}}},{"i":104,"$":{"0":{"v":"Custom Hooks","n":0.707},"1":{"v":"\n- hooks that we create by combining the exuting hooks by React.\n- we encapsulate common logic into a hook that can be used by other components. Allowing us to share complex behavior among multiple components.\n- must begin with `use`\n\n```jsx\nexport const useCurrentUser = () => {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      const response = await axios.get(\"/current-user\");\n      setUser(response.data);\n    })();\n  }, []);\n\n  return user;\n};\n```","n":0.121}}},{"i":105,"$":{"0":{"v":"Controlled Uncontrolled","n":0.707},"1":{"v":"\n## Uncontrolled component\n\nThese components manage their state independently of React's state management, and rely on the DOM to handle interactions.\n\n```jsx\nconst Form = () => {\n  const nameRef = useRef();\n  const nameRef = useRef();\n\n  const onSubmit = () => {\n    console.log(\"Name: \" + nameRef.current.value);\n    console.log(\"Email: \" + emailRef.current.value);\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"text\" name=\"name\" ref={nameRef} required />\n      <input type=\"email\" name=\"email\" ref={emailRef} required />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}\n\nexport default Form\n```\n\n## controlled component\nReact manages the state of these components, so any changes to the state are immediately reflected in the UI.\n\n**Pros**\n- These are a good choice for forms where you need tight control over the data, such as dynamic forms or when performing immediate input validation\n\n\n```jsx\nconst Form = () => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\n  const onSubmit = () => {\n    console.log(\"Name: \" + name);\n    console.log(\"Email: \" + email);\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n        required\n      />\n      <input\n        type=\"email\" \n        name=\"email\" \n        value={email} \n        onChange={(e) => setEmail(e.target.value)} \n        required\n      />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}\n\nexport default Form\n```","n":0.074}}},{"i":106,"$":{"0":{"v":"Compound","n":1},"1":{"v":"\n\n## Example\n- Card.jsx\n```jsx\nimport { createContext, useContext } from \"react\";\n\nconst Context = createContext(null);\n\nconst Body = ({ children }) => {\n  return <div style={{ padding: \".5rem\" }}>{children}</div>;\n};\n\nconst Header = ({ children }) => {\n  const { test } = useContext(Context);\n  return (\n    <div\n      style={{\n        borderBottom: \"1px solid black\",\n        padding: \".5rem\",\n        marginBottom: \".5rem\",\n      }}\n    >\n      {children}\n      {test}\n    </div>\n  );\n};\nconst Footer = ({ children }) => {\n  return (\n    <div\n      style={{\n        borderTop: \"1px solid black\",\n        padding: \".5rem\",\n        marginTop: \".5rem\",\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst Card = ({ test, children }) => {\n  return (\n    <Context.Provider value={{ test }}>\n      <div style={{ border: \"1px solid black\" }}>{children}</div>\n    </Context.Provider>\n  );\n};\n\nexport default Card;\n\nCard.Header = Header;\nCard.Body = Body;\nCard.Footer = Footer;\n\n```\n\n- App.jsx\n```jsx\n\nimport Card from \"./components/card\";\n\nfunction App() {\n  return (\n    <Card test=\"Value\">\n      <Card.Header>\n        <h1 style={{ margin: \"0\" }}>Header</h1>\n      </Card.Header>\n      <Card.Body>\n        He hid under the covers hoping that nobody would notice him there. \n      </Card.Body>\n      <Card.Footer>\n        <button>Ok</button>\n        <button>Cancel</button>\n      </Card.Footer>\n    </Card>\n  );\n}\n\nexport default App;\n\n```","n":0.081}}},{"i":107,"$":{"0":{"v":"Portal","n":1},"1":{"v":"\nPortals enable you to render a child component into a DOM node that exists outside the parent component's DOM hierarchy. \n### Use Cases:\nThey are particularly helpful for UI elements that require a higher z-index or need to be visually detached from their parent, such as modals, tooltips, or popups. \n### How they Work:\nReact uses the ReactDOM.createPortal() method to render a component into a specific DOM node. \n\n```jsx\n    import React from 'react';\n    import ReactDOM from 'react-dom';\n\n    const Modal = ({ children }) => {\n      return ReactDOM.createPortal(\n        <div className=\"modal\">\n          {children}\n        </div>,\n        document.getElementById('modal-root') // Or any other DOM node\n      );\n    };\n```","n":0.101}}},{"i":108,"$":{"0":{"v":"Performance","n":1},"1":{"v":"\n# Performance\nFor every state update, React component re-renders. When the parent component re-renders, all its children are re-rendered. This causes a performance issue. To minimize re-rendering of Components which are unaffected by the state change, we use advance concepts like memoization.\n\n## Memoisation\n- If the props of Child Component does not change, it will not rerender along with the Parent.\n\n### React.memo\nMemoizes a component.\n\n#### Functional Component\nWrap component in React.memo() while exporting for functional component.\n```js\nexport default React.memo(Card); // Card is name of component\n```\n#### Class Component\nExtend React.PureComponent instead of React.Component\n\n### useCallback hook\nIt returns a memoized version of the callback that only changes if one of the dependencies has changed. This is necessary when App sends callback as a Prop to child.\n- Rule of Thumb: always wrap _the function in useCallback_ which is passed as a prop if the __component is memoized__.\n\n```js\n  const handleChange = useCallback((e) => {\n    setSearchKey(e.target.value);\n  },[])\n```\n\n### useMemo hook\nuseMemo will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.\n\n\n## Code splitting\n\n```jsx\nimport OtherComponent from './OtherComponent';\nAfter:\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\n```\n\n## Suspense\n\n```jsx\n  <Suspense fallback={<div>Loading...</div>}></Suspense>\n\n```\n- Suspense component will be rendered when a child ran into async render and all children in Suspense will be re-rendered after async resolve.\neg: https://bigfrontend.dev/react-quiz/suspense-3","n":0.07}}},{"i":109,"$":{"0":{"v":"Re Rendering","n":0.707},"1":{"v":"\n- each re-render begins with a state update in a component. \n- Re-render cascade down the components(if parent state change, its nested components will re-render)\n- Re-rendering all components unnecessary can cause performance issues.\n\n\nThere are several ways to tackle re-rendering based on the code structure. Try to look for Separation of concern(moving state up/creating a separate stateful component) in components before actually utilizing React.memo or usecallback/memo hooks. They are perfectly valid solutions but sometimes unnecessary. For example:\n\n```jsx\nexport default function App() {\n      const [visible, setVisible] = useState(false);\n\n  return (\n    <>\n        <Button onClick={() => setVisible(true)}>Show dialog</Button>\n        {visible && <ModalDialog onClose={() => setVisible(false)} />}      \n        <SlowComponent />\n        <BlaBla />\n        <AdditionalComplexThings />\n    </>\n  );\n}\n```\nThis can be solved by separation of concern. Just by moving state in a separate stateful component\n```jsx\nexport default function App() {\n  return (\n    <>\n      <ToggleButtonWithDialog />\n      <SlowComponent />\n      <BlaBla />\n      <AdditionalComplexThings />\n    </>\n  );\n}\n```\n\n### Drawbacks of custom hooks\n\n- Custom hooks are typically not the answer to addressing re-rendering issues. While they can help organize and tidy up code, they do not prevent re-rendering when the state is updated. In fact, if a custom hook includes additional states used by multiple components, updating a single state will cause all components using that custom hook to re-render.\n\n\n### Passing components as props.\nThe components which are passed as props to component A and are rendered in it won't re-render if the A re-renders. \nBelow is an example of passing nodes as props. \n\n```jsx\nconst DynamicScroll = ({ content }: { content: ReactNode }) => {\n  const [position, setPosition] = useState(170);\n  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n    const newPosition = calculatePosition(e.currentTarget.scrollTop);\n    setPosition(Math.max(113, newPosition));\n  };\n\n  const blockColor = calculateColor(position);\n\n  return (\n    <ScrollableContainer onScroll={handleScroll}>\n      <DynamicBlock top={position === 113 ? 113 : position} color={blockColor}>\n        🛒\n      </DynamicBlock>\n      {content}\n    </ScrollableContainer>\n  );\n};\n\n...\n//App component\n\nexport default function App() {\n  return (\n    <DynamicScroll\n      content={\n        <>\n          <SlowComponent />\n          <BlaBla />\n          <AdditionalComplexThings />\n        </>\n      }\n    />\n  );\n}\n```\n\nHere, update in state of Dynamic scroll will not re-render the 3 components passed as prop to `DynamicScroll`.\n\n- You can also use the children prop. It will also have the same effect.\n\n```jsx\nconst DynamicScroll = ({ children }) => {\n ...\n\n  return (\n    <ScrollableContainer onScroll={handleScroll}>\n      <DynamicBlock top={position === 113 ? 113 : position} color={blockColor}>\n        🛒\n      </DynamicBlock>\n      {content}\n    </ScrollableContainer>\n  );\n};\n\n...\n//App component\n\nexport default function App() {\n  return (\n    <DynamicScroll>\n          <SlowComponent />\n          <BlaBla />\n          <AdditionalComplexThings />\n    </DynamicScroll>\n  );\n}\n```\n\n\n- Below is the explanation of why React treats children nodes differently and why they are not re-rendered on state update.\n\n- ![](/assets/images/2025-01-17-18-46-03.png)\n\n- ![](/assets/images/2025-01-17-18-45-16.png)","n":0.05}}},{"i":110,"$":{"0":{"v":"Mui","n":1},"1":{"v":"\n## Resource\n\n- [Codevolution](https://www.youtube.com/watch?v=BHEPVdfBAqE&list=PLC3y8-rFHvwh-K9mDlrrcDywl7CeVL2rO&index=1)\n","n":0.577}}},{"i":111,"$":{"0":{"v":"Interview Quiz","n":0.707},"1":{"v":"> source: Akshay Saini\n\n0. What is Lifting State Up in React?\n1. What is React context?\n2. What are different ways to add CSS in your app?\n3. What is Hot Module Replacement?\n4. What is the use of Parcel, Vite, Webpack?\n5. How does create-react-app work?\n\n6. What is Tree Shaking?\n7. Difference b/w dependency and devDependency\n8. What is npx and npm?\n9. Difference b/w package .json and package-lock .json\n10. Difference between console .log(<HeaderComponent/>) and console .log(HeaderComponent());\n\n11. What is React.Fragment?\n12. What is the purpose of dependency array in useEffect? What is the difference when it is used and when it is not used?\n13. What if 2 components are given will the state change in one component will effect the other component’s state (child)?\n14. What is the use of return in useEffect ?\n15. Difference b/w client-side routing and server-side routing?\n\n16. Explain the concept of code splitting and its benefits in React.\n17. How does React handle routing and navigation?\n18. What are higher-order components (HOC) in React?\n19. What are controlled and uncontrolled components?\n20. Explain the concept of reconciliation in React.","n":0.077}}},{"i":112,"$":{"0":{"v":"Hooks","n":1},"1":{"v":"\n## Cheatsheet\n- https://react-hooks-cheatsheet.com/\n\n## useRef\n- returns an object {current: <initialValuePassedToUseRef>}\n- You can store information between re-renders (unlike regular variables, which reset on every render).\n- mutating ref.current does not re-render component since it is a plain js object.\n\n\n## useLayoutEffect\n\n- useLayoutEffect is a version of useEffect that fires before the browser repaints the screen.\n- is synchronous. Hurts performance, prefer useEffect whereever possible\n\n- After every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values. Before your component is removed from the DOM, React will run your cleanup function.\n\n- [Difference between useeffect and useLayoutEffect with examples](https://blog.logrocket.com/useeffect-vs-uselayouteffect-examples/)\n\n## useState\n- https://jser.dev/2023-06-19-how-does-usestate-work/\n\n# All kinds of effects\nRule:\n\n- Rendering (high to low): main thread -> useInsertionEffect -> useLayoutEffect -> useEffect\n\n- re- Rendering (high to low): main thread -> useInsertionEffect cleanup, then immediately executed -> useLayoutEffect clean up then immediately executed. -> useEffect ALL cleanup -> useEffect executed one by one by order\n\n- a child's useEffect is ran first then its parent's: https://bigfrontend.dev/react-quiz/useeffect-iii\n\n```js\n// This is a React Quiz from BFE.dev \n\nimport React, { useState, useEffect, useLayoutEffect, useInsertionEffect} from 'react'\nimport ReactDOM from 'react-dom'\n\nfunction App() {\n  console.log(1)\n  const [state, setState] = useState(0)\n  useEffect(() => {\n    setState(state => state + 1)\n  }, [])\n\n  useEffect(() => {\n    console.log(2)\n    return () => {\n      console.log(3)\n    }\n  }, [state])\n\n  useEffect(() => {\n    console.log(4)\n    return () => {\n      console.log(5)\n    }\n  }, [state])\n\n  useLayoutEffect(() => {\n    console.log(6)\n    return () => {\n      console.log(7)\n    }\n  }, [state])\n\n  useInsertionEffect(() => {\n    console.log(8)\n    return () => {\n      console.log(9)\n    }\n  }, [state])\n  console.log(10)\n  return null\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App/>)\n\n```\n> 1\n10\n8\n6\n2\n4\n1\n10\n9\n8\n7\n6\n3\n5\n2\n4","n":0.062}}},{"i":113,"$":{"0":{"v":"Global State Management","n":0.577},"1":{"v":"\n## Context\nContext lets a component provide some information to the entire tree below it.\n\n\n- To pass context:\n  - Create and export it with export const MyContext = createContext(defaultValue).\n  - Pass it to the useContext(MyContext) Hook to read it in any child component, no matter how deep.\n  - Wrap children into <MyContext.Provider value={...}> to provide it from a parent.\n\nContext.ts\n```ts\nimport { createContext } from \"react\";\n\nconst ImageContext = createContext(500);\n```\n\nApp.ts\n\n```ts\nconst [isLarge, setIsLarge] = useState(false);\nconst imageSize = isLarge ? 150 : 100;\n\n<ImageContext.Provider value={imageSize}>\n    {props.children}\n</ImageContext.Provider>\n```\nSomeapp.ts (considering very low in the tree)\n```ts\nconst imageSize = useContext(ImageContext);\n<img width = {imageSize} height = {imageSize}>\n```\n","n":0.103}}},{"i":114,"$":{"0":{"v":"Fundamentals","n":1},"1":{"v":"\n## React\n\nA JS library for building User interfaces.\n\n- uses Virtual DOM\n- unindirectional data flow\n- reusable UI components\n\n## component\n\na fuction that returns markup\n\n## Functional components over Class\n\n- use functional comp over class, after 16.8 hooks can be used as lifecycle events.\n- use class component when you want a react functionality that is not available for functions yet, eg: error boundries\n- Only class components can be error boundaries. To make class component an error boundary we define a new lifecycle method called componentDidCatch(error, info).\n\nReactDOM.render function: takes 2 i/p\n\n- App\n- document.getElementById(\"root\")\n\n## JSX\n\nyou can use the conditional ? operator. it works inside JSX:\n\n```js\n<div>{isLoggedIn ? <AdminPanel /> : <LoginForm />}</div>\n```\n\nWhen you don’t need the else branch, you can also use a shorter logical && syntax:\n\n```js\n<div>{isLoggedIn && <AdminPanel />}</div>\n```\n\n## Pure components\n\nSome JavaScript functions are pure. A pure function:\n\n- Minds its own business. It does not change any objects or variables that existed before it was called.\n- Same inputs, same output. Given the same inputs, a pure function should always return the same result.\n\n## React State vs Props\n\n- State of a component is an object that holds some information that may change over the lifetime of the component.\n- props are inputs to a component, They are data passed down from a parent component to a child component.\n\nBoth props and state are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. Props get passed to the component similar to function parameters whereas state is managed within the component similar to variables declared within a function.\n\n## controlled and uncontrolled components\n\nIn Controlled components the form data is handled by react(eg: state) and with uncontrolled comp. form data is handled by DOM itself.\n\n### Controlled Components\n\nIn React, controlled and uncontrolled components are two different approaches to managing the state of a form component.\n\nA controlled component is a component that takes its current value through props and notifies changes through callbacks, like onChange. When a user enters data into a form element, the component's state is updated and the UI is re-rendered with the new values. In other words, the state of the component is controlled by React.\n\nHere's an example of a controlled component for an input field:\n\n```js\nimport React, { useState } from \"react\";\n\nfunction InputField() {\n  const [value, setValue] = useState(\"\");\n\n  function handleChange(event) {\n    setValue(event.target.value);\n  }\n\n  return <input type=\"text\" value={value} onChange={handleChange} />;\n}\n```\n\nIn this example, the value of the input field is controlled by the value state variable. The handleChange function updates the value state when the input field changes, and the new value is passed down to the input element as a prop.\n\n### Uncontrolled component\n\nan uncontrolled component is a component that manages its own state internally. In an uncontrolled component, the form data is handled by the DOM itself, instead of being managed by React.\n\nHere's an example of an uncontrolled component for an input field:\n\n```js\nimport React from \"react\";\n\nfunction InputField() {\n  function handleSubmit(event) {\n    console.log(\"Input value:\", event.target.elements.inputField.value);\n    event.preventDefault();\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" name=\"inputField\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n```\n\nIn this example, the form data is handled by the DOM. When the user submits the form, the handleSubmit function accesses the value of the input field directly from the DOM using event.target.elements.inputField.value.\n\n## Lifecycle phases\n\n- Mounting\n- updating\n- unmounting\n\n### Detail\n\n- **Mounting**: The component is ready to mount in the browser DOM. This phase covers initialization from\n  `constructor(), getDerivedStateFromProps(), render(), and componentDidMount()` lifecycle methods.\n\n- **Updating**: In this phase, the component gets updated in two ways, **sending the new props** and **updating the state** either from setState() or forceUpdate(). This phase covers `getDerivedStateFromProps(), shouldComponentUpdate(), render(), getSnapshotBeforeUpdate() and componentDidUpdate()` lifecycle methods.\n\n- **Unmounting**: In this last phase, the component is not needed and gets unmounted from the browser DOM. This phase includes `componentWillUnmount()` lifecycle method.\n\n![Lifecycle of component](/assets/images/2023-04-14-19-35-20.png)\n\n## Context\n\nContext provides a way to pass data through the component tree without having to pass props down manually at every level.\n\nFor example, authenticated users, locale preferences, UI themes need to be accessed in the application by many components.\n\n```js\nconst { Provider, Consumer } = React.createContext(defaultValue);\n```\n\n- To pass context:\n  - Create and export it with export const MyContext = createContext(defaultValue).\n  - Pass it to the useContext(MyContext) Hook to read it in any child component, no matter how deep.\n  - Wrap children into <MyContext.Provider value={...}> to provide it from a parent.\n\n## flushSync\nCall flushSync to force React to flush any pending work and update the DOM synchronously.\n```js\nimport { flushSync } from 'react-dom';\n\nflushSync(() => {\n  setSomething(123);\n});\n```\nExample\n\n```js\nfunction App() {\n  const [state, setState] = useState(0)\n  const onClick = () => {\n    console.log('handler')\n    flushSync(() => {\n      setState(state => state + 1)\n    })\n    console.log('handler ' + state)\n  }\n  console.log('render ' + state)\n  return <div>\n    <button onClick={onClick}>click me</button>\n  </div>\n}\n\nuserEvent.click(screen.getByText('click me'))\n\n/**\n * Output\n * \"render 0\"\n * \"handler\"\n * \"render 1\"\n * \"handler 0\"\n * **/\n```\n## TODO\n\n- React.StrictMode #learn\n","n":0.036}}},{"i":115,"$":{"0":{"v":"Virtual Dom","n":0.707},"1":{"v":"\n**Virtual DOM:**\nThe Virtual DOM is a concept within React that serves as a lightweight representation of the actual DOM (Document Object Model). It's a JavaScript object that mirrors the structure of the real DOM, containing elements, attributes, and content. The key difference is that the Virtual DOM is not directly tied to the browser's rendering engine, which makes it faster to manipulate and compare.\n\n**Reconciliation Process:**\nWhen a React component's state or props change, React performs a process called reconciliation to determine the minimum number of changes needed to update the actual DOM. Here's an overview of the steps involved in the reconciliation process:\n\n1. **Render Components**: Whenever state or props change, React re-renders the affected components and creates a new Virtual DOM tree.\n\n2. **Diffing**: React then performs a diffing process by comparing the previous Virtual DOM tree with the new one. It identifies the differences between the two trees.\n\n3. **Update Strategy**: React calculates the most efficient way to update the real DOM based on the differences identified during the diffing process. It creates a list of changes (referred to as \"patches\" or \"diffs\") that need to be applied to the actual DOM.\n\n4. **Apply Changes**: Finally, React applies the calculated changes to the real DOM. This involves adding, updating, or removing specific elements as necessary.\n\n**Role of Immutability:**\nImmutability is essential in the reconciliation process because it helps React to accurately and efficiently identify changes in the Virtual DOM. When data is immutable, React can confidently compare data by checking if their references have changed. Here's how immutability contributes to this process:\n\n1. **Change Detection**: React can quickly detect changes by comparing references. If an object or array reference remains the same, React knows that the data hasn't changed. This is much faster than comparing every individual property or element.\n\n2. **Pure Rendering**: React promotes the concept of \"pure\" components that only re-render when their props or state change. Immutability enables pure rendering because components can rely on the immutability of their data to determine if they need to update.\n\n**Example:**\nLet's consider a simple example of a list of items displayed in a React component. We'll use immutability to update the list.\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction ItemList() {\n  const [items, setItems] = useState(['Item 1', 'Item 2', 'Item 3']);\n\n  const addItem = () => {\n    // Using immutability to update the list\n    const newItem = `Item ${items.length + 1}`;\n    setItems([...items, newItem]); // Creating a new array\n  };\n\n  return (\n    <div>\n      <button onClick={addItem}>Add Item</button>\n      <ul>\n        {items.map((item, index) => (\n          <li key={index}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\nIn this example, when we add a new item, we're creating a new array using the spread operator. This maintains immutability, allowing React to efficiently detect the change and update the Virtual DOM accordingly.\n\nBy following the principles of immutability, React can optimize the reconciliation process, resulting in improved performance and a more responsive user interface.","n":0.046}}},{"i":116,"$":{"0":{"v":"Function First Class Entity","n":0.5},"1":{"v":"\n\nIn programming, when we say something is a \"first-class entity\" or \"first-class citizen,\" we mean that it can be treated as a regular value and can be used in the same ways that other fundamental types (like numbers, strings, etc.) can be used. This concept is crucial to understanding functional programming and the flexibility it offers.\n\n### Characteristics of First-Class Entities\n\n1. **Assignability**: A first-class entity can be assigned to a variable.\n\n2. **Passability**: A first-class entity can be passed as an argument to a function.\n\n3. **Returnability**: A first-class entity can be returned from a function.\n\n4. **Storable**: A first-class entity can be stored in data structures (like arrays, objects, etc.).\n\n### Functions as First-Class Citizens\n\nWhen functions are first-class entities, it means you can do the following:\n\n- **Assign Functions to Variables**: You can have a function assigned to a variable, allowing you to reference and invoke it using that variable.\n  \n  ```javascript\n  const sayHello = function() {\n    console.log(\"Hello!\");\n  };\n  ```\n\n- **Pass Functions as Arguments**: You can pass functions as parameters to other functions, enabling the use of callbacks or events.\n\n  ```javascript\n  function greet(callback) {\n    callback();\n  }\n\n  greet(sayHello); // \"Hello!\" is logged to the console\n  ```\n\n- **Return Functions from Other Functions**: Functions can be returned from other functions, facilitating currying or the creation of function factories.\n\n  ```javascript\n  function createGreeter(name) {\n    return function() {\n      console.log(`Hello, ${name}!`);\n    };\n  }\n\n  const greetJohn = createGreeter(\"John\");\n  greetJohn(); // \"Hello, John!\" is logged\n  ```\n\n- **Store Functions**: Functions can be stored within array elements or object properties.\n\n  ```javascript\n  const actions = {\n    greet: sayHello,\n  };\n\n  actions.greet(); // \"Hello!\" is logged\n  ```\n\n### Importance in JavaScript and React\n\n- **JavaScript**: JavaScript treats functions as first-class citizens, which allows for functional programming approaches, including the use of lambdas, closures, and higher-order functions.\n\n- **React**: In React, functional components, hooks, and higher-order components leverage the idea of functions as first-class entities, making the library modular, reusable, and reflective of functional programming paradigms.\n\nBy treating functions as first-class entities, you gain a lot of flexibility and expressive power in your programming toolkit, enabling more abstract, clean, and reusable code structures.","n":0.054}}},{"i":117,"$":{"0":{"v":"Errorhandling","n":1},"1":{"v":"\n\n```js\n\nimport React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction renderWithError() {\n  throw new Error('error');\n}\n\nfunction A() {\n  return <ErrorBoundary name=\"boundary-2\">{renderWithError()}</ErrorBoundary>;\n}\n\nfunction App() {\n  return (\n    <ErrorBoundary name=\"boundary-1\">\n      <A />\n    </ErrorBoundary>\n  )\n}\n\n\nclass ErrorBoundary extends Component<\n  { name: string; children: React.ReactNode },\n  { hasError: boolean }\n> {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch() {\n    console.log(this.props.name);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n\n// Output: \"boundary-1\"\n// <ErrorBoundary/>  captures the error from children only and not even from itself. Since the error is thrown from \"boundary-2\", the parent \"boundary-1\" catches it.\n\n```","n":0.098}}},{"i":118,"$":{"0":{"v":"Dos N Donts","n":0.577},"1":{"v":"## Reference \n- https://www.youtube.com/watch?v=4FhJkX18fS8\n\n## Do's n dont's\n1. use functional components\n    - much better state management\n    - easy to build components with functional\n    - hooks are like an ecosystem now.\n    - there's so much we can do with hooks that wouldn't be possible if we used class based.\n\n2. Do use Typescript\n    - Component.propTypes in React only run at build time, to check types at compile time, use ts. \n\n    ```ts\n    const MyList: React.FC<{\n        list: Person[],\n        onClick: (person: Person) => void\n    }> = ({list, onClick}) => (...);\n    ```\n\n3. Don't worry about react re-rendering (too much).\n    - don't try to over optimize before it is actually needed.\n\n4. Manage the useEffect or any dependency array.\n    - Rule 1: Add anything you READ FROM to the array\n    ```js\n    useEffect(() => {\n        fetch(`something/${id}`).then(...)\n    }, [id])\n    ```\n    - Rule 2: Check ehat you WRITE TO in the dependency array.\n       ```js\n        useEffect(() => {\n            if(!user) {\n            fetch(`something/${id}`).then(data => setUser(data))\n            }\n        }, [id, user, setUser])\n        ```\n\n    - Rule 3: Don't disable lint rules.\n\n    - React doesn't do deep comparision for arrays, objects and functions. It does a referential comparision for them. Make sure the refernce doesnot change if the data does not change(by using useMemo). \n\n5. Don't ignore useCallback and useMemo.\nThey can be used to maintain referential identity of non-primitive types.\n\n    We can use useMemo for majorly 2 reasons:\n    1. when you are computing an array or an object because those 2 are maintained by reference and you might want to maintain referential identity.\n    2. you are doing a task that is expensive.\n\n6. Learn to make custom hooks\n\n7. use a query library. eg: react query, swr","n":0.061}}},{"i":119,"$":{"0":{"v":"Advance Patterns","n":0.707},"1":{"v":"- https://www.patterns.dev/posts\n## Render Prop\n- https://www.patterns.dev/posts/render-props-pattern","n":0.447}}},{"i":120,"$":{"0":{"v":"rabbitMQ","n":1},"1":{"v":"\nRabbitMQ enables asynchronous processing, meaning that it allows you to put a message in a queue without processing it immediately. \n\n- implementation of AMQP 0.9.1(advance message queuing protocol) message model\n- In this message model, the producer(service that produces message), instead of directly producing to a message queue, it is going to produce to an exchange.\n- An exchange can be connected to many queues.\n- The consuming services i.e consumers are subscribed to the queue and listens to messages.\n- AMQP RabbitMQ is the message broker here.\n- In RabbitMQ, the message metadata determines how the message moves(routing key etc)\n\n```mermaid\n  graph LR;\n    Checkout-->Exchange-->|binding key|Queue1;\n    Exchange--> |binding key|Queue2;\n    Queue1-->Inventory;\n    Queue2-->Shipping;\n```\n\n## Types of Exchange\n\n### Fanout\n\n- checkout(producer) will produce to exchange\n  Exchange duplicates the message and send it to every single queue it knows about.\n\n### Direct exchange\n\n- checkout will produce a messsage and that message will have a routing key. The routing key is being compared with the binding key.\n\n### Topic exchange\n\n- partial match between a routing key and binding key\n\n### Header exchange\n\n- routing key is ignored and message is passed based on header.\n\n### Default exchange\n\n(native to RabbitMQ, not a part of AMQP)\nrouting key = queue name\n\n## Resource\n\nhttps://www.youtube.com/watch?v=7rkeORD4jSw\n","n":0.072}}},{"i":121,"$":{"0":{"v":"Python","n":1}}},{"i":122,"$":{"0":{"v":"Prisma","n":1},"1":{"v":"\n## Prisma-postgres-docker Resource:\n\n- https://www.section.io/engineering-education/dockerized-prisma-postgres-api/#create-and-run-a-prisma-server-with-docker\n\n- https://towardsdatascience.com/how-to-run-postgresql-and-pgadmin-using-docker-3a6a8ae918b5\n","n":0.447}}},{"i":123,"$":{"0":{"v":"Node","n":1},"1":{"v":"- JS runtime(not a language or framework)\n- Built on chrome's V8 engine\n- allows us to use Js as a server side language\n\n## Why node\n- fast\n- event driven, non-blocking I/o model\n\n## Non Blocking I/O\n- single threaded using non-blocking I/o Calls\n- supports tens of thousand concurrent calls with the help of event loop\n\n__DON'T USE NODE FOR CPU INTENSIVE APPS__\n\n## Core node modules\n- path, fs, http, os etc","n":0.124}}},{"i":124,"$":{"0":{"v":"Path","n":1},"1":{"v":"\nthe path module adds correct delimeter based on os. \n\n- __filename: returns the filepath \n    >E:\\api_bootcamp\\route\\path.js\n- path.basename(__filename) : returns the filename\n    > path.js\n- path.dirname(__filename): return directory === __dirname\n    >E:\\api_bootcamp\\route\n- path.extname(__filename): returns extension of file\n    > .js\n- path.join(__dirname, \"test\", \"hello.js\") : joins the path\n    > E:\\api_bootcamp\\route\\test\\hello.js","n":0.149}}},{"i":125,"$":{"0":{"v":"Os","n":1},"1":{"v":"\nMost used method: \n- os.homedir()\n- os.platform()","n":0.408}}},{"i":126,"$":{"0":{"v":"HTTP Status Code","n":0.577},"1":{"v":"\n## 1.x\n- informational\n\n## 2.x\n- successful ranges\n- 200: success\n- 201: success, created eg: something is added in DB\n- 204: success, no content. eg: deleted something\n\n## 3.x\n- redirection\n- 301: redirect\n- 304: not modified\n\n## 4.x\n- client error\n- 400: bad request. eg: form errors, in registration form email not formatted correctly.\n- 401: not authorized. You don't have access to fetch the protected data \n- 404: not found. eg: page, user etc not found. You are asking for something with is not in the server.\n\n## 5.x \n- server error\n- 500: internal server","n":0.107}}},{"i":127,"$":{"0":{"v":"Dotenv","n":1},"1":{"v":"## Usage\n\n- env file\n```env\nPORT=3000\n```\n- import dependency\n```js\nconst dotenv = require('dotenv')\ndotenv.config({path: './conf/dummy.env'})\n```\n- usage\n\n```js\nconst port = process.env.PORT || 3000\n```\n","n":0.25}}},{"i":128,"$":{"0":{"v":"Module Federation","n":0.707},"1":{"v":"\n- way to run time share code bw applications. This gives ability to do a run time dependency.\n- way to manage micro fe.\n\n> webpack.config of app 1\n\n```js\nconst ModuleFederationPlugin = require(\"webpack/lib/container/ModuleFederationPlugin\");\nplugins: [\n  new ModuleFederationPlugin({\n    name: \"counter\",\n    filename: \"remoteEntry.js\", // this file is the manifest of all the modules shared by this app\n    remotes: {}, // the other application will use this property to access the exposed component\n    exposes: {\n      \"./Counter\": \"./src/components/Counter\", // component that is exposed by one application\n    },\n    shared: {\n      ...deps,\n      react: {\n        singleton: true,\n        requiredVersion: deps.react,\n      },\n      \"react-dom\": {\n        singleton: true,\n        requiredVersion: deps[\"react-dom\"],\n      },\n    },\n  }),\n];\n```\n\n> webpack config of app 2\n\n```js\n...\n    remotes: {\n        counter: \"counter@http://localhost:8081/remoteEntry.js\"\n      },\n```\n\n## Resource\n\n- https://github.com/Harshita-mindfire/micro-fe-demo\n","n":0.095}}},{"i":129,"$":{"0":{"v":"Microservices","n":1},"1":{"v":"\nMicroservices are an architectural and organizational approach to software development where software is composed of small independent services that communicate over well-defined APIs.\n\n- Developing monolithic applications require the deployment of the entire application, along with each update. Similar is not the case with microservices.\n","n":0.151}}},{"i":130,"$":{"0":{"v":"JavaScript","n":1},"1":{"v":"\n## Github questions\n\n- https://github.com/sudheerj/javascript-interview-questions\n\n# JS\n\nJS is a synchronous, single threaded language.\nSingle treaded means runs one command at a time and in a specific order.\nJS is loosely typed language. This means any variable is not strictly bind to a data type.\n\n## Execution context\n\nExecution context is simply the environment within which your code is ran.\nIt has 2 components\n\n- Memory Component(Variable environment): variable and funcs are stored in key: value pairs.\n- Code Component(Thread of execution): place where code is executed one line at a time.\n\n### Two stages of Execution context\n\n- **creation**(memory creation) and\n- **executing**(code execution) phase.\n\n### Two types of execution context\n\n- Global and Function\n\nAs the JavaScript engine starts to read your code, it creates something called the Global Execution Context.\n\n## Lexical environment\n\n- A lexical environment is basically the scope or environment the engine is currently\n  reading code in.\n- A new lexical environment is created when curly brackets {} are used,\n  even nested brackets {{...}} create a new lexical environment.\n- The execution context tells the engine which lexical environment it is currently working in and the lexical scope determines the available variables.\n- lexical env of a func: local memory of function + refrence to lexical parents's lexical env(closure) + lexical env of parent's parent until global scope.\n\n## Scope chain\n\nEach environment context that is created has a link outside of its lexical environment\ncalled the scope chain. The scope chain gives us access to variables in the parent\nenvironment.\n\n## FOR in vs FOR of\n\n```js\nlet list = [4, 5, 6];\n\nfor (let i in list) {\n  console.log(i); // \"0\", \"1\", \"2\",\n}\n\nfor (let i of list) {\n  console.log(i); // \"4\", \"5\", \"6\"\n}\n```\n\n## Block\n\n- defined by `{}`. It groups together multiple js statements and use it where js syntax is expecting single statement\n- let/const are `block scoped`.\n- a new `{}` does not create a new scope for `var`, var is a `function` scope\n\n## let and const\n\n- are hoiseted, but are in `temporal dead zone`(the time between a let/const is hoisted and initialized with a value) for the time being.\n- accessing a variable in temporal dead zone throws reference error\n- cannot redeclare let and const within the same scope unlike `var`. let will throw syntax error and const will throw Type error, since const is of `constant` type.\n- `const` needs to be declare and initialization at the same time, unlike `let` which can be initialized later in the code.\n- unlinke `var` let/const are block scoped. Each `{}` creates a new scope for let/const\n\n## closure\n\nfunction along with its lexical scope bundled together forms a closure.\nUses: currying\n\n## Hoisting\n\n- Hoisting is the process of puting all variable and function declarations into memory\n  during the compile phase.\n- var are hoisted(allocated memory) and initialized with a value of `undefined`\n- function declarations are fully hoisted eg: function a() {}\n- function expression are hoisted as undefined. (eg: var a = function () {})\n- let and const are hoisted but are not initialized with any initial value. Using them before initialization throws reference error\n\n### Takeaways\n\nAvoid hoisting when possible. It can cause memory leaks and hard to catch\nbugs in your code. Use let and const as your go to variables.\n\n## Difference between arrow function and normal function\n\n- arrow funcs are not just a syntactic sugar to normal functions\n- They are a compact alternative to a regular function, but also without its own bindings to `this`, `arguments`, `super`, or `new.target` keywords.\n- Arrow func cannot be used as constructors and are not the best option for methods.\n\n````js\nvar obj = {\n  // does not create a new scope\n  i: 10,\n  b: () => console.log(this.i, this),\n  c: function () {\n    console.log(this.i, this);\n  },\n};\nobj.b(); // prints undefined, Window {...} (or the global object)\nobj.c(); // prints 10, Object {...}```\n````\n\n## Call, bind, apply\n\n### Call\n\n- invoke a function with passed references and arguments.\n- used function borrowing\n- 1st param of call is a reference, i.e what should call bind this to? rest are the arguments to the function\n\n### bind\n\nreturns you a copy of method which can be called later.\n\n- function borrowing\n- When a function is used as a callback, `this` is lost. The bind() method solves this problem.\n  eg: https://www.w3schools.com/js/js_function_bind.asp\n\npolyfill for bind:\n\n```js\nconst uname2 = {\n  fname: 'Jo',\n  lname: 'Joshi',\n};\nfunction fullName(city, state) {\n  console.log(this.fname + ' ' + this.lname + ' ' + city + ' ' + state);\n}\nFunction.prototype.myBind2 = function (...args) {\n  const fun = this;\n  const param = args.slice(1);\n  return function (...arg) {\n    fun.apply(args[0], [...param, ...arg]);\n  };\n};\n\nconst test = fullName.myBind2(uname2, 'hld');\ntest('UK');\n```\n\n## Currying\n\n- by bind method\n\n```js\nlet multiply = function (x, y) {\n  console.log(x * y);\n};\n\nconst multiplyBy2 = multiply.bind(this, 2);\nmultiplyBy2(9);\n```\n\n- by closures\n\n```js\nfunction multiply(x) {\n  return function (y) {\n    return x * y;\n  };\n}\nconst multiplyBy2 = multiply(2);\nconsole.log(multiplyBy2(4));\n```\n\n### imp interview ques\n\nhttps://javascriptinterviewquestions.com/2020/04/add123-in-javascript-currying-interview.html\n\n## Debounce\n\n- limiting the rate of execution of a particular function\n\n## this\n\nFree function invocations in javascript have `this` bound to the global scope.\n\n## Event Propagation\n\n- [Bubbling and capturing](https://javascript.info/bubbling-and-capturing)\n\nhappens in 3 phases\n\n- Capturing phase: event goes down from root element to the target element\n- target phase: event reaches the target elem\n- bubbling phase: the event bubbles up from the element.\n\n```html\n<style>\n  body * {\n    margin: 10px;\n    border: 1px solid blue;\n  }\n</style>\n\n<form>\n  FORM\n  <div>\n    DIV\n    <p>P</p>\n  </div>\n</form>\n\n<script>\n  for (let elem of document.querySelectorAll('*')) {\n    elem.addEventListener(\n      'click',\n      (e) => alert(`Capturing: ${elem.tagName}`),\n      true\n    );\n    elem.addEventListener('click', (e) => alert(`Bubbling: ${elem.tagName}`));\n  }\n</script>\n```\n\nIn bubbling, When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up on other ancestors.\n\n- To stop bubbling: event.stopPropagation()\n\n```html\n<body onclick=\"alert(`the bubbling doesn't reach here`)\">\n  <button onclick=\"event.stopPropagation()\">Click me</button>\n</body>\n```\n\nNOTE: Almost all events bubble.\nThe key word in this phrase is “almost”.\n\nFor instance, a focus event does not bubble. There are other examples too, we’ll meet them. But still it’s an exception, rather than a rule, most events do bubble\n\n## Scripts: async, defer\n\n### Problem\n\nWhen the browser loads HTML and comes across a \"script\" tag, it can’t continue building the DOM. It must execute the script right now. The same happens for external scripts \"script src='...': the browser must wait for the script to download, execute the downloaded script, and only then can it process the rest of the page.\n\nThat leads to two important issues:\n\n- Scripts can’t see DOM elements below them, so they can’t add handlers etc.\n- If there’s a bulky script at the top of the page, it “blocks the page”. Users can’t see the page content till it downloads and runs:\n\n```html\n<p>...content before script...</p>\n\n<script src=\"https://javascript.info/article/script-async-defer/long.js?speed=1\"></script>\n\n<!-- This isn't visible until the script loads -->\n<p>...content after script...</p>\n```\n\n![](/assets/images/2023-04-11-11-43-22.png)\n\n### Defer\n\n- The defer attribute tells the browser not to wait for the script. Instead, the browser will continue to process the HTML, build DOM. The script loads “in the background”, which makes it non-blocking and then runs when the DOM is fully built.\n- Scripts with defer always execute when the DOM is ready (but before DOMContentLoaded event). .DOMContentLoaded event handler waits for the deferred script. It only triggers when the script is downloaded and executed.\n\n- Deferred scripts keep their relative order, just like regular scripts.\n- The defer attribute is only for external scripts.\n  The defer attribute is ignored if the script tag has no src.\n\n```html\n<p>...content before script...</p>\n\n<script\n  defer\n  src=\"https://javascript.info/article/script-async-defer/long.js?speed=1\"\n></script>\n\n<!-- visible immediately -->\n<p>...content after script...</p>\n```\n\n### Async\n\n- The async attribute is only for external scripts\n  Just like defer, the async attribute is ignored if the\n  ```html\n  <script>\n    ...\n  </script>\n  ```\n  tag has no src.\n- The browser doesn’t block on async scripts (just like defer).\n- Other scripts don’t wait for async scripts, and async scripts don’t wait for them, hence does not maintain order of scripts like defer\n- DOMContentLoaded and async scripts don’t wait for each other:\n\n## Folder structure\n\n- package.json: app metadata and configuration\n- manifest.json: app metadata that makes application progressive web app.\n  - provides metadata used when your web app is installed on a\n    user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/\n- `defer` in <script>\n\n## Fundamentals\n\n- browser\n- v8 engine\n\n## Array Methods\n\n### reduce\n\n[[Reduce pollyfill | learning.javascript.handson.pollyfill#array.reduce]]\n\n\n- This method has the following syntax — reduce(callbackFn, initialValue) where initialValue is an optional initial value used. If this parameter is skipped, it's assumed to be the first value of the array.\n- if we are not returning anything from the callback functions here, the function returns undefined implicitly.\n- if the initial value is not supplied it defaults to the first item of the array\n\n```js\n[1, 2, 3].reduce((a, b) => {\n  console.log(a, b);\n});\n// 1, 2\n// undefined, 3\n\n[1, 2, 3].reduce((a, b) => {\n  console.log(a, b);\n}, 0);\n// 0,1\n// undefined, 2\n// undefined, 3\n```\n\n#### Edge cases\n```js\nconst getMax = (a, b) => Math.max(a, b);\n\n// callback is invoked for each element in the array starting at index 0\n[1, 100].reduce(getMax, 50); // 100\n[50].reduce(getMax, 10); // 50\n\n// callback is invoked once for element at index 1\n[1, 100].reduce(getMax); // 100\n\n// callback is not invoked\n[50].reduce(getMax); // 50\n[].reduce(getMax, 1); // 1\n\n[].reduce(getMax); // TypeError\n```\n\n```JS\nconst arr = [{\n\tfirstname: \"john\", lastName: \"Doe\", age: 12\n},\n{\n\tfirstname: \"Martha\", lastName: \"Stewart\", age: 22\n},\n{\n\tfirstname: \"Scar\", lastName: \"Jo\", age: 82\n}]\n\nconst data = arr.reduce((acc, curr) => {\nif(curr.age<30) acc.push(curr.firstname);\nreturn acc;\n},[])\n```\n\n### polyfill for map\n\n[[Map pollyfill | learning.javascript.handson.pollyfill#array.map]]\n\n## Promise\n\n- a JS Object which may produce a value in future either a resolved value or a reason it is not reselved\n- can be in one of the three states\n  - pending\n  - fullfilled or\n  - rejected\n\n```js\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('done');\n  }, 3000);\n});\n\nasync function x(val) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (val % 2 === 0) {\n        resolve('even');\n      } else {\n        reject('odd');\n      }\n    }, 1000);\n  });\n}\n```\n\n### Promise.prototype.then\n\nFor Promise.prototype.then():\n\n- if function is passed as callback, the return value of the function is used as the fulfillment value\n- for non-function values, previous fulfillment value is used.\n\n![[Promises Exercise|learning.javascript.promises-exercise]]\n\n### Promise.all\n\n- The Promise.all() method takes an iterable of promises as an input, and returns a single Promise that resolves to an array of the results of the input promises.\n- fail-fast behavior\n\n## Callback hell\n\n- Callback hell is a antipattern when there are nested callbacks leading to unlegibale code.\n  Can be fixed by:\n- async awaits\n- writing promises\n\n## Ariety\n\nsum(1)(2)....(5) = //\n\n```js\nfunction add(...args) {\n  let a = args.reduce((a, b) => a + b, 0);\n  return function (...args) {\n    let b = args.reduce((a, b) => a + b, 0);\n    if (b) {\n      return add(a + b);\n    }\n    return a;\n  };\n}\n```\n\n## Polyfill for Promise.all\n[[Promise.all pollyfill | learning.javascript.handson.pollyfill#promise.all]]\n\n## Prototypical Ineritence\n\n-\n\n","n":0.025}}},{"i":131,"$":{"0":{"v":"Type Coercion","n":0.707},"1":{"v":"\n# Type coersion for primitive type\n\n## To number\n\nHere is how primitive values are converted to numbers:\n\n```\nNumber(null)                   // 0\nNumber(undefined)              // NaN\nNumber(true)                   // 1\nNumber(false)                  // 0\nNumber(\" 12 \")                 // 12\nNumber(\"-12.34\")               // -12.34\nNumber(\"\\n\")                   // 0\nNumber(\" 12s \")                // NaN\nNumber(123)                    // 123\nNumber({})                      //NaN\n```\n\n- null and undefined are handled differently: null becomes 0, whereas undefined becomes NaN.\n\n### Triggered via\n\n- comparison operators (>, <, <=,>=)\n- bitwise operators ( | & ^ ~)\n- arithmetic operators (- + \\* / % ). Note, that binary + does not trigger numeric conversion, when any operand is a string.\n- unary + operator\n- loose equality operator == (incl. !=).\n- Note that == does not trigger numeric conversion when both operands are strings.\n\nThere are two special rules to remember:\n\n1. When applying == to null or undefined, numeric conversion does not happen. null equals only to null or undefined, and does not equal to anything else.\n\n```\nnull == 0               // false, null is not converted to 0\nnull == null            // true\nundefined == undefined  // true\nnull == undefined       // true\n```\n\n3. NaN does not equal to anything even itself:\n\n```\nif (value !== value) { console.log(\"we're dealing with NaN here\") }\n```\n\n## To string\n\nImplicit coercion is triggered by the binary + operator, when any operand is a string:\n\n```\nString({})   // '[object Object]'\n```\n\n## To Boolean\n\n```\nBoolean('')           // false\nBoolean(0)            // false\nBoolean(-0)           // false\nBoolean(NaN)          // false\nBoolean(null)         // false\nBoolean(undefined)    // false\nBoolean(false)        // false\n```\n\n- Any value that is not in the list is converted to true, including object, function, Array, Date, user-defined type, and so on.\n  eg :\n\n```\nBoolean({})             // true\nBoolean([])             // true\nBoolean(Symbol())       // true\n!!Symbol()              // true\nBoolean(function() {})  // true\n```\n\n### Triggered via\n\nImplicit conversion happens in logical context, or is triggered by logical operators ( || && !) .\n\n# Type coercion for objects\n\n- When it comes to objects and engine encounters expression like [1] + [2,3], first it needs to convert an object to a primitive value, which is then converted to the final type. And still there are only three types of conversion: numeric, string and boolean.\n\nBoth numeric and string conversion make use of two methods of the input object: valueOf and toString . Both methods are declared on Object.prototype and thus available for any derived types, such as Date, Array, etc\n\nNumeric conversion first calls valueOf with a fallback to toString.\nString conversion does the opposite: toString followed by valueOf\n\nIn general the algorithm is as follows:\n\n1. If input is already a primitive, do nothing and return it.\n\n2. Call input.toString(), if the result is primitive, return it.\n\n3. Call input.valueOf(), if the result is primitive, return it.\n\n4. If neither input.toString() nor input.valueOf() yields primitive, throw TypeError.\n\n## Example\n\n```js\nconsole.log(1 + 2);\nconsole.log(1 + +2);\nconsole.log(1 + +(+2));\nconsole.log(1 + \"2\");\nconsole.log(1 + +\"2\");\nconsole.log(\"1\" + 2);\nconsole.log(\"1\" + +2);\nconsole.log(1 + true);\nconsole.log(1 + +true);\nconsole.log(\"1\" + true);\nconsole.log(\"1\" + +true);\nconsole.log(1 + null);\nconsole.log(1 + +null);\nconsole.log(\"1\" + null);\nconsole.log(\"1\" + +null);\nconsole.log(1 + undefined);\nconsole.log(1 + +undefined);\nconsole.log(\"1\" + undefined);\nconsole.log(\"1\" + +undefined);\nconsole.log(\"1\" + +(+undefined));\n```\n\nAns:\n3\n3\n3\n'12'\n3\n'12'\n'12'\n2\n2\n'1true'\n'11'\n1\n1\n'1null'\n'10'\nNaN\nNaN\n'1undefined'\n'1NaN'\n'1NaN'\n","n":0.047}}},{"i":132,"$":{"0":{"v":"Security","n":1},"1":{"v":"\n- [OWASP Top Ten Vulnerabilities](https://owasp.org/www-project-top-ten/)\n\n## OWASP(Open Web Application Security Project )\n\nThe OWASP (Open Web Application Security Project) Top Ten is a widely recognized list of the most critical web application security risks. These vulnerabilities represent common issues that can lead to security breaches if not properly addressed.\n\n### **Injection**:\n\nThis occurs when untrusted data is sent to an interpreter as part of a command or query, leading to unintended actions. An attacker can manipulate input fields to execute arbitrary code.\n\n#### Example\n\n- **SQL Injection** - Attacker inserts malicious SQL code into a login form, gaining unauthorized access to a database.\n\n  - SQL Injection Based on **1=1** is Always True.\n\n  ```sql\n  SELECT * FROM Users WHERE UserId = 105 OR 1=1;\n  ```\n\n  - SQL Injection Based on Batched SQL Statements\n\n  ```js\n  txtUserId = getRequestString('UserId');\n  txtSQL = 'SELECT * FROM Users WHERE UserId = ' + txtUserId;\n  //What is user entered 105; DROP TABLE Suppliers in input box for UserId? The txtSQL will result in:\n  SELECT * FROM Users WHERE UserId = 105; DROP TABLE Suppliers;\n  ```\n\n  #### Prevention\n\n  - using **PREPARED STATEMENTS**: The idea is very simple - the query and the data are sent to the database server separately.\n\nThe _mysql2_ library handles the parameter binding and escaping internally, ensuring that each value is treated as **data**, not **executable code**.\n\n```js\napp.post('/batchInsert', (req, res) => {\n  const usersToInsert = req.body.users; // An array of user objects\n\n  // Using a prepared statement for batch insert\n  const sql = 'INSERT INTO users (username, email) VALUES (?, ?)';\n  const values = usersToInsert.map(user => [user.username, user.email]);\n\n  connection.query(sql, [values], (err, results) => {\n    if (err) {\n      ...\n    }\n  });\n});\n\n```\n\n### Identification and Authentication Failures (previously, Broken Authentication)\n\nFlaws in authentication and session management can lead to unauthorized access to accounts and sensitive data.\n\n#### example\n\n- **Credential stuffing** - Attackers use previously stolen credentials to gain unauthorized access to user accounts on various sites.\n\n#### Prevention\n\n- Implement strong password policies, enable multi-factor authentication (MFA), use secure session management, and enforce secure password storage (e.g., bcrypt hashing).\n\n### Cryptographic Failures (previously : Sensitive Data Exposure)\n\nThis vulnerability involves inadequate protection of sensitive data, such as passwords, credit card numbers, and personal information.\n\n#### Example:\n\n- **Insecure storage** - Storing passwords in plain text instead of hashing them, making it easy for attackers to steal user credentials.\n\n#### Prevention\n\n- Encrypt sensitive data at rest and during transmission (use HTTPS).\n- Avoid storing sensitive information unless absolutely necessary.\n- Implement proper access controls to limit who can access sensitive data.\n- Disable caching for response that contain sensitive data.\n\n### Insecure Design\n\n_Scenario_: A chain of cinemas provides discounts for group bookings but mandates a deposit when the group size exceeds fifteen attendees. Malicious actors could analyze this process and attempt to determine whether it's possible to reserve six hundred seats across all cinemas in just a few requests. This could potentially lead to a significant financial loss.\n\n### **Broken Access Control**:\n\nImproper enforcement of restrictions on what authenticated users can do can lead to unauthorized actions.\n\n- Access control enforces policy such that users cannot act outside of their intended permissions\n\n#### Example:\n\n- Permitting viewing or editing someone else's account, by providing its unique identifier (insecure direct object references)\n\n_Scenario_: _An application allows users to view their own account details by navigating to https://example.com/profile?user_id=123. The attacker changes the user_id parameter to access another user's account._\n\n- CORS misconfiguration allows API access from unauthorized/untrusted origins.\n\n#### Prevention\n\n- Except for public resources, deny access by default.\n- Stateful session identifiers should be invalidated on the server after logout. Stateless JWT tokens should rather be short-lived so that the window of opportunity for an attacker is minimized. For longer lived JWTs it's highly recommended to follow the OAuth standards to revoke access.\n\n### **Security Misconfiguration**:\n\nFailure to securely configure settings and security controls can expose sensitive data or provide attackers with unnecessary access.\n\n#### Example:\n\n- _Default credentials_ - Leaving default usernames and passwords for admin accounts, enabling attackers to easily access and control the application.\n\n_Scenario_: An application's admin panel has default credentials (admin/admin). The attacker uses these credentials to log in and compromise the system.\n\nIn 2023 guidelines, XXE is also under this.\n\n#### XML External Entity (XXE)\n\nXXE security vulnerability allows a attacker to inject unsafe XML entities into a web application that processes XML data. Attackers can exploit this to read files on the server.\neg:\n\n- Attacker submits malicious XML input that references a sensitive file, gaining unauthorized access to its content.\n\n### **Cross-Site Scripting (XSS)**:\n\nXSS occurs when an application includes untrusted data in a web page, allowing attackers to execute malicious scripts in the context of a user's browser.\n\n#### Example:\n\nin an input feild, that directly gets added to the DOM, attacker might add a script to execute something like:\n\n```html\n<button\n  onclick=\"window.location.href = \n'http://malicious-site.com'\"\n>\n  Get offers\n</button>\n```\n\n#### Prevention\n\n- implement non-bypassable Content Security Policy(CSP) policy. CSP specifies which sources of content are considered valid for specific types of resources on a web page\n\n### **Server-Side Request Forgery (SSRF)**\n\nSSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL\n\n#### CSRF\n\nCross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they’re currently authenticated. With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into executing actions of the attacker’s choosing. If the victim is a normal user, a successful CSRF attack can force the user to perform state changing requests like transferring funds, changing their email address, and so forth. If the victim is an administrative account, CSRF can compromise the entire web application.\n\n### Vulnerable and Outdated Components (previously: Using Components with Known Vulnerabilities)\n\nIntegrating outdated or vulnerable third-party components can expose applications to known exploits.\n\n#### Example:\n\n- Including a vulnerable version of a library in an application, allowing attackers to exploit known weaknesses.\n\n### Security Logging and Monitoring Failures\n\nWithout proper logging and monitoring, detecting and responding to security incidents becomes challenging.\n\n#### Example:\n\n- Failing to log failed login attempts, making it difficult to identify and respond to a brute-force attack.\n","n":0.032}}},{"i":133,"$":{"0":{"v":"Promises Exercise","n":0.707},"1":{"v":"\n- Promise methods are static methods: Promise.all, Promise.race, Promise.any\n- Promis.race is useful when you want the first async task to complete, but do not care about its eventual state (i.e., it can either succeed or fail).\n- Promise.all returns a single promise with either fulfilled values of all Promises or the rejected promise. It fails fast\n\n- 1\n\n```js\nPromise.resolve(1) // fulfilled : 1\n  .then(() => 2) // function is passed, return value is 2 => fulfilled : 2\n  .then(3) // non-function is passed, previous fulfillment value 2 is used => fulfilled : 2\n  .then((value) => value * 3) // function is passed, value is 2, return value is 6 => fulfilled: 6\n  .then(Promise.resolve(4)) // Promise object is not function, previous fulfillment value 6 is used => fulfilled : 6\n  .then(console.log); // 6 gets logged\n```\n\nResult: 6\n\n- 2\n\n```js\nPromise.resolve(1)\n  .then((val) => {\n    console.log(val);\n    return val + 1;\n  })\n  .then((val) => {\n    console.log(val);\n  })\n  .then((val) => {\n    console.log(val);\n    return Promise.resolve(3).then((val) => {\n      console.log(val);\n    });\n  })\n  .then((val) => {\n    console.log(val);\n    return Promise.reject(4);\n  })\n  .catch((val) => {\n    console.log(val);\n  })\n  .finally((val) => {\n    // finally doesn't receive param from .then chain. always gets undefined as param\n    console.log(val);\n    return 10;\n  })\n  .then((val) => {\n    console.log(val);\n  });\n```\n\nResult\n1\n2\nundefined\n3\nundefined\n4\nundefined\nundefined\n\n- 3\n\n```js\nconsole.log(1);\nconst promise = new Promise((resolve) => {\n  console.log(2);\n  resolve();\n  console.log(3);\n});\n\nconsole.log(4);\n\npromise\n  .then(() => {\n    console.log(5);\n  })\n  .then(() => {\n    console.log(6);\n  });\n\nconsole.log(7);\n\nsetTimeout(() => {\n  console.log(8);\n}, 10);\n\nsetTimeout(() => {\n  console.log(9);\n}, 0);\n```\n\nresult:\n1 2 3 4 7 5 6 9 8","n":0.066}}},{"i":134,"$":{"0":{"v":"Pipe and Compose","n":0.577},"1":{"v":"\n## Pipe\nThe concept of pipe is simple — it combines n functions. It’s a pipe flowing left-to-right, calling each function with the output of the last one.\n\nIn the context of functional programming, \"pipe\" refers to chaining functions together in a way that the output of one function becomes the input of the next function. \n\n- To execute functions in left-to-right order, you'd use a pipe.\n\n```js\nconst pipe = (...funcs) => (x) => funcs.reduce((v, f) => f(v), x);\n\nconst getName = (obj) => obj.name;\nconst uppercase = (str) => str.toUpperCase();\nconst get6Characters = (str) => str.substring(0, 6);\n\nconst processName = pipe(getName, uppercase, get6Characters);\n\nconst result = processName({ name: 'Buckethead' });\nconsole.log(result); // Output: 'BUCKET'\n\n```\n\n## Compose\nrefers to chaining functions together in a way that the output of one function becomes the input of the next function, but the functions are executed from right to left.\n\n```js\nconst compose = (...funcs) => (x) => funcs.reduceRight((v, f) => f(v), x);\n\nconst processName = compose(get6Characters, uppercase, getName);\n\nconst result = processName({ name: 'Buckethead' });\nconsole.log(result); // Output: 'BUCKET'\n\n```\n\n## Functional programming\nthe statement \"Functional programming is declarative rather than imperative\" highlights one of the key principles of functional programming, which is to focus on what you want to achieve (declarative) rather than explicitly specifying how to achieve it step by step (imperative).\n\n\n### Pure Function\n\nA pure function is a function which:\n\n- Given the same inputs, always returns the same output, and\n- Has no side-effects","n":0.067}}},{"i":135,"$":{"0":{"v":"Performance","n":1},"1":{"v":"\n## Memoization\n\n- Memoization is a way to cache a return value of a function based on its parameters.\n- This makes the func that takes a long time to run, much faster after one execution.\n- If the parameter changes, it will still have to reevaluate the function.\n\n# Rate Limiting\n\n## Debouncing\n\n- limiting the rate of execution of a particular function\n- most suitable for control events like typing or button clicks\n- used in search bars etc.\n- I have normally used lodash Debouncing\n\n### Create debounce fun from scratch\n\n```js\nconst handleChange = (e) => {\n  console.log(e.target.value);\n};\nconst debounce = (fn, wait) => {\n  let timer;\n  return function (...args) {\n    const context = this; // maintains the context, so that the fn is called within the same lexical environment with same arguments as it was running before wrapping it around a debounce function.\n    clearTimeout(timer); // clear timer in subsequent keystrokes.\n    timer = setTimeout(() => {\n      fn.apply(context, args);\n    }, wait);\n  };\n};\nconst optiminzedFn = debounce(handleChange);\n```\n\n## Throttling\n\n- also used for rate limiting\n- Throttle is most suitable for continuous user events like resizing and scrolling.\n\n### Create throttle fun from scratch\n\n```js\nconst handleScroll = () => {\n  console.log(\"sample method to throttle\");\n};\nconst throttle = (fn, wait) => {\n  let flag = true;\n  return function (...args) {\n    const context = this; // maintains the context, so that the fn is called within the same lexical environment with same arguments as it was running before wrapping it around a throttle function.\n    if (flag) {\n      fn.apply(context, args);\n      flag = false;\n      setTimeout(() => {\n        flag = true;\n      }, wait);\n    }\n  };\n};\nconst optiminzedFn = throttle(handleScroll);\n```\n","n":0.063}}},{"i":136,"$":{"0":{"v":"Parse Int","n":0.707},"1":{"v":"\n- parseItn(string, radix) it's callback in map(el, index, arr)\n- it means second argument in map is index === second argument in parseInt is radix (from 2 to 36 - by default === 10)\n- example [\"0\", \"1\", \"1\"].map(parseInt): parseItn(\"0\", 0), parseInt(\"1\", 1), parseInt(\"1\", 2)\n\n```js\nconsole.log([\"0\"].map(parseInt)); // [0] - 1st: parseItn(\"0\", 0) === 0\nconsole.log([\"0\", \"1\"].map(parseInt)); // [0,NaN] - 2nd: parseInt(\"1\", 1) === NaN\nconsole.log([\"0\", \"1\", \"1\"].map(parseInt)); // [0,NaN,1] - 3rd: parseInt(\"1\", 2) === 1\nconsole.log([\"0\", \"1\", \"1\", \"1\"].map(parseInt)); // [0,NaN,1,1] - 4th: parseInt(\"1\", 3) === 1\n```\n","n":0.111}}},{"i":137,"$":{"0":{"v":"Handson","n":1}}},{"i":138,"$":{"0":{"v":"Pollyfill","n":1},"1":{"v":"\n## Debounce\n\n```js\nfunction debounce(func, wait = 0) {\n  let timeoutId = null;\n  return function (...args) {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => {\n      func.apply(this, args);\n    }, wait);\n  };\n}\n```\n\n## Throttle\n\n```js\nfunction throttle(func, wait = 0) {\n  let flag = true;\n  return function (...args) {\n    if (flag) {\n      setTimeout(() => (flag = true), wait);\n      func.apply(this, args);\n      flag = false;\n    }\n  };\n}\n```\n\n## Bind\n\n```js\nFunction.prototype.myBind = function (thisArg, ...argArray) {\n  return (...args2) => this.apply(thisArg, argArray.concat(args2));\n};\n\n```\n\n## curry\n\n```js\nfunction add(a, b, c) {\n  return a + b + c;\n}\n\nfunction curry(func) {\n  return function curried(...args) {\n    if (args.length >= func.length) {\n      return func.apply(this, args);\n    }\n    return curried.bind(this, ...args);\n  };\n}\n\nconst curriedAdd = curry(add);\nconsole.log(curriedAdd(2)(3, 4));\nconsole.log(curriedAdd(2)(4)(4));\nconsole.log(curriedAdd(2,3,4));\n```\n\n## curry with toPrimitive\n\n```js\nfunction curry(func) {\n  return function interim(...args) {\n    const fn = interim.bind(this, ...args);\n    fn[Symbol.toPrimitive] = () => func.apply(this, args);\n    return fn;\n  };\n}\n\nfunction multiply(...numbers) {\n  return numbers.reduce((a, b) => a * b, 1);\n}\nconst curriedMultiply = curry(multiply);\nconst multiplyByThree = curriedMultiply(3);\nconst multiplyByFifteen = multiplyByThree(5);\nconsole.log(multiplyByFifteen);\n\n\n```\n\n## curry 4\n```js\n//add(1)(2)(3)…(n)() or add(1,2....n)(3,4....n)()\n\nfunction add(...args) {\n  return function (...args2) {\n    if (args2.length === 0) {\n      return args.reduce((a, b) => a + b, 0);\n    }\n    return add.apply(this, args.concat(args2));\n  };\n}\n\nconsole.log(add(1)(2)(3)(4)());\n\n```\n\n- another variant\n\n```js\n//curry(add)\n\n\nfunction add(...num) {\n  return num.reduce((a, b) => a + b, 0);\n}\n\nfunction curry(func) {\n  return function curried(...args) {\n    return (...args2) => {\n      if (args2.length == 0) {\n        return func.apply(this, args);\n      }\n      return curried.apply(this, args.concat(args2));\n    };\n  };\n}\n\nconst curriedAdd = curry(add);\nconsole.log(curriedAdd(2, 7)(6, 8, 9)());\n```\n\n## Promise.all\n\nCan also be attempted with try catch. I have added in .then below so that I can remember that await is safer than .then when we try to resolve non promise values like 42. \n- promise.then(...)  assumes that promise is already a proper Promise (or at least a thenable). If it’s not, you'll get an error. So if I had not wrapped promise with `Promise.resolve(promise).then` in below code, p1 would end up throwing error: ❌ TypeError: val.then is not a function.\n\n- await automatically wraps non-promises with Promise.resolve()\n\n\n```js\nfunction promiseAll(iterable) {\n  return new Promise((resolve, reject) => {\n    if (!iterable.length) return resolve([]);\n    const result = [];\n    let totalResolved = 0;\n\n    iterable.forEach((promise, i) => {\n      Promise.resolve(promise)\n        .then((val) => {\n          result[i] = val;\n          totalResolved++;\n          if (totalResolved === iterable.length) resolve(result);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  });\n}\n// Resolved example.\nconst p0 = Promise.resolve(3);\nconst p1 = 42;\nconst p2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"foo\");\n  }, 100);\n});\n\nconst func = async () => {\n  const resp = await promiseAll([p0, p1, p2]);\n\n  console.log(resp);\n};\n\nfunc();\n```\n\n## Promise.race\n\n```js\nasync function PromiseRace(promises) {\n  return new Promise((resolve, reject) => {\n    promises.forEach(async (promise, i) => {\n      try {\n        const res = await promise;\n        resolve(res);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  });\n}\n```\n\n## Promise.any\n\n```js\nfunction promiseAny(iterable) {\n  let totalRejected = 0;\n  const errors = [];\n  return new Promise((resolve, reject) => {\n    if (iterable.length === 0)\n      return reject(new AggregateError([], \"empty promises array passed\"));\n    Array.from(iterable).forEach((promise, i) => {\n      Promise.resolve(promise)\n        .then((val) => {\n          resolve(val);\n        })\n        .catch((reason) => {\n          totalRejected++;\n          errors[i] = reason;\n          if (totalRejected === iterable.length) {\n            reject(new AggregateError(errors, \"All promises rejected\"));\n          }\n        });\n    });\n  });\n}\n```\n\n## Promise.allSettled\n```js\n function promiseAllSettled(iterable) {\n  const result = [];\n  let settledCount = 0;\n  return new Promise((resolve, reject) => {\n    if (iterable.length === 0) return resolve([]);\n    iterable.forEach((promise, i) => {\n      Promise.resolve(promise)\n        .then((value) => {\n          result[i] = {\n            status: \"fulfilled\",\n            value,\n          };\n          settledCount++;\n        })\n        .catch((reason) => {\n          result[i] = {\n            status: \"rejected\",\n            reason,\n          };\n          settledCount++;\n        })\n        .finally(() => {\n          if (settledCount === iterable.length) {\n            resolve(result);\n          }\n        });\n    });\n  });\n}\n\n```\n\n## Array.map\n\n```js\nArray.prototype.myMap = function (cb, thisArg) {\n  const len = this.length;\n  const results = new Array(len);\n  for (let i = 0; i < len; i++) {\n    // Ignore index if value is not defined for index (e.g. in sparse arrays).\n    if (Object.hasOwn(this, i))\n      results[i] = cb.call(thisArg ?? this, this[i], i, this);\n  }\n  return results;\n};\n\nconst res = [1, 2, 3, , 4].myMap((i) => i);\nconsole.log(res);\n\n\n```\n\n## Array.filter\n\n```js\nArray.prototype.myFilter = function (cb, thisArg) {\n  const length = this.length;\n  if (!length) return [];\n  const results = [];\n  for (let i = 0; i < length; i++) {\n    if (Object.hasOwn(this, i) && cb.call(thisArg ?? this, this[i], i, this)) {\n      results.push(this[i]);\n    }\n  }\n  return results;\n};\n\n[1, 2, 3, 4].myFilter((value) => value % 2 == 0);\nconst res = [1, 2, 3, 4].myFilter((value) => value < 3);\nconsole.log(res);\n\n\n```\n\n## Array.reduce\n- Docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\n\nIn reduce the callback fn is called with these args\n- accumukator\n- current value\n- index\n- array\n\n\n```js\nArray.prototype.myReduce = function (callbackFn, initialValue) {\n  const len = this.length;\n  const noInitialValue = initialValue === undefined;\n  if (len === 0 && noInitialValue)\n    return new TypeError(\"Reduce of empty array with no initial value\");\n\n  let acc = noInitialValue ? this[0] : initialValue;\n  const startingIndex = noInitialValue ? 1 : 0;\n  for (let i = startingIndex; i < len; i++) {\n    if (Object.hasOwn(this, i)) {\n      acc = callbackFn(acc, this[i], i, this);\n    }\n  }\n  return acc;\n};\n\n[1, 2, 3].myReduce((prev, curr) => prev + curr, 0);\nconst res = [1, 2, 3].myReduce((prev, curr) => prev + curr, 4);\nconsole.log(res);\n```\n\n## lodash get\n\n```js\nfunction get(objectParam, pathParam, defaultValue) {\n  const paths = Array.isArray(pathParam) ? pathParam : pathParam.split(\".\");\n  let result = { ...objectParam };\n  for (let i = 0; i < paths.length; i++) {\n    if (result === undefined) {\n      return defaultValue;\n    } else {\n      result =\n        typeof result === \"object\" &&\n        result !== null &&\n        result[paths[i]] !== undefined\n          ? result[paths[i]]\n          : defaultValue;\n    }\n  }\n  return result;\n}\n\n\n```","n":0.035}}},{"i":139,"$":{"0":{"v":"Currying Partials","n":0.707},"1":{"v":"- https://javascript.info/currying-partials\n- Question: https://bigfrontend.dev/problem/implement-curry","n":0.5}}},{"i":140,"$":{"0":{"v":"Arrow Func Exercise","n":0.577},"1":{"v":"\n```\nconst obj = {\n    dev: 'bfe',\n    a: function() {\n      return this.dev\n    },\n    b() {\n      return this.dev\n    },\n    c: () => {\n      return this.dev\n    },\n    d: function() {\n      return (() => {\n        return this.dev\n      })()\n    },\n    e: function() {\n      return this.b()\n    },\n    f: function() {\n      return this.b\n    },\n    g: function() {\n      return this.c()\n    },\n    h: function() {\n      return this.c\n    },\n    i: function() {\n      return () => {\n        return this.dev\n      }\n    }\n  }\n\n  console.log(obj.a()) //bfe\n  console.log(obj.b()) // bfe\n  console.log(obj.c()) // undefined\n  console.log(obj.d()) // bfe\n  console.log(obj.e()) // bfe\n  console.log(obj.f()()) // undefined\n  console.log(obj.g()) // undefined\n  console.log(obj.h()()) // undefined\n  console.log(obj.i()()) // bfe\n```\n","n":0.102}}},{"i":141,"$":{"0":{"v":"Husky Hook","n":0.707},"1":{"v":"## Setup husky pre-commit hook\n\n1. npm install husky lint-staged --save-dev\n2. Next, add a script for it in package.json:\n    ```json\n    \"lint-staged\": \"lint-staged --config lint-staged.js\",\n    \"husky-install\": \"husky install\"\n    ```\n3. Run: npm run husky-install\n4. Then create your hook with the following command: `npx husky add .husky/pre-commit \"npm run lint-staged\"`\n    The following file will be automatically generated in the .husky folder at the root of the project:\n    ```bash\n    #!/bin/sh\n    . \"$(dirname \"$0\")/_/husky.sh\"\n    npm run lint-staged\n    ```\n5. Add the following configs in package.json\n    ```json\n    \"husky\": {\n        \"hooks\": {\n        \"pre-commit\": \"lint-staged\"\n        }\n    },\n    \"lint-staged\": {\n        \"src/**/*.{js,jsx,ts,tsx,json,css,scss}\": [\n        \"prettier --write\"\n        ]\n    },\n    ```\n  6. Done!","n":0.101}}},{"i":142,"$":{"0":{"v":"Express","n":1},"1":{"v":"\n- simple express server\n\n```js\nconst express = require('express');\nconst app = express();\napp.get(\"/\", (req,res) => {\n    res.status(200).json({success: true, data: {id: 1}})\n}) //optional\napp.listen(3000, console.log('server running...));\n```\n\n## Types of requests\n- get\n```js\napp.get(\"/\", (req,res) => {\n    res.status(200).json({success: true, data: {id: 1}})\n})\n```\n- get single id\n\n```js\napp.get(\"/:id\", (req,res) => {\n    res.status(200).json({success: true, data: `receive id ${req.params.id}`})\n})\n```\n///rly post, put and delete routes can be added.\n\n- adding routes in the server.js file will end up populating the entire file with routes. For such cases we use express router to manage different routes. See: [[learning.express.router]]\n\n","n":0.111}}},{"i":143,"$":{"0":{"v":"Router","n":1},"1":{"v":"\n- add separate routes using express router\n```js\nconst express = require(\"express\");\nconst router = express.Router();\n\nrouter.get(\"/\", (req,res) => {\n    res.status(200).json({success: true, data: {id: 1}})\n})\n\nmodule.exports = router\n```\n\n- use middleware in server file to use the express router created in above snippet\n\n```js\nconst testRoute = require('/path-to-route-file')\n...\napp.use(\"/api/v1/test\", testRoute)\n```\n\n- presently the route methods just return the dummy data in response but eventually in a real app this is gonna get big. We might have db operations etc before sending the response. In express we use controller methods to write the router operation. Each route has its own controller method.","n":0.105}}},{"i":144,"$":{"0":{"v":"Middleware","n":1},"1":{"v":"- middleware is a func that can intercept the request response cycle.\n- has access to req and response objects\n- take 3 params, req, res, next\n\n## Existing examples\n- morgan: third party dev logging middleware\n- `app.use(express.json())`: in order to use req.body you need express's built-in body parser middleware. If we don't use this, fetching `req.body` for a route gives undefined.\n\n\n\n","n":0.131}}},{"i":145,"$":{"0":{"v":"Error Handling","n":0.707},"1":{"v":"__Lookup__: https://expressjs.com/en/guide/error-handling.html for more details\n\n- Starting with Express 5, route handlers and middleware that return a Promise will call next(value) automatically when they reject or throw an error. For example:\n```js\napp.get('/user/:id', async (req, res, next) => {\n  const user = await getUserById(req.params.id)\n  res.send(user)\n})\n```\nIf `getUserById` throws an error or rejects, next will be called with either the thrown error or the rejected value. If no rejected value is provided, next will be called with a default Error object provided by the Express router.\n\n- Errors that occur in synchronous code inside route handlers and middleware require no extra work. If synchronous code throws an error, then Express will catch and process it. For example:\n```js\napp.get('/', (req, res) => {\n  throw new Error('BROKEN') // Express will catch this on its own.\n})\n```\n- For errors returned from asynchronous functions invoked by route handlers and middleware, you must pass them to the next() function, where Express will catch and process them. For example:\n\n```js\napp.get('/', (req, res, next) => {\n  fs.readFile('/file-does-not-exist', (err, data) => {\n    if (err) {\n      next(err) // Pass errors to Express.\n    } else {\n      res.send(data)\n    }\n  })\n})\n```","n":0.075}}},{"i":146,"$":{"0":{"v":"Controller","n":1},"1":{"v":"\n- controller method\n```js\n\nexports.getTest(\"/\", (req,res) => {\n    res.status(200).json({success: true, msg: \"get all data\"})\n})\n\nexports.postTest(\"/\", (req,res) => {\n    res.status(200).json({success: true, data: \"create a test data\"})\n})\n```\n\n- route file\n```js\nconst express = require(\"express\");\nconst router = express.Router();\nconst { getTest, postTest } = require('./path-to-controller')\n\nrouter.route(\"/\").get(getTest).post(postTest)\nrouter.route(\"/:id\").get(blabla).put(blabla).delete(blabla)\n\nmodule.exports = router\n```\n","n":0.162}}},{"i":147,"$":{"0":{"v":"Eslint","n":1},"1":{"v":"\n## configure eslint in project\n\n- npm i -D eslint\n- npx eslint --init and then answer the questions\n- add scripts in your package json:\n\n```json\n\"scripts\": {\n  \"lint\": \"eslint .\",\n  \"lint:fix\": \"eslint . --fix\"\n}\n```\n\n- npm run lint\n\n- to ignore any folder from checking lints add the folder/file in ` \"ignorePatterns\"` in .eslintrc.\neg: \n```json\n \"ignorePatterns\": [\"dist/\"] //ignores entire files inside dist folder\n```\n\n## Trouble shooting:\n\n- for react prop types error, add rule : \"react/prop-types\": \"off\" in eslintrc\n","n":0.118}}},{"i":148,"$":{"0":{"v":"Docker","n":1},"1":{"v":"\nA platform for building, running and shipping applications.\n\n## Container\n\nAn isolated environment for running an application.\nThis is diiferent from a virtual machine.\n\n- lightweight\n- all containers uses the OS(to be specific: kernel\\*) of the host\n- start quickly\n- need less hardware resources\n\n\\*kernel manages applications and hardware resources\n\n### Virtual Machine\n\nA VM is an abstraction of a machine(physical hardware). We use hypervisor to create and manage VM.\n\n- each VM needs a full blown OS\n- resource intensive, takes a portion of the physical hardware resources. For eg: if you have 8GB memory, it is divided among the VM\n\n## volumes\n\nVolumes in Docker are used to persist data generated or used by containers.\n\n- When a container is destroyed or recreated, any data stored within the container's filesystem is lost.\n\n- Volumes provide a way to store and share data between containers or between the host machine and containers, ensuring data persistence even when containers are removed or replaced.\n\n\n\n## Commands\n\n- docker network ls\n- docker network inspect <network-name>\n\n```bash\n# run inside constainer terminal to check if able to connect.\n/app  nc -vz rabbitmq 5672\n\nrabbitmq (172.24.0.3:5672) open\n```\n\n\n## Ref\n```bash\n#!/bin/bash\n\n# Start the app\nnpm start &\n\n# Wait for the app to establish a connection\nuntil nc -vz mongo-db 27017; do\n  echo \"Waiting for MongoDB to become available...\"\n  sleep 1\ndone\n\n# Run the seed script\nnpm run seed\n\n# Keep the container running\ntail -f /dev/null\n\n```","n":0.069}}},{"i":149,"$":{"0":{"v":"Docker Compose","n":0.707},"1":{"v":"\n## References\n\n- [[Yaml|learning.yaml]]\n\n## Docker compose\n\n- used for composing a multi-container application.\n- To start such application run: `docker-compose up`\n- to build: `docker-compose build`, to build without cache: `docker-compose build --no-emit`\n- If you make some changes to the project files, run docker-compose build then re-run the docker-compose up command.\n\n## Syntax\n\n```yml\nversion: '3'\nservices:\n  service_name:\n    image: image_name:tag #image specific service.\n    ports:\n      - host_port:container_port\n    volumes:\n      - host_path:container_path\n    environment:\n      - KEY=VALUE #env ariables\n    ...\n  service_name2:\n    build: ./frontend #tells docker how to build this service. This links to Dockerfile of this service\n    ports:\n      - 3000:3000\n```\n\n## Database\n\nif you want to run PostgreSQL with Docker, then the localhost alias will not work. In this case, your url will be DATABASE_URL=\"postgresql://postgres:postgres@postgres:5432/Todo?schema=public\", where alias postgres will be the container name that runs a PostgreSQL image within Docker.\n","n":0.089}}},{"i":150,"$":{"0":{"v":"Database Desig","n":0.707},"1":{"v":"\n## Normalization\n\n- Normalization is the process of minimizing redundancy from a relation or set of relations\n  There are various level of normalization. These are some of them:\n\n1. First Normal Form (1NF)\n2. Second Normal Form (2NF)\n3. Third Normal Form (3NF)\n4. Boyce-Codd Normal Form (BCNF)\n5. Fourth Normal Form (4NF)\n6. Fifth Normal Form (5NF)\n\n### 1NF\n\nFirst Normal Form (1NF):\nIf a relation contains a composite or multi-valued attribute, it violates the first normal form, or the relation is in first normal form if it does not contain any composite or multi-valued attribute. A relation is in first normal form if every attribute in that relation is singled valued attribute.\n\nA table is in 1 NF if:\n\n- There are only Single Valued Attributes.\n- Attribute Domain does not change.\n- There is a unique name for every Attribute/Column.\n- The order in which data is stored does not matter.\n\n## 2NF\n\n- full functional dependency\n","n":0.084}}},{"i":151,"$":{"0":{"v":"CSS","n":1},"1":{"v":"\n\r\n## Resources:\r\n- [Basic Css](https://www.freecodecamp.org/learn/responsive-web-design/basic-css/)\r\n- [Transform-Transition](https://thoughtbot.com/blog/transitions-and-transforms)\r\n\r\n## Transform and Transition\r\n- https://thoughtbot.com/blog/transitions-and-transforms\r\n- **transforms** move or change the appearance of an element, while **transitions** make the element smoothly and gradually change.\r\n- Without a transition, an element being transformed would change abruptly from one state to another.\r\n\r\n```css\r\ndiv {\r\n  transition: [property] [duration] [timing-function] [delay];\r\n  /**\r\n  *  transition: all 3s; \r\n  *  all: transition-property (required)\r\n  *  3s : transition-duration (required) rest are optional\r\n   **/\r\n}\r\n```\r\n- **Transition-property**(required): CSS property where the transition will be applied. You may apply a transition to an individual property (e.g., background-color or tranform) or to all properties in the rule-set (i.e., all).\r\n\r\n- **Transition-duration**(required): specifies the time span of the transition\r\n\r\n```css\r\n  div {\r\n    transition-duration: 3s;\r\n  }\r\n  /** shorthand **/\r\n  div {\r\n  transition: all 3s;\r\n}\r\n```\r\n\r\n- **Transition timing function** (optional): \r\n options are => linear, ease, ease-in, ease-out, and ease-in-out\r\n```css\r\n div {\r\n  transition-timing-function: ease-in-out;\r\n}\r\n\r\n/** shorthand **/\r\ndiv {\r\n transition: all 3s ease-in;\r\n}\r\n```\r\n\r\n- **Transition delay** (optional): \r\nThe transition-delay property allows you to specify when the transform will start. By default, the transition starts as soon as it is triggered (e.g., on mouse hover). However, if you want to transition to start after it is triggered you can use the transition delay property.\r\n\r\n```css\r\n/** shorthand **/\r\ndiv {\r\n transition: all 3s ease-in 0.5s;\r\n}\r\n\r\n```\r\n\r\n## Transform\r\n\r\n- make an element change from one state to another\r\n- you can rotate, move, skew, and scale elements. \r\n-  triggered when an element changes states, such as on mouse-hover or mouse-click.\r\n\r\n### scale\r\n- increase or decrease the size of an element.\r\n- scale(2): makes the size twice, scale(0.5) makes the size half\r\n\r\n_NOTE: Don’t forget to add a transition! Without applying transition, the element would abruptly change sizes. Add the transition to the parent selector (not the hover selector). To make the transition smooth on both hover-over/hover-off._\r\n```css\r\ndiv {\r\n  transition: transform 1s;\r\n}\r\n\r\ndiv:hover {\r\n  transform: scale(2);\r\n}\r\n```\r\n### rotate\r\n\r\n- rotate(90deg): clockwise 90\r\n- rotate(-90deg): anticlockwise 90\r\n- You can rotate more than a full rotation with numbers over than 360, such as 1080deg, for three full rotations.\r\n\r\n```css\r\ndiv {\r\n  transition: transform 1s;\r\n}\r\n\r\ndiv:hover {\r\n  transform: rotate(1080deg);\r\n}\r\n```\r\n\r\n### translate\r\n- moves an element left/right and up/down.\r\n- +x: right, -x: left\r\n- +y: down, -y: up\r\n\r\n```css\r\ndiv {\r\n  transition: transform 1s;\r\n}\r\n\r\ndiv:hover {\r\n  transform: translate(20px, 20px);\r\n}\r\n```\r\n\r\n### skew\r\n- the element skews (or tilts) one direction or the other.\r\n- +x: left, -x: right (oposite of translate)\r\n- +y: down, -y: up\r\n\r\n```css\r\ndiv {\r\n  transition: transform 1s;\r\n}\r\n\r\ndiv:hover {\r\n  transform: skewX(-20deg);\r\n}\r\n```","n":0.051}}},{"i":152,"$":{"0":{"v":"Responsive Design","n":0.707}}},{"i":153,"$":{"0":{"v":"Grid","n":1},"1":{"v":"\n# Cheatsheet\n- [Cheatsheet](https://grid.malven.co/)\n- [Grid Garden game](https://cssgridgarden.com/)\n\n## Grid\n\nGrid also introduces a new unit, the fractional fr. Each fr unit allocates one share of the available space. For example, if two elements are set to 1fr and 3fr respectively, the space is divided into 4 equal shares; the first element occupies 1/4 and the second element 3/4 of any leftover space.\n\n```css\n.container {\n    display: grid; \n    /* 1fr stands for 1 fraction. In the below css, column 3 is twice as column 1 & 2. */\n    grid-template-columns: 1fr 1fr 2fr;\n    gap: 2rem;\n}\n```\n\n- can also use **repeat** for values\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: 1fr 1fr; \n  gap: 20px;\n}\n```\n\n- use **auto** when fraction needs to be adjusted automatically\n```css\n.container {\n  display: grid;\n  /* will automatically adjust the 1st column based on content */\n  grid-template-columns: auto 1fr 1fr;\n  grid-template-rows: 1fr 1fr; \n  gap: 20px;\n}\n```\n\n**Most common pattern**\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n}\n```\nLet's break down the value:\n\n- **repeat(auto-fill, ...)**: This part indicates that you want to repeat the following column definition as many times as possible within the available space. The auto-fill keyword means that the grid will automatically create as many columns as it can fit within the container.\n- **minmax(200px, 1fr)**: This part sets the sizing for each column. It defines a range between a minimum and maximum size for the columns.\n200px is the minimum width that each column should have. Columns will not become narrower than this value.\n1fr represents the flexible part of the column sizing. It tells the grid to distribute any available space evenly among the columns. So, if there's extra space beyond the minimum requirement, it will be distributed equally among the columns.\n\n\nThe combination of auto-fill and minmax(200px, 1fr) allows the grid to automatically adjust the number of columns based on the available space while ensuring that each column is at least 200px wide. If there's additional space available, the columns will expand equally to fill the remaining space.\n\n__NOTE__: **grid-template** is a shorthand property that combines grid-template-rows and grid-template-columns.\n\nbelow eg. will create a grid with two rows that are 50% each, and one column that is 200 pixels wide.\n\n```css\n#garden {\n    grid-template: 50% 50% / 200px;\n } \n```\n\n## Grid Column Properties\n\n- **grid-column-start**\n```css\n.green {\n    /* start the green class item from grid 2 */\n    grid-column-start: 2\n}\n```\n\n- When **grid-column-start** is used alone, the grid item by default will span exactly one column. However, you can extend the item across multiple columns by adding the **grid-column-end** property.\n\n- **grid-column**: \ngrid-column is a shorthand property that can accept both values at once, separated by a slash.\n\nFor example, \n```css\ngrid-column: 2 / 4;\n```\n will set the grid item to start on the 2nd vertical grid line and end on the 4th grid line.\n\n\n```css\n.green {\n    /* span the column across 2 grids for ele with class green */\n    grid-column: span 2\n}\n```\n\n\n- **grid-area**\n\nthere's yet another shorthand for that. grid-area accepts four values separated by slashes: grid-row-start, grid-column-start, grid-row-end, followed by grid-column-end.\n\nOne example of this would be \n```css\n.green {\n    grid-area: 1 / 1 / 3 / 6;\n}\n```\n\n","n":0.045}}},{"i":154,"$":{"0":{"v":"Flex Box","n":0.707},"1":{"v":"\n# Flexbox\n\n```css\n  display: flex;\n```\n## Properties\n\n### justify-content\naligns items horizontally.\n\nAccepted values: \n* flex-start: Items align to the left side of the container.\n* flex-end: Items align to the right side of the container.\n* center: Items align at the center of the container.\n* space-between: Items display with equal spacing between them.\n* space-around: Items display with equal spacing around them.\n\n### align-items\naligns items vertically.\n\nAccepted values: \n* flex-start: Items align to the top of the container.\n* flex-end: Items align to the bottom of the container.\n* center: Items align at the vertical center of the container.\n* baseline: Items display at the baseline of the container.\n* stretch: Items are stretched to fit the container.\n\n### align-content\n set how multiple lines are spaced apart from each other.\n * flex-start: Lines are packed at the top of the container.\n* flex-end: Lines are packed at the bottom of the container.\n* center: Lines are packed at the vertical center of the container.\n* space-between: Lines display with equal spacing between them.\n* space-around: Lines display with equal spacing around them.\n* stretch: Lines are stretched to fit the container.\n\n__This can be confusing, but align-content determines the spacing between lines, while align-items determines how the items as a whole are aligned within the container. When there is only one line, align-content has no effect.__\n\n### flex-direction\nproperty defines the direction items are placed in the container.\n\nAccepted values:\n* row: Items are placed the same as the text direction.\n* row-reverse: Items are placed opposite to the text direction.\n* column: Items are placed top to bottom.\n* column-reverse: Items are placed bottom to top.\n\n- __Notice that when you set the flex-direction to a reversed row or column, start and end are also reversed.__\n\n![](/assets/images/2022-04-04-17-37-37.png)\n\n- __Notice that when the flex direction is a column, justify-content changes to the vertical and align-items to the horizontal.__\n\n![](/assets/images/2022-04-04-19-26-13.png)\n\n### flex-wrap\nwraps the items of flexbox\n\nAccepts the following values:\n\n* nowrap: Every item is fit to a single line.\n* wrap: Items wrap around to additional lines.\n* wrap-reverse: Items wrap around to additional lines in reverse.\n\n### flex-flow\nThe two properties _flex-direction_ and _flex-wrap_ are used so often together that the shorthand property __flex-flow__ was created to combine them. This shorthand property accepts the value of the two properties separated by a space.\n\nFor example, you can use flex-flow: row wrap to set rows and wrap them.\n\n### align-self\nAnother property you can apply to individual items is align-self. This property accepts the same values as align-items and its value for the specific item.\n\n### order\nSometimes reversing the row or column order of a container is not enough. In these cases, we can apply the order property to individual items. By default, items have a value of 0, but we can use this property to also set it to a positive or negative integer value (-2, -1, 0, 1, 2).\n\n\n\n\n## TODO\nAnimation CSS #learn\n```css\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n```\n","n":0.046}}},{"i":155,"$":{"0":{"v":"Selectors","n":1},"1":{"v":"\n## Simple selectors\n\n- **.class**: class selector\n- **div.class**: The class selector only for specific element(div)\n- **#id** : id selector\n- **h1**: group selector\n- **h1, p**: to group selectors, separate each selector with a comma.\n\n## CSS Combinators\n- descendant selector (space)\n- child selector (>)\n- adjacent sibling selector (+)\n- general sibling selector (~)\n### examples\n\n- **div p**: all elements that are descendants of a specified element.\n- **div > p**: all elements that are the **direct** children of a specified element.\n- **div + p**:  element that is directly after another specific element. Sibling elements must have the same parent element, and \"adjacent\" means \"immediately following\".\n- **div~p**: The general sibling selector selects all elements that are next siblings of a specified element.\n\n## Psuedo class selectors\n\n- **p:first-child**:  selects all first child p elements.\n- \n","n":0.089}}},{"i":156,"$":{"0":{"v":"Position","n":1},"1":{"v":"\n- static: (default) not positioned in any special way; it is always positioned according to the normal flow of the page.\n- relative: positioned relative to its normal position. Other content will not be adjusted to fit into any gap left by the element.\n- fixed: An element with `position: fixed;` is positioned relative to the viewport,\n- absolute: An element with `position: absolute` is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed).\n\nHowever; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.\n- sticky: An element with `position: sticky;` is positioned based on the user's scroll position.","n":0.094}}},{"i":157,"$":{"0":{"v":"Cook","n":1},"1":{"v":"- https://hackernoon.com/deploy-to-ec2-with-aws-codedeploy-from-bitbucket-pipelines-4f403e96d50c\n\n- Install nvm in macos: https://www.freecodecamp.org/news/node-version-manager-nvm-install-guide/","n":0.378}}},{"i":158,"$":{"0":{"v":"Chrome Extension","n":0.707},"1":{"v":"- Demo: https://github.com/Harshita-mindfire/chrome-ext\n## Extension Files\n- manifest.json: should be at the root. The manifest records important metadata, defines resources, declares permissions, and identifies which files to run in the background and on the page.\n- service worker: The extension service worker handles and listens for browser events\n## Lookup\n### Chrome Extension API:\n-  https://developer.chrome.com/docs/extensions/reference/\n- https://developer.chrome.com/docs/extensions/mv3/devguide/\n- https://developer.chrome.com/docs/webstore/publish/\n","n":0.139}}},{"i":159,"$":{"0":{"v":"Bootstrap 5","n":0.707},"1":{"v":"\n- [Demo App](https://harshita-mindfire.github.io/bootstrap-5-demo/)\n- [Code Repository](https://github.com/Harshita-mindfire/bootstrap-5-demo)\n\n## Misc\n- Illustration images: https://undraw.co/illustrations\n\n### Fundamentals\n- does not require jquery as a dependency anymore.\n\n\n## Margins\n\n- `m` - margin\n- `p` -  padding\nWhere sides is one of:\n\n- `t` : for classes that set margin-top or padding-top\n- `b` : for classes that set margin-bottom or padding-bottom\n- s - (start) for classes that set margin-left or padding-left in LTR, margin-right or padding-right in RTL\n- e - (end) for classes that set margin-right or padding-right in LTR, margin-left or padding-left in RTL\n- x - for classes that set both *-left and *-right\n- y - for classes that set both *-top and *-bottom\nblank - for classes that set a margin or padding on all 4 sides of the element\n\n\n## Navbar\n- ms-auto: margin start: auto","n":0.091}}},{"i":160,"$":{"0":{"v":"Auth0","n":1},"1":{"v":"\n## default routes\nAfter the application is integrated with Auth0, the library provides default routes for logging in and out. You can test out the routes and we will be monitoring your logs in real-time to display relevant information.\n\n- For login: In your application, visit the /login route provided by the library. If you are running your project on http://localhost:3000 that link would be http://localhost:3000/login.\n- For logout: In your application, visit the /logout route provided by the library. If you are running your project on http://localhost:3000 that link would be http://localhost:3000/logout.\n\n## requiresAuth\n\nrequiresAuth middleware is for routes that require authentication. Any route using this middleware will check for a valid user session and, if one does not exist, it will redirect the user to log in.","n":0.09}}},{"i":161,"$":{"0":{"v":"Algo","n":1},"1":{"v":"This hierarchy contains my notes for algorithms\n\n\n## Binary Search Tree\n\nBinary Search Tree is a node-based binary tree data structure which has the following properties:\n\n- The left subtree of a node contains only nodes with keys lesser than the node’s key.\n- The right subtree of a node contains only nodes with keys greater than the node’s key.\n- The left and right subtree each must also be a binary search tree.\n\n\nInorder traversal(Left --> Root --> Right) of BST gives a sorted values.\n\n\n## AVL Tree\nAVL tree is a self-balancing Binary Search Tree (BST) where the difference between heights of left and right subtrees cannot be more than one for all nodes.\n\n## Graph Algos\nhttps://www.youtube.com/watch?v=cWNEl4HE2OE\n\n### Creating adjacency list\n```js\nconst airports = \"Del Mum Kol Bng Deh Pnt\".split(\" \");\n//console.log(airports);\nconst routes = [\n    [\"Del\", \"Deh\"],\n    [\"Del\", \"Mum\"],\n    [\"Del\",\"Bng\" ],\n    [\"Mum\", \"Kol\"],\n    [\"Deh\", \"Pnt\"]\n    ];\n\nconst adjacencyList = new Map();// add key value\nfunction addNode(airport) {\n    adjacencyList.set(airport,[])\n}\nairports.forEach(airport => addNode(airport));\n//console.log(adjacencyList);\n\nfunction addEdge(src, dest) {\n    adjacencyList.get(src).push(dest);\n    adjacencyList.get(dest).push(src);\n}\nroutes.forEach(route => addEdge(...route))\n// console.log(adjacencyList);\n```\n### DFS\n\n```js\nfunction Dfs(root, visited = new Set()) {\n    visited.add(root);\n    const dests = adjacencyList.get(root);\n    \n    dests.forEach(dest => {\n        console.log(dest)\n        if(dest === \"Deh\") {\n            console.log(\"reached\");\n            return;\n        }\n        if(!visited.has(dest)) {\n            Dfs(dest, visited)\n        }\n    })\n}\nDfs(\"Mum\")\n```\n\n### BFS\n\n```js\n// BFS with entry point Mum (also log if reached Bng)\n\nfunction BFS(root) {\n    const visited = new Set();\n    const queue = [root]\n    visited.add(root)\n\n    while(queue.length > 0) {\n        const airport = queue.shift(1);\n        const dests = adjacencyList.get(airport);\n        dests.forEach(dest => {\n            console.log(dest)\n            if(dest === \"Bng\") console.log(\"Reached Bng\")\n        if(!visited.has(dest)){\n            visited.add(dest)\n            queue.push(dest) \n\n        }\n        }\n            )\n    }\n    console.log(visited)\n\n}\nBFS(\"Mum\")\n```","n":0.065}}},{"i":162,"$":{"0":{"v":"Big O Notation","n":0.577},"1":{"v":"\n- Numeric representation of performance of a code.\n- helps us to generalise a code so that we can compare between 2 approaches and conclude which one is the best fit.(bad analogy but just like ritcher scale is for earthquake)\n\n## Example\n\n### Sum of a numbers till n\nApproach 1: O(n)\n```js\ntotal =0;\nfor (i=0;i<=n;i++>){\n total +=n;\n}\n```\nBetter approach: O(1)\n```js\nconst total = n * (n+1)/2;\n```","n":0.13}}}]}
